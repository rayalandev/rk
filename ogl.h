//	ogl.h - Rayalan Kenyon
//	July, 2017
//
//	ogl.h is a single file header library for loading OpenGL function pointers
//	ogl.h supports OpenGL 4.1 core and compatibility profiles ONLY
//	ogl.h DOES NOT load any extensions
//
//	YOU MUST:
//		#define OGL_IMPLEMENTATION in one file
//		call ogl_init(void) after OpenGL context creation
//
//	DEFINITIONS
//		#define OGL_IMPLEMENTATION 
//			includes .c file code
//		#define OGL_COMPATIBILITY
//			includes deprecated OpenGL features
//
//	NOTES:
//		int ogl_init() returns number of functions that failed to load
//		ogl_get_proc_address(name) can be used to get function pointers
//
//	CREDIT:
//		Created with aid of glLoadGen by Jason McKesson
//		- Available here: https://bitbucket.org/alfonse/glloadgen/wiki/Home
//
//  VERSION:
//      1.00 - initial release
//
//  LICENSE:
//      See end of file for license information.
//
#ifndef OGL_INCLUDE
#define OGL_INCLUDE

#ifdef __cplusplus
extern "C" {
#endif /*__cplusplus*/

#if defined(__glew_h__) || defined(__GLEW_H__)
#error You must include ogl.h before glew.h
#endif
#if defined(__gl_h_) || defined(__GL_H__)
#error You must include ogl.h before gl.h
#endif
#if defined(__glext_h_) || defined(__GLEXT_H_)
#error You must include ogl.h before glext.h
#endif
#if defined(__gltypes_h_)
#error You must include ogl.h before gltypes.h
#endif
#if defined(__gl_ATI_h_)
#error You must include ogl.h before glATI.h
#endif

#define __glew_h__
#define __GLEW_H__
#define __gl_h_
#define __GL_H__
#define __glext_h_
#define __GLEXT_H_
#define __gltypes_h_
#define __gl_ATI_h_

#ifndef APIENTRY
		#ifndef WIN32_LEAN_AND_MEAN
			#define WIN32_LEAN_AND_MEAN 1
		#endif
		#ifndef NOMINMAX
			#define NOMINMAX
		#endif
		#include <windows.h>
#else
		#define APIENTRY
#endif /*APIENTRY*/

#ifndef OGL_FUNCPTR
	#if defined(_WIN32)
		#define OGL_FUNCPTR APIENTRY
	#else
		#define OGL_FUNCPTR
	#endif
#endif /*OGL_FUNCPTR*/

#ifndef GLAPI
	#define GLAPI extern
#endif


#include <stddef.h>
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef char GLchar;
typedef char GLcharARB;

#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif

typedef unsigned short GLhalfARB;
typedef unsigned short GLhalf;
typedef GLint GLfixed;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef ptrdiff_t GLintptrARB;
typedef ptrdiff_t GLsizeiptrARB;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;


#define GL_ALPHA 0x1906
#define GL_ALWAYS 0x0207
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_BACK 0x0405
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_BLEND 0x0BE2
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLUE 0x1905
#define GL_BYTE 0x1400
#define GL_CCW 0x0901
#define GL_CLEAR 0x1500
#define GL_COLOR 0x1800
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CW 0x0900
#define GL_DECR 0x1E03
#define GL_DEPTH 0x1801
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DITHER 0x0BD0
#define GL_DONT_CARE 0x1100
#define GL_DOUBLE 0x140A
#define GL_DOUBLEBUFFER 0x0C32
#define GL_DRAW_BUFFER 0x0C01
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EXTENSIONS 0x1F03
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FILL 0x1B02
#define GL_FLOAT 0x1406
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_GEQUAL 0x0206
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_INCR 0x1E02
#define GL_INT 0x1404
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERT 0x150A
#define GL_KEEP 0x1E00
#define GL_LEFT 0x0406
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LINE 0x1B01
#define GL_LINEAR 0x2601
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STRIP 0x0003
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_NAND 0x150E
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEVER 0x0200
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOOP 0x1505
#define GL_NOR 0x1508
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_ONE 1
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OR 0x1507
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_POINT 0x1B00
#define GL_POINTS 0x0000
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_QUADS 0x0007
#define GL_R3_G3_B2 0x2A10
#define GL_READ_BUFFER 0x0C02
#define GL_RED 0x1903
#define GL_RENDERER 0x1F01
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_RGB 0x1907
#define GL_RGB10 0x8052
#define GL_RGB10_A2 0x8059
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_A1 0x8057
#define GL_RGB8 0x8051
#define GL_RGBA 0x1908
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_RIGHT 0x0407
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SET 0x150F
#define GL_SHORT 0x1402
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_STENCIL 0x1802
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STEREO 0x0C33
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE 0x1702
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRUE 1
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_SHORT 0x1403
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VIEWPORT 0x0BA2
#define GL_XOR 0x1506
#define GL_ZERO 0
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MULTISAMPLE 0x809D
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_COLOR 0x8001
#define GL_DECR_WRAP 0x8508
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_INCR_WRAP 0x8507
#define GL_MAX 0x8008
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MIN 0x8007
#define GL_MIRRORED_REPEAT 0x8370
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_CURRENT_QUERY 0x8865
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_READ_ONLY 0x88B8
#define GL_READ_WRITE 0x88BA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_WRITE_ONLY 0x88B9
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_COMPILE_STATUS 0x8B81
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_DELETE_STATUS 0x8B80
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_LINK_STATUS 0x8B82
#define GL_LOWER_LEFT 0x8CA1
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SHADER_TYPE 0x8B4F
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_UPPER_LEFT 0x8CA2
#define GL_VALIDATE_STATUS 0x8B83
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_SHADER 0x8B31
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB_ALPHA 0x8C42
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGR_INTEGER 0x8D9A
#define GL_BLUE_INTEGER 0x8D96
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RG 0x8226
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_CONTEXT_FLAGS 0x821E
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FIXED_ONLY 0x891D
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_GREEN_INTEGER 0x8D95
#define GL_HALF_FLOAT 0x140B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_MAJOR_VERSION 0x821B
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MINOR_VERSION 0x821C
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_NUM_EXTENSIONS 0x821D
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_WAIT 0x8E13
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R16 0x822A
#define GL_R16F 0x822D
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32F 0x822E
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_R8 0x8229
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RED_INTEGER 0x8D94
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RG 0x8227
#define GL_RG16 0x822C
#define GL_RG16F 0x822F
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32F 0x8230
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_RG8 0x822B
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RGB16F 0x881B
#define GL_RGB16I 0x8D89
#define GL_RGB16UI 0x8D77
#define GL_RGB32F 0x8815
#define GL_RGB32I 0x8D83
#define GL_RGB32UI 0x8D71
#define GL_RGB8I 0x8D8F
#define GL_RGB8UI 0x8D7D
#define GL_RGB9_E5 0x8C3D
#define GL_RGBA16F 0x881A
#define GL_RGBA16I 0x8D88
#define GL_RGBA16UI 0x8D76
#define GL_RGBA32F 0x8814
#define GL_RGBA32I 0x8D82
#define GL_RGBA32UI 0x8D70
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGB_INTEGER 0x8D98
#define GL_RG_INTEGER 0x8228
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_R16_SNORM 0x8F98
#define GL_R8_SNORM 0x8F94
#define GL_RG16_SNORM 0x8F99
#define GL_RG8_SNORM 0x8F95
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA8_SNORM 0x8F97
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_ALREADY_SIGNALED 0x911A
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_OBJECT_TYPE 0x9112
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SIGNALED 0x9119
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_STATUS 0x9114
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_WAIT_FAILED 0x911D
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_RGB10_A2UI 0x906F
#define GL_SAMPLER_BINDING 0x8919
#define GL_SRC1_COLOR 0x88F9
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIMESTAMP 0x8E28
#define GL_TIME_ELAPSED 0x88BF
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_ISOLINES 0x8E7A
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_PATCHES 0x000E
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_PATCH_VERTICES 0x8E72
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLE_SHADING 0x8C36
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_FIXED 0x140C
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_HIGH_FLOAT 0x8DF2
#define GL_HIGH_INT 0x8DF5
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LOW_FLOAT 0x8DF0
#define GL_LOW_INT 0x8DF3
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_MEDIUM_INT 0x8DF4
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_RGB565 0x8D62
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_SHADER_COMPILER 0x8DFA
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C


#ifdef OGL_COMPATIBILITY
#define GL_2D 0x0600
#define GL_2_BYTES 0x1407
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_3_BYTES 0x1408
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_4_BYTES 0x1409
#define GL_ACCUM 0x0100
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ADD 0x0104
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_ALPHA_BITS 0x0D55
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_AMBIENT 0x1200
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_AUTO_NORMAL 0x0D80
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_AUX_BUFFERS 0x0C00
#define GL_BITMAP 0x1A00
#define GL_BITMAP_TOKEN 0x0704
#define GL_BLUE_BIAS 0x0D1B
#define GL_BLUE_BITS 0x0D54
#define GL_BLUE_SCALE 0x0D1A
#define GL_C3F_V3F 0x2A24
#define GL_C4F_N3F_V3F 0x2A26
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_CLAMP 0x2900
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_COEFF 0x0A00
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_INDEX 0x1900
#define GL_COLOR_INDEXES 0x1603
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_CURRENT_BIT 0x00000001
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_DECAL 0x2101
#define GL_DEPTH_BIAS 0x0D1F
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DIFFUSE 0x1201
#define GL_DOMAIN 0x0A02
#define GL_DONT_CARE 0x1100
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_EDGE_FLAG 0x0B43
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EMISSION 0x1600
#define GL_ENABLE_BIT 0x00002000
#define GL_EVAL_BIT 0x00010000
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_PLANE 0x2502
#define GL_FEEDBACK 0x1C01
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_FLAT 0x1D00
#define GL_FOG 0x0B60
#define GL_FOG_BIT 0x00000080
#define GL_FOG_COLOR 0x0B66
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_END 0x0B64
#define GL_FOG_HINT 0x0C54
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_MODE 0x0B65
#define GL_FOG_START 0x0B63
#define GL_GREEN_BIAS 0x0D19
#define GL_GREEN_BITS 0x0D53
#define GL_GREEN_SCALE 0x0D18
#define GL_HINT_BIT 0x00008000
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_BITS 0x0D51
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_INDEX_MODE 0x0C30
#define GL_INDEX_OFFSET 0x0D13
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INTENSITY 0x8049
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_LIGHTING 0x0B50
#define GL_LIGHTING_BIT 0x00000040
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_LINE_BIT 0x00000004
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LINE_TOKEN 0x0702
#define GL_LIST_BASE 0x0B32
#define GL_LIST_BIT 0x00020000
#define GL_LIST_INDEX 0x0B33
#define GL_LIST_MODE 0x0B30
#define GL_LOAD 0x0101
#define GL_LOGIC_OP 0x0BF1
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_MATRIX_MODE 0x0BA0
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_MODULATE 0x2100
#define GL_MULT 0x0103
#define GL_N3F_V3F 0x2A25
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_NORMALIZE 0x0BA1
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_PLANE 0x2501
#define GL_ORDER 0x0A01
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_POINT_BIT 0x00000002
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_POINT_TOKEN 0x0701
#define GL_POLYGON 0x0009
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_POLYGON_TOKEN 0x0703
#define GL_POSITION 0x1203
#define GL_PROJECTION 0x1701
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_Q 0x2003
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_QUAD_STRIP 0x0008
#define GL_R 0x2002
#define GL_RED_BIAS 0x0D15
#define GL_RED_BITS 0x0D52
#define GL_RED_SCALE 0x0D14
#define GL_RENDER 0x1C00
#define GL_RENDER_MODE 0x0C40
#define GL_RETURN 0x0102
#define GL_RGBA_MODE 0x0C31
#define GL_S 0x2000
#define GL_SCISSOR_BIT 0x00080000
#define GL_SELECT 0x1C02
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SHADE_MODEL 0x0B54
#define GL_SHININESS 0x1601
#define GL_SMOOTH 0x1D01
#define GL_SPECULAR 0x1202
#define GL_SPHERE_MAP 0x2402
#define GL_SPOT_CUTOFF 0x1206
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STENCIL_BITS 0x0D57
#define GL_T 0x2001
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_V3F 0x2A27
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_T4F_V4F 0x2A28
#define GL_TEXTURE_BIT 0x00040000
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_ENV 0x2300
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_TRANSFORM_BIT 0x00001000
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VIEWPORT_BIT 0x00000800
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_RESCALE_NORMAL 0x803A
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SINGLE_COLOR 0x81F9
#define GL_ADD_SIGNED 0x8574
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_COMBINE 0x8570
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_RGB 0x8571
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_CONSTANT 0x8576
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_INTERPOLATE 0x8575
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_NORMAL_MAP 0x8511
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_RGB 0x8592
#define GL_PREVIOUS 0x8578
#define GL_PRIMARY_COLOR 0x8577
#define GL_REFLECTION_MAP 0x8512
#define GL_RGB_SCALE 0x8573
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_RGB 0x8582
#define GL_SUBTRACT 0x84E7
#define GL_TEXTURE0 0x84C0
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_COLOR_SUM 0x8458
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MIN 0x8126
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORD_SRC 0x8450
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_ALPHA 0x858A
#define GL_SRC2_RGB 0x8582
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_COORD_REPLACE 0x8862
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_POINT_SPRITE 0x8861
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_ALPHA_INTEGER 0x8D97
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_VERTEX_COLOR 0x891A
#endif /* OGL_COMPATIBILITY */


extern void (OGL_FUNCPTR *_ogl_glBlendFunc)(GLenum sfactor, GLenum dfactor);
#define glBlendFunc _ogl_glBlendFunc
extern void (OGL_FUNCPTR *_ogl_glClear)(GLbitfield mask);
#define glClear _ogl_glClear
extern void (OGL_FUNCPTR *_ogl_glClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#define glClearColor _ogl_glClearColor
extern void (OGL_FUNCPTR *_ogl_glClearDepth)(GLdouble depth);
#define glClearDepth _ogl_glClearDepth
extern void (OGL_FUNCPTR *_ogl_glClearStencil)(GLint s);
#define glClearStencil _ogl_glClearStencil
extern void (OGL_FUNCPTR *_ogl_glColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
#define glColorMask _ogl_glColorMask
extern void (OGL_FUNCPTR *_ogl_glCullFace)(GLenum mode);
#define glCullFace _ogl_glCullFace
extern void (OGL_FUNCPTR *_ogl_glDepthFunc)(GLenum func);
#define glDepthFunc _ogl_glDepthFunc
extern void (OGL_FUNCPTR *_ogl_glDepthMask)(GLboolean flag);
#define glDepthMask _ogl_glDepthMask
extern void (OGL_FUNCPTR *_ogl_glDepthRange)(GLdouble ren_near, GLdouble ren_far);
#define glDepthRange _ogl_glDepthRange
extern void (OGL_FUNCPTR *_ogl_glDisable)(GLenum cap);
#define glDisable _ogl_glDisable
extern void (OGL_FUNCPTR *_ogl_glDrawBuffer)(GLenum buf);
#define glDrawBuffer _ogl_glDrawBuffer
extern void (OGL_FUNCPTR *_ogl_glEnable)(GLenum cap);
#define glEnable _ogl_glEnable
extern void (OGL_FUNCPTR *_ogl_glFinish)(void);
#define glFinish _ogl_glFinish
extern void (OGL_FUNCPTR *_ogl_glFlush)(void);
#define glFlush _ogl_glFlush
extern void (OGL_FUNCPTR *_ogl_glFrontFace)(GLenum mode);
#define glFrontFace _ogl_glFrontFace
extern void (OGL_FUNCPTR *_ogl_glGetBooleanv)(GLenum pname, GLboolean * data);
#define glGetBooleanv _ogl_glGetBooleanv
extern void (OGL_FUNCPTR *_ogl_glGetDoublev)(GLenum pname, GLdouble * data);
#define glGetDoublev _ogl_glGetDoublev
extern GLenum (OGL_FUNCPTR *_ogl_glGetError)(void);
#define glGetError _ogl_glGetError
extern void (OGL_FUNCPTR *_ogl_glGetFloatv)(GLenum pname, GLfloat * data);
#define glGetFloatv _ogl_glGetFloatv
extern void (OGL_FUNCPTR *_ogl_glGetIntegerv)(GLenum pname, GLint * data);
#define glGetIntegerv _ogl_glGetIntegerv
extern const GLubyte * (OGL_FUNCPTR *_ogl_glGetString)(GLenum name);
#define glGetString _ogl_glGetString
extern void (OGL_FUNCPTR *_ogl_glGetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
#define glGetTexImage _ogl_glGetTexImage
extern void (OGL_FUNCPTR *_ogl_glGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat * params);
#define glGetTexLevelParameterfv _ogl_glGetTexLevelParameterfv
extern void (OGL_FUNCPTR *_ogl_glGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint * params);
#define glGetTexLevelParameteriv _ogl_glGetTexLevelParameteriv
extern void (OGL_FUNCPTR *_ogl_glGetTexParameterfv)(GLenum target, GLenum pname, GLfloat * params);
#define glGetTexParameterfv _ogl_glGetTexParameterfv
extern void (OGL_FUNCPTR *_ogl_glGetTexParameteriv)(GLenum target, GLenum pname, GLint * params);
#define glGetTexParameteriv _ogl_glGetTexParameteriv
extern void (OGL_FUNCPTR *_ogl_glHint)(GLenum target, GLenum mode);
#define glHint _ogl_glHint
extern GLboolean (OGL_FUNCPTR *_ogl_glIsEnabled)(GLenum cap);
#define glIsEnabled _ogl_glIsEnabled
extern void (OGL_FUNCPTR *_ogl_glLineWidth)(GLfloat width);
#define glLineWidth _ogl_glLineWidth
extern void (OGL_FUNCPTR *_ogl_glLogicOp)(GLenum opcode);
#define glLogicOp _ogl_glLogicOp
extern void (OGL_FUNCPTR *_ogl_glPixelStoref)(GLenum pname, GLfloat param);
#define glPixelStoref _ogl_glPixelStoref
extern void (OGL_FUNCPTR *_ogl_glPixelStorei)(GLenum pname, GLint param);
#define glPixelStorei _ogl_glPixelStorei
extern void (OGL_FUNCPTR *_ogl_glPointSize)(GLfloat size);
#define glPointSize _ogl_glPointSize
extern void (OGL_FUNCPTR *_ogl_glPolygonMode)(GLenum face, GLenum mode);
#define glPolygonMode _ogl_glPolygonMode
extern void (OGL_FUNCPTR *_ogl_glReadBuffer)(GLenum src);
#define glReadBuffer _ogl_glReadBuffer
extern void (OGL_FUNCPTR *_ogl_glReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
#define glReadPixels _ogl_glReadPixels
extern void (OGL_FUNCPTR *_ogl_glScissor)(GLint x, GLint y, GLsizei width, GLsizei height);
#define glScissor _ogl_glScissor
extern void (OGL_FUNCPTR *_ogl_glStencilFunc)(GLenum func, GLint ref, GLuint mask);
#define glStencilFunc _ogl_glStencilFunc
extern void (OGL_FUNCPTR *_ogl_glStencilMask)(GLuint mask);
#define glStencilMask _ogl_glStencilMask
extern void (OGL_FUNCPTR *_ogl_glStencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
#define glStencilOp _ogl_glStencilOp
extern void (OGL_FUNCPTR *_ogl_glTexImage1D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
#define glTexImage1D _ogl_glTexImage1D
extern void (OGL_FUNCPTR *_ogl_glTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
#define glTexImage2D _ogl_glTexImage2D
extern void (OGL_FUNCPTR *_ogl_glTexParameterf)(GLenum target, GLenum pname, GLfloat param);
#define glTexParameterf _ogl_glTexParameterf
extern void (OGL_FUNCPTR *_ogl_glTexParameterfv)(GLenum target, GLenum pname, const GLfloat * params);
#define glTexParameterfv _ogl_glTexParameterfv
extern void (OGL_FUNCPTR *_ogl_glTexParameteri)(GLenum target, GLenum pname, GLint param);
#define glTexParameteri _ogl_glTexParameteri
extern void (OGL_FUNCPTR *_ogl_glTexParameteriv)(GLenum target, GLenum pname, const GLint * params);
#define glTexParameteriv _ogl_glTexParameteriv
extern void (OGL_FUNCPTR *_ogl_glViewport)(GLint x, GLint y, GLsizei width, GLsizei height);
#define glViewport _ogl_glViewport
extern void (OGL_FUNCPTR *_ogl_glBindTexture)(GLenum target, GLuint texture);
#define glBindTexture _ogl_glBindTexture
extern void (OGL_FUNCPTR *_ogl_glCopyTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
#define glCopyTexImage1D _ogl_glCopyTexImage1D
extern void (OGL_FUNCPTR *_ogl_glCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
#define glCopyTexImage2D _ogl_glCopyTexImage2D
extern void (OGL_FUNCPTR *_ogl_glCopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
#define glCopyTexSubImage1D _ogl_glCopyTexSubImage1D
extern void (OGL_FUNCPTR *_ogl_glCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#define glCopyTexSubImage2D _ogl_glCopyTexSubImage2D
extern void (OGL_FUNCPTR *_ogl_glDeleteTextures)(GLsizei n, const GLuint * textures);
#define glDeleteTextures _ogl_glDeleteTextures
extern void (OGL_FUNCPTR *_ogl_glDrawArrays)(GLenum mode, GLint first, GLsizei count);
#define glDrawArrays _ogl_glDrawArrays
extern void (OGL_FUNCPTR *_ogl_glDrawElements)(GLenum mode, GLsizei count, GLenum type, const void * indices);
#define glDrawElements _ogl_glDrawElements
extern void (OGL_FUNCPTR *_ogl_glGenTextures)(GLsizei n, GLuint * textures);
#define glGenTextures _ogl_glGenTextures
extern GLboolean (OGL_FUNCPTR *_ogl_glIsTexture)(GLuint texture);
#define glIsTexture _ogl_glIsTexture
extern void (OGL_FUNCPTR *_ogl_glPolygonOffset)(GLfloat factor, GLfloat units);
#define glPolygonOffset _ogl_glPolygonOffset
extern void (OGL_FUNCPTR *_ogl_glTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
#define glTexSubImage1D _ogl_glTexSubImage1D
extern void (OGL_FUNCPTR *_ogl_glTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
#define glTexSubImage2D _ogl_glTexSubImage2D
extern void (OGL_FUNCPTR *_ogl_glCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#define glCopyTexSubImage3D _ogl_glCopyTexSubImage3D
extern void (OGL_FUNCPTR *_ogl_glDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
#define glDrawRangeElements _ogl_glDrawRangeElements
extern void (OGL_FUNCPTR *_ogl_glTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
#define glTexImage3D _ogl_glTexImage3D
extern void (OGL_FUNCPTR *_ogl_glTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
#define glTexSubImage3D _ogl_glTexSubImage3D
extern void (OGL_FUNCPTR *_ogl_glActiveTexture)(GLenum texture);
#define glActiveTexture _ogl_glActiveTexture
extern void (OGL_FUNCPTR *_ogl_glCompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
#define glCompressedTexImage1D _ogl_glCompressedTexImage1D
extern void (OGL_FUNCPTR *_ogl_glCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
#define glCompressedTexImage2D _ogl_glCompressedTexImage2D
extern void (OGL_FUNCPTR *_ogl_glCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
#define glCompressedTexImage3D _ogl_glCompressedTexImage3D
extern void (OGL_FUNCPTR *_ogl_glCompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
#define glCompressedTexSubImage1D _ogl_glCompressedTexSubImage1D
extern void (OGL_FUNCPTR *_ogl_glCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
#define glCompressedTexSubImage2D _ogl_glCompressedTexSubImage2D
extern void (OGL_FUNCPTR *_ogl_glCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
#define glCompressedTexSubImage3D _ogl_glCompressedTexSubImage3D
extern void (OGL_FUNCPTR *_ogl_glGetCompressedTexImage)(GLenum target, GLint level, void * img);
#define glGetCompressedTexImage _ogl_glGetCompressedTexImage
extern void (OGL_FUNCPTR *_ogl_glSampleCoverage)(GLfloat value, GLboolean invert);
#define glSampleCoverage _ogl_glSampleCoverage
extern void (OGL_FUNCPTR *_ogl_glBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#define glBlendColor _ogl_glBlendColor
extern void (OGL_FUNCPTR *_ogl_glBlendEquation)(GLenum mode);
#define glBlendEquation _ogl_glBlendEquation
extern void (OGL_FUNCPTR *_ogl_glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
#define glBlendFuncSeparate _ogl_glBlendFuncSeparate
extern void (OGL_FUNCPTR *_ogl_glMultiDrawArrays)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
#define glMultiDrawArrays _ogl_glMultiDrawArrays
extern void (OGL_FUNCPTR *_ogl_glMultiDrawElements)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
#define glMultiDrawElements _ogl_glMultiDrawElements
extern void (OGL_FUNCPTR *_ogl_glPointParameterf)(GLenum pname, GLfloat param);
#define glPointParameterf _ogl_glPointParameterf
extern void (OGL_FUNCPTR *_ogl_glPointParameterfv)(GLenum pname, const GLfloat * params);
#define glPointParameterfv _ogl_glPointParameterfv
extern void (OGL_FUNCPTR *_ogl_glPointParameteri)(GLenum pname, GLint param);
#define glPointParameteri _ogl_glPointParameteri
extern void (OGL_FUNCPTR *_ogl_glPointParameteriv)(GLenum pname, const GLint * params);
#define glPointParameteriv _ogl_glPointParameteriv
extern void (OGL_FUNCPTR *_ogl_glBeginQuery)(GLenum target, GLuint id);
#define glBeginQuery _ogl_glBeginQuery
extern void (OGL_FUNCPTR *_ogl_glBindBuffer)(GLenum target, GLuint buffer);
#define glBindBuffer _ogl_glBindBuffer
extern void (OGL_FUNCPTR *_ogl_glBufferData)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
#define glBufferData _ogl_glBufferData
extern void (OGL_FUNCPTR *_ogl_glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
#define glBufferSubData _ogl_glBufferSubData
extern void (OGL_FUNCPTR *_ogl_glDeleteBuffers)(GLsizei n, const GLuint * buffers);
#define glDeleteBuffers _ogl_glDeleteBuffers
extern void (OGL_FUNCPTR *_ogl_glDeleteQueries)(GLsizei n, const GLuint * ids);
#define glDeleteQueries _ogl_glDeleteQueries
extern void (OGL_FUNCPTR *_ogl_glEndQuery)(GLenum target);
#define glEndQuery _ogl_glEndQuery
extern void (OGL_FUNCPTR *_ogl_glGenBuffers)(GLsizei n, GLuint * buffers);
#define glGenBuffers _ogl_glGenBuffers
extern void (OGL_FUNCPTR *_ogl_glGenQueries)(GLsizei n, GLuint * ids);
#define glGenQueries _ogl_glGenQueries
extern void (OGL_FUNCPTR *_ogl_glGetBufferParameteriv)(GLenum target, GLenum pname, GLint * params);
#define glGetBufferParameteriv _ogl_glGetBufferParameteriv
extern void (OGL_FUNCPTR *_ogl_glGetBufferPointerv)(GLenum target, GLenum pname, void ** params);
#define glGetBufferPointerv _ogl_glGetBufferPointerv
extern void (OGL_FUNCPTR *_ogl_glGetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
#define glGetBufferSubData _ogl_glGetBufferSubData
extern void (OGL_FUNCPTR *_ogl_glGetQueryObjectiv)(GLuint id, GLenum pname, GLint * params);
#define glGetQueryObjectiv _ogl_glGetQueryObjectiv
extern void (OGL_FUNCPTR *_ogl_glGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint * params);
#define glGetQueryObjectuiv _ogl_glGetQueryObjectuiv
extern void (OGL_FUNCPTR *_ogl_glGetQueryiv)(GLenum target, GLenum pname, GLint * params);
#define glGetQueryiv _ogl_glGetQueryiv
extern GLboolean (OGL_FUNCPTR *_ogl_glIsBuffer)(GLuint buffer);
#define glIsBuffer _ogl_glIsBuffer
extern GLboolean (OGL_FUNCPTR *_ogl_glIsQuery)(GLuint id);
#define glIsQuery _ogl_glIsQuery
extern void * (OGL_FUNCPTR *_ogl_glMapBuffer)(GLenum target, GLenum access);
#define glMapBuffer _ogl_glMapBuffer
extern GLboolean (OGL_FUNCPTR *_ogl_glUnmapBuffer)(GLenum target);
#define glUnmapBuffer _ogl_glUnmapBuffer
extern void (OGL_FUNCPTR *_ogl_glAttachShader)(GLuint program, GLuint shader);
#define glAttachShader _ogl_glAttachShader
extern void (OGL_FUNCPTR *_ogl_glBindAttribLocation)(GLuint program, GLuint index, const GLchar * name);
#define glBindAttribLocation _ogl_glBindAttribLocation
extern void (OGL_FUNCPTR *_ogl_glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
#define glBlendEquationSeparate _ogl_glBlendEquationSeparate
extern void (OGL_FUNCPTR *_ogl_glCompileShader)(GLuint shader);
#define glCompileShader _ogl_glCompileShader
extern GLuint (OGL_FUNCPTR *_ogl_glCreateProgram)(void);
#define glCreateProgram _ogl_glCreateProgram
extern GLuint (OGL_FUNCPTR *_ogl_glCreateShader)(GLenum type);
#define glCreateShader _ogl_glCreateShader
extern void (OGL_FUNCPTR *_ogl_glDeleteProgram)(GLuint program);
#define glDeleteProgram _ogl_glDeleteProgram
extern void (OGL_FUNCPTR *_ogl_glDeleteShader)(GLuint shader);
#define glDeleteShader _ogl_glDeleteShader
extern void (OGL_FUNCPTR *_ogl_glDetachShader)(GLuint program, GLuint shader);
#define glDetachShader _ogl_glDetachShader
extern void (OGL_FUNCPTR *_ogl_glDisableVertexAttribArray)(GLuint index);
#define glDisableVertexAttribArray _ogl_glDisableVertexAttribArray
extern void (OGL_FUNCPTR *_ogl_glDrawBuffers)(GLsizei n, const GLenum * bufs);
#define glDrawBuffers _ogl_glDrawBuffers
extern void (OGL_FUNCPTR *_ogl_glEnableVertexAttribArray)(GLuint index);
#define glEnableVertexAttribArray _ogl_glEnableVertexAttribArray
extern void (OGL_FUNCPTR *_ogl_glGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
#define glGetActiveAttrib _ogl_glGetActiveAttrib
extern void (OGL_FUNCPTR *_ogl_glGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
#define glGetActiveUniform _ogl_glGetActiveUniform
extern void (OGL_FUNCPTR *_ogl_glGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
#define glGetAttachedShaders _ogl_glGetAttachedShaders
extern GLint (OGL_FUNCPTR *_ogl_glGetAttribLocation)(GLuint program, const GLchar * name);
#define glGetAttribLocation _ogl_glGetAttribLocation
extern void (OGL_FUNCPTR *_ogl_glGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
#define glGetProgramInfoLog _ogl_glGetProgramInfoLog
extern void (OGL_FUNCPTR *_ogl_glGetProgramiv)(GLuint program, GLenum pname, GLint * params);
#define glGetProgramiv _ogl_glGetProgramiv
extern void (OGL_FUNCPTR *_ogl_glGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
#define glGetShaderInfoLog _ogl_glGetShaderInfoLog
extern void (OGL_FUNCPTR *_ogl_glGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
#define glGetShaderSource _ogl_glGetShaderSource
extern void (OGL_FUNCPTR *_ogl_glGetShaderiv)(GLuint shader, GLenum pname, GLint * params);
#define glGetShaderiv _ogl_glGetShaderiv
extern GLint (OGL_FUNCPTR *_ogl_glGetUniformLocation)(GLuint program, const GLchar * name);
#define glGetUniformLocation _ogl_glGetUniformLocation
extern void (OGL_FUNCPTR *_ogl_glGetUniformfv)(GLuint program, GLint location, GLfloat * params);
#define glGetUniformfv _ogl_glGetUniformfv
extern void (OGL_FUNCPTR *_ogl_glGetUniformiv)(GLuint program, GLint location, GLint * params);
#define glGetUniformiv _ogl_glGetUniformiv
extern void (OGL_FUNCPTR *_ogl_glGetVertexAttribPointerv)(GLuint index, GLenum pname, void ** pointer);
#define glGetVertexAttribPointerv _ogl_glGetVertexAttribPointerv
extern void (OGL_FUNCPTR *_ogl_glGetVertexAttribdv)(GLuint index, GLenum pname, GLdouble * params);
#define glGetVertexAttribdv _ogl_glGetVertexAttribdv
extern void (OGL_FUNCPTR *_ogl_glGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat * params);
#define glGetVertexAttribfv _ogl_glGetVertexAttribfv
extern void (OGL_FUNCPTR *_ogl_glGetVertexAttribiv)(GLuint index, GLenum pname, GLint * params);
#define glGetVertexAttribiv _ogl_glGetVertexAttribiv
extern GLboolean (OGL_FUNCPTR *_ogl_glIsProgram)(GLuint program);
#define glIsProgram _ogl_glIsProgram
extern GLboolean (OGL_FUNCPTR *_ogl_glIsShader)(GLuint shader);
#define glIsShader _ogl_glIsShader
extern void (OGL_FUNCPTR *_ogl_glLinkProgram)(GLuint program);
#define glLinkProgram _ogl_glLinkProgram
extern void (OGL_FUNCPTR *_ogl_glShaderSource)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
#define glShaderSource _ogl_glShaderSource
extern void (OGL_FUNCPTR *_ogl_glStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
#define glStencilFuncSeparate _ogl_glStencilFuncSeparate
extern void (OGL_FUNCPTR *_ogl_glStencilMaskSeparate)(GLenum face, GLuint mask);
#define glStencilMaskSeparate _ogl_glStencilMaskSeparate
extern void (OGL_FUNCPTR *_ogl_glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
#define glStencilOpSeparate _ogl_glStencilOpSeparate
extern void (OGL_FUNCPTR *_ogl_glUniform1f)(GLint location, GLfloat v0);
#define glUniform1f _ogl_glUniform1f
extern void (OGL_FUNCPTR *_ogl_glUniform1fv)(GLint location, GLsizei count, const GLfloat * value);
#define glUniform1fv _ogl_glUniform1fv
extern void (OGL_FUNCPTR *_ogl_glUniform1i)(GLint location, GLint v0);
#define glUniform1i _ogl_glUniform1i
extern void (OGL_FUNCPTR *_ogl_glUniform1iv)(GLint location, GLsizei count, const GLint * value);
#define glUniform1iv _ogl_glUniform1iv
extern void (OGL_FUNCPTR *_ogl_glUniform2f)(GLint location, GLfloat v0, GLfloat v1);
#define glUniform2f _ogl_glUniform2f
extern void (OGL_FUNCPTR *_ogl_glUniform2fv)(GLint location, GLsizei count, const GLfloat * value);
#define glUniform2fv _ogl_glUniform2fv
extern void (OGL_FUNCPTR *_ogl_glUniform2i)(GLint location, GLint v0, GLint v1);
#define glUniform2i _ogl_glUniform2i
extern void (OGL_FUNCPTR *_ogl_glUniform2iv)(GLint location, GLsizei count, const GLint * value);
#define glUniform2iv _ogl_glUniform2iv
extern void (OGL_FUNCPTR *_ogl_glUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
#define glUniform3f _ogl_glUniform3f
extern void (OGL_FUNCPTR *_ogl_glUniform3fv)(GLint location, GLsizei count, const GLfloat * value);
#define glUniform3fv _ogl_glUniform3fv
extern void (OGL_FUNCPTR *_ogl_glUniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
#define glUniform3i _ogl_glUniform3i
extern void (OGL_FUNCPTR *_ogl_glUniform3iv)(GLint location, GLsizei count, const GLint * value);
#define glUniform3iv _ogl_glUniform3iv
extern void (OGL_FUNCPTR *_ogl_glUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
#define glUniform4f _ogl_glUniform4f
extern void (OGL_FUNCPTR *_ogl_glUniform4fv)(GLint location, GLsizei count, const GLfloat * value);
#define glUniform4fv _ogl_glUniform4fv
extern void (OGL_FUNCPTR *_ogl_glUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
#define glUniform4i _ogl_glUniform4i
extern void (OGL_FUNCPTR *_ogl_glUniform4iv)(GLint location, GLsizei count, const GLint * value);
#define glUniform4iv _ogl_glUniform4iv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glUniformMatrix2fv _ogl_glUniformMatrix2fv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glUniformMatrix3fv _ogl_glUniformMatrix3fv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glUniformMatrix4fv _ogl_glUniformMatrix4fv
extern void (OGL_FUNCPTR *_ogl_glUseProgram)(GLuint program);
#define glUseProgram _ogl_glUseProgram
extern void (OGL_FUNCPTR *_ogl_glValidateProgram)(GLuint program);
#define glValidateProgram _ogl_glValidateProgram
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib1d)(GLuint index, GLdouble x);
#define glVertexAttrib1d _ogl_glVertexAttrib1d
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib1dv)(GLuint index, const GLdouble * v);
#define glVertexAttrib1dv _ogl_glVertexAttrib1dv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib1f)(GLuint index, GLfloat x);
#define glVertexAttrib1f _ogl_glVertexAttrib1f
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib1fv)(GLuint index, const GLfloat * v);
#define glVertexAttrib1fv _ogl_glVertexAttrib1fv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib1s)(GLuint index, GLshort x);
#define glVertexAttrib1s _ogl_glVertexAttrib1s
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib1sv)(GLuint index, const GLshort * v);
#define glVertexAttrib1sv _ogl_glVertexAttrib1sv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib2d)(GLuint index, GLdouble x, GLdouble y);
#define glVertexAttrib2d _ogl_glVertexAttrib2d
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib2dv)(GLuint index, const GLdouble * v);
#define glVertexAttrib2dv _ogl_glVertexAttrib2dv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
#define glVertexAttrib2f _ogl_glVertexAttrib2f
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib2fv)(GLuint index, const GLfloat * v);
#define glVertexAttrib2fv _ogl_glVertexAttrib2fv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib2s)(GLuint index, GLshort x, GLshort y);
#define glVertexAttrib2s _ogl_glVertexAttrib2s
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib2sv)(GLuint index, const GLshort * v);
#define glVertexAttrib2sv _ogl_glVertexAttrib2sv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
#define glVertexAttrib3d _ogl_glVertexAttrib3d
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib3dv)(GLuint index, const GLdouble * v);
#define glVertexAttrib3dv _ogl_glVertexAttrib3dv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
#define glVertexAttrib3f _ogl_glVertexAttrib3f
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib3fv)(GLuint index, const GLfloat * v);
#define glVertexAttrib3fv _ogl_glVertexAttrib3fv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z);
#define glVertexAttrib3s _ogl_glVertexAttrib3s
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib3sv)(GLuint index, const GLshort * v);
#define glVertexAttrib3sv _ogl_glVertexAttrib3sv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nbv)(GLuint index, const GLbyte * v);
#define glVertexAttrib4Nbv _ogl_glVertexAttrib4Nbv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4Niv)(GLuint index, const GLint * v);
#define glVertexAttrib4Niv _ogl_glVertexAttrib4Niv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nsv)(GLuint index, const GLshort * v);
#define glVertexAttrib4Nsv _ogl_glVertexAttrib4Nsv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
#define glVertexAttrib4Nub _ogl_glVertexAttrib4Nub
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nubv)(GLuint index, const GLubyte * v);
#define glVertexAttrib4Nubv _ogl_glVertexAttrib4Nubv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nuiv)(GLuint index, const GLuint * v);
#define glVertexAttrib4Nuiv _ogl_glVertexAttrib4Nuiv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nusv)(GLuint index, const GLushort * v);
#define glVertexAttrib4Nusv _ogl_glVertexAttrib4Nusv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4bv)(GLuint index, const GLbyte * v);
#define glVertexAttrib4bv _ogl_glVertexAttrib4bv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#define glVertexAttrib4d _ogl_glVertexAttrib4d
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4dv)(GLuint index, const GLdouble * v);
#define glVertexAttrib4dv _ogl_glVertexAttrib4dv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
#define glVertexAttrib4f _ogl_glVertexAttrib4f
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4fv)(GLuint index, const GLfloat * v);
#define glVertexAttrib4fv _ogl_glVertexAttrib4fv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4iv)(GLuint index, const GLint * v);
#define glVertexAttrib4iv _ogl_glVertexAttrib4iv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
#define glVertexAttrib4s _ogl_glVertexAttrib4s
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4sv)(GLuint index, const GLshort * v);
#define glVertexAttrib4sv _ogl_glVertexAttrib4sv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4ubv)(GLuint index, const GLubyte * v);
#define glVertexAttrib4ubv _ogl_glVertexAttrib4ubv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4uiv)(GLuint index, const GLuint * v);
#define glVertexAttrib4uiv _ogl_glVertexAttrib4uiv
extern void (OGL_FUNCPTR *_ogl_glVertexAttrib4usv)(GLuint index, const GLushort * v);
#define glVertexAttrib4usv _ogl_glVertexAttrib4usv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
#define glVertexAttribPointer _ogl_glVertexAttribPointer
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glUniformMatrix2x3fv _ogl_glUniformMatrix2x3fv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glUniformMatrix2x4fv _ogl_glUniformMatrix2x4fv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glUniformMatrix3x2fv _ogl_glUniformMatrix3x2fv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glUniformMatrix3x4fv _ogl_glUniformMatrix3x4fv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glUniformMatrix4x2fv _ogl_glUniformMatrix4x2fv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glUniformMatrix4x3fv _ogl_glUniformMatrix4x3fv
extern void (OGL_FUNCPTR *_ogl_glBeginConditionalRender)(GLuint id, GLenum mode);
#define glBeginConditionalRender _ogl_glBeginConditionalRender
extern void (OGL_FUNCPTR *_ogl_glBeginTransformFeedback)(GLenum primitiveMode);
#define glBeginTransformFeedback _ogl_glBeginTransformFeedback
extern void (OGL_FUNCPTR *_ogl_glBindBufferBase)(GLenum target, GLuint index, GLuint buffer);
#define glBindBufferBase _ogl_glBindBufferBase
extern void (OGL_FUNCPTR *_ogl_glBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
#define glBindBufferRange _ogl_glBindBufferRange
extern void (OGL_FUNCPTR *_ogl_glBindFragDataLocation)(GLuint program, GLuint color, const GLchar * name);
#define glBindFragDataLocation _ogl_glBindFragDataLocation
extern void (OGL_FUNCPTR *_ogl_glBindFramebuffer)(GLenum target, GLuint framebuffer);
#define glBindFramebuffer _ogl_glBindFramebuffer
extern void (OGL_FUNCPTR *_ogl_glBindRenderbuffer)(GLenum target, GLuint renderbuffer);
#define glBindRenderbuffer _ogl_glBindRenderbuffer
extern void (OGL_FUNCPTR *_ogl_glBindVertexArray)(GLuint ren_array);
#define glBindVertexArray _ogl_glBindVertexArray
extern void (OGL_FUNCPTR *_ogl_glBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#define glBlitFramebuffer _ogl_glBlitFramebuffer
extern GLenum (OGL_FUNCPTR *_ogl_glCheckFramebufferStatus)(GLenum target);
#define glCheckFramebufferStatus _ogl_glCheckFramebufferStatus
extern void (OGL_FUNCPTR *_ogl_glClampColor)(GLenum target, GLenum clamp);
#define glClampColor _ogl_glClampColor
extern void (OGL_FUNCPTR *_ogl_glClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
#define glClearBufferfi _ogl_glClearBufferfi
extern void (OGL_FUNCPTR *_ogl_glClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
#define glClearBufferfv _ogl_glClearBufferfv
extern void (OGL_FUNCPTR *_ogl_glClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint * value);
#define glClearBufferiv _ogl_glClearBufferiv
extern void (OGL_FUNCPTR *_ogl_glClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint * value);
#define glClearBufferuiv _ogl_glClearBufferuiv
extern void (OGL_FUNCPTR *_ogl_glColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
#define glColorMaski _ogl_glColorMaski
extern void (OGL_FUNCPTR *_ogl_glDeleteFramebuffers)(GLsizei n, const GLuint * framebuffers);
#define glDeleteFramebuffers _ogl_glDeleteFramebuffers
extern void (OGL_FUNCPTR *_ogl_glDeleteRenderbuffers)(GLsizei n, const GLuint * renderbuffers);
#define glDeleteRenderbuffers _ogl_glDeleteRenderbuffers
extern void (OGL_FUNCPTR *_ogl_glDeleteVertexArrays)(GLsizei n, const GLuint * arrays);
#define glDeleteVertexArrays _ogl_glDeleteVertexArrays
extern void (OGL_FUNCPTR *_ogl_glDisablei)(GLenum target, GLuint index);
#define glDisablei _ogl_glDisablei
extern void (OGL_FUNCPTR *_ogl_glEnablei)(GLenum target, GLuint index);
#define glEnablei _ogl_glEnablei
extern void (OGL_FUNCPTR *_ogl_glEndConditionalRender)(void);
#define glEndConditionalRender _ogl_glEndConditionalRender
extern void (OGL_FUNCPTR *_ogl_glEndTransformFeedback)(void);
#define glEndTransformFeedback _ogl_glEndTransformFeedback
extern void (OGL_FUNCPTR *_ogl_glFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length);
#define glFlushMappedBufferRange _ogl_glFlushMappedBufferRange
extern void (OGL_FUNCPTR *_ogl_glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
#define glFramebufferRenderbuffer _ogl_glFramebufferRenderbuffer
extern void (OGL_FUNCPTR *_ogl_glFramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
#define glFramebufferTexture1D _ogl_glFramebufferTexture1D
extern void (OGL_FUNCPTR *_ogl_glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
#define glFramebufferTexture2D _ogl_glFramebufferTexture2D
extern void (OGL_FUNCPTR *_ogl_glFramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
#define glFramebufferTexture3D _ogl_glFramebufferTexture3D
extern void (OGL_FUNCPTR *_ogl_glFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
#define glFramebufferTextureLayer _ogl_glFramebufferTextureLayer
extern void (OGL_FUNCPTR *_ogl_glGenFramebuffers)(GLsizei n, GLuint * framebuffers);
#define glGenFramebuffers _ogl_glGenFramebuffers
extern void (OGL_FUNCPTR *_ogl_glGenRenderbuffers)(GLsizei n, GLuint * renderbuffers);
#define glGenRenderbuffers _ogl_glGenRenderbuffers
extern void (OGL_FUNCPTR *_ogl_glGenVertexArrays)(GLsizei n, GLuint * arrays);
#define glGenVertexArrays _ogl_glGenVertexArrays
extern void (OGL_FUNCPTR *_ogl_glGenerateMipmap)(GLenum target);
#define glGenerateMipmap _ogl_glGenerateMipmap
extern void (OGL_FUNCPTR *_ogl_glGetBooleani_v)(GLenum target, GLuint index, GLboolean * data);
#define glGetBooleani_v _ogl_glGetBooleani_v
extern GLint (OGL_FUNCPTR *_ogl_glGetFragDataLocation)(GLuint program, const GLchar * name);
#define glGetFragDataLocation _ogl_glGetFragDataLocation
extern void (OGL_FUNCPTR *_ogl_glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
#define glGetFramebufferAttachmentParameteriv _ogl_glGetFramebufferAttachmentParameteriv
extern void (OGL_FUNCPTR *_ogl_glGetIntegeri_v)(GLenum target, GLuint index, GLint * data);
#define glGetIntegeri_v _ogl_glGetIntegeri_v
extern void (OGL_FUNCPTR *_ogl_glGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint * params);
#define glGetRenderbufferParameteriv _ogl_glGetRenderbufferParameteriv
extern const GLubyte * (OGL_FUNCPTR *_ogl_glGetStringi)(GLenum name, GLuint index);
#define glGetStringi _ogl_glGetStringi
extern void (OGL_FUNCPTR *_ogl_glGetTexParameterIiv)(GLenum target, GLenum pname, GLint * params);
#define glGetTexParameterIiv _ogl_glGetTexParameterIiv
extern void (OGL_FUNCPTR *_ogl_glGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint * params);
#define glGetTexParameterIuiv _ogl_glGetTexParameterIuiv
extern void (OGL_FUNCPTR *_ogl_glGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
#define glGetTransformFeedbackVarying _ogl_glGetTransformFeedbackVarying
extern void (OGL_FUNCPTR *_ogl_glGetUniformuiv)(GLuint program, GLint location, GLuint * params);
#define glGetUniformuiv _ogl_glGetUniformuiv
extern void (OGL_FUNCPTR *_ogl_glGetVertexAttribIiv)(GLuint index, GLenum pname, GLint * params);
#define glGetVertexAttribIiv _ogl_glGetVertexAttribIiv
extern void (OGL_FUNCPTR *_ogl_glGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint * params);
#define glGetVertexAttribIuiv _ogl_glGetVertexAttribIuiv
extern GLboolean (OGL_FUNCPTR *_ogl_glIsEnabledi)(GLenum target, GLuint index);
#define glIsEnabledi _ogl_glIsEnabledi
extern GLboolean (OGL_FUNCPTR *_ogl_glIsFramebuffer)(GLuint framebuffer);
#define glIsFramebuffer _ogl_glIsFramebuffer
extern GLboolean (OGL_FUNCPTR *_ogl_glIsRenderbuffer)(GLuint renderbuffer);
#define glIsRenderbuffer _ogl_glIsRenderbuffer
extern GLboolean (OGL_FUNCPTR *_ogl_glIsVertexArray)(GLuint ren_array);
#define glIsVertexArray _ogl_glIsVertexArray
extern void * (OGL_FUNCPTR *_ogl_glMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
#define glMapBufferRange _ogl_glMapBufferRange
extern void (OGL_FUNCPTR *_ogl_glRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
#define glRenderbufferStorage _ogl_glRenderbufferStorage
extern void (OGL_FUNCPTR *_ogl_glRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
#define glRenderbufferStorageMultisample _ogl_glRenderbufferStorageMultisample
extern void (OGL_FUNCPTR *_ogl_glTexParameterIiv)(GLenum target, GLenum pname, const GLint * params);
#define glTexParameterIiv _ogl_glTexParameterIiv
extern void (OGL_FUNCPTR *_ogl_glTexParameterIuiv)(GLenum target, GLenum pname, const GLuint * params);
#define glTexParameterIuiv _ogl_glTexParameterIuiv
extern void (OGL_FUNCPTR *_ogl_glTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
#define glTransformFeedbackVaryings _ogl_glTransformFeedbackVaryings
extern void (OGL_FUNCPTR *_ogl_glUniform1ui)(GLint location, GLuint v0);
#define glUniform1ui _ogl_glUniform1ui
extern void (OGL_FUNCPTR *_ogl_glUniform1uiv)(GLint location, GLsizei count, const GLuint * value);
#define glUniform1uiv _ogl_glUniform1uiv
extern void (OGL_FUNCPTR *_ogl_glUniform2ui)(GLint location, GLuint v0, GLuint v1);
#define glUniform2ui _ogl_glUniform2ui
extern void (OGL_FUNCPTR *_ogl_glUniform2uiv)(GLint location, GLsizei count, const GLuint * value);
#define glUniform2uiv _ogl_glUniform2uiv
extern void (OGL_FUNCPTR *_ogl_glUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2);
#define glUniform3ui _ogl_glUniform3ui
extern void (OGL_FUNCPTR *_ogl_glUniform3uiv)(GLint location, GLsizei count, const GLuint * value);
#define glUniform3uiv _ogl_glUniform3uiv
extern void (OGL_FUNCPTR *_ogl_glUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
#define glUniform4ui _ogl_glUniform4ui
extern void (OGL_FUNCPTR *_ogl_glUniform4uiv)(GLint location, GLsizei count, const GLuint * value);
#define glUniform4uiv _ogl_glUniform4uiv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI1i)(GLuint index, GLint x);
#define glVertexAttribI1i _ogl_glVertexAttribI1i
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI1iv)(GLuint index, const GLint * v);
#define glVertexAttribI1iv _ogl_glVertexAttribI1iv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI1ui)(GLuint index, GLuint x);
#define glVertexAttribI1ui _ogl_glVertexAttribI1ui
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI1uiv)(GLuint index, const GLuint * v);
#define glVertexAttribI1uiv _ogl_glVertexAttribI1uiv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI2i)(GLuint index, GLint x, GLint y);
#define glVertexAttribI2i _ogl_glVertexAttribI2i
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI2iv)(GLuint index, const GLint * v);
#define glVertexAttribI2iv _ogl_glVertexAttribI2iv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI2ui)(GLuint index, GLuint x, GLuint y);
#define glVertexAttribI2ui _ogl_glVertexAttribI2ui
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI2uiv)(GLuint index, const GLuint * v);
#define glVertexAttribI2uiv _ogl_glVertexAttribI2uiv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z);
#define glVertexAttribI3i _ogl_glVertexAttribI3i
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI3iv)(GLuint index, const GLint * v);
#define glVertexAttribI3iv _ogl_glVertexAttribI3iv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z);
#define glVertexAttribI3ui _ogl_glVertexAttribI3ui
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI3uiv)(GLuint index, const GLuint * v);
#define glVertexAttribI3uiv _ogl_glVertexAttribI3uiv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI4bv)(GLuint index, const GLbyte * v);
#define glVertexAttribI4bv _ogl_glVertexAttribI4bv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w);
#define glVertexAttribI4i _ogl_glVertexAttribI4i
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI4iv)(GLuint index, const GLint * v);
#define glVertexAttribI4iv _ogl_glVertexAttribI4iv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI4sv)(GLuint index, const GLshort * v);
#define glVertexAttribI4sv _ogl_glVertexAttribI4sv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI4ubv)(GLuint index, const GLubyte * v);
#define glVertexAttribI4ubv _ogl_glVertexAttribI4ubv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
#define glVertexAttribI4ui _ogl_glVertexAttribI4ui
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI4uiv)(GLuint index, const GLuint * v);
#define glVertexAttribI4uiv _ogl_glVertexAttribI4uiv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribI4usv)(GLuint index, const GLushort * v);
#define glVertexAttribI4usv _ogl_glVertexAttribI4usv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
#define glVertexAttribIPointer _ogl_glVertexAttribIPointer
extern void (OGL_FUNCPTR *_ogl_glCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
#define glCopyBufferSubData _ogl_glCopyBufferSubData
extern void (OGL_FUNCPTR *_ogl_glDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
#define glDrawArraysInstanced _ogl_glDrawArraysInstanced
extern void (OGL_FUNCPTR *_ogl_glDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
#define glDrawElementsInstanced _ogl_glDrawElementsInstanced
extern void (OGL_FUNCPTR *_ogl_glGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
#define glGetActiveUniformBlockName _ogl_glGetActiveUniformBlockName
extern void (OGL_FUNCPTR *_ogl_glGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
#define glGetActiveUniformBlockiv _ogl_glGetActiveUniformBlockiv
extern void (OGL_FUNCPTR *_ogl_glGetActiveUniformName)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
#define glGetActiveUniformName _ogl_glGetActiveUniformName
extern void (OGL_FUNCPTR *_ogl_glGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
#define glGetActiveUniformsiv _ogl_glGetActiveUniformsiv
extern GLuint (OGL_FUNCPTR *_ogl_glGetUniformBlockIndex)(GLuint program, const GLchar * uniformBlockName);
#define glGetUniformBlockIndex _ogl_glGetUniformBlockIndex
extern void (OGL_FUNCPTR *_ogl_glGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
#define glGetUniformIndices _ogl_glGetUniformIndices
extern void (OGL_FUNCPTR *_ogl_glPrimitiveRestartIndex)(GLuint index);
#define glPrimitiveRestartIndex _ogl_glPrimitiveRestartIndex
extern void (OGL_FUNCPTR *_ogl_glTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer);
#define glTexBuffer _ogl_glTexBuffer
extern void (OGL_FUNCPTR *_ogl_glUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
#define glUniformBlockBinding _ogl_glUniformBlockBinding
extern GLenum (OGL_FUNCPTR *_ogl_glClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
#define glClientWaitSync _ogl_glClientWaitSync
extern void (OGL_FUNCPTR *_ogl_glDeleteSync)(GLsync sync);
#define glDeleteSync _ogl_glDeleteSync
extern void (OGL_FUNCPTR *_ogl_glDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
#define glDrawElementsBaseVertex _ogl_glDrawElementsBaseVertex
extern void (OGL_FUNCPTR *_ogl_glDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
#define glDrawElementsInstancedBaseVertex _ogl_glDrawElementsInstancedBaseVertex
extern void (OGL_FUNCPTR *_ogl_glDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
#define glDrawRangeElementsBaseVertex _ogl_glDrawRangeElementsBaseVertex
extern GLsync (OGL_FUNCPTR *_ogl_glFenceSync)(GLenum condition, GLbitfield flags);
#define glFenceSync _ogl_glFenceSync
extern void (OGL_FUNCPTR *_ogl_glFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level);
#define glFramebufferTexture _ogl_glFramebufferTexture
extern void (OGL_FUNCPTR *_ogl_glGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 * params);
#define glGetBufferParameteri64v _ogl_glGetBufferParameteri64v
extern void (OGL_FUNCPTR *_ogl_glGetInteger64i_v)(GLenum target, GLuint index, GLint64 * data);
#define glGetInteger64i_v _ogl_glGetInteger64i_v
extern void (OGL_FUNCPTR *_ogl_glGetInteger64v)(GLenum pname, GLint64 * data);
#define glGetInteger64v _ogl_glGetInteger64v
extern void (OGL_FUNCPTR *_ogl_glGetMultisamplefv)(GLenum pname, GLuint index, GLfloat * val);
#define glGetMultisamplefv _ogl_glGetMultisamplefv
extern void (OGL_FUNCPTR *_ogl_glGetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values);
#define glGetSynciv _ogl_glGetSynciv
extern GLboolean (OGL_FUNCPTR *_ogl_glIsSync)(GLsync sync);
#define glIsSync _ogl_glIsSync
extern void (OGL_FUNCPTR *_ogl_glMultiDrawElementsBaseVertex)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
#define glMultiDrawElementsBaseVertex _ogl_glMultiDrawElementsBaseVertex
extern void (OGL_FUNCPTR *_ogl_glProvokingVertex)(GLenum mode);
#define glProvokingVertex _ogl_glProvokingVertex
extern void (OGL_FUNCPTR *_ogl_glSampleMaski)(GLuint maskNumber, GLbitfield mask);
#define glSampleMaski _ogl_glSampleMaski
extern void (OGL_FUNCPTR *_ogl_glTexImage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
#define glTexImage2DMultisample _ogl_glTexImage2DMultisample
extern void (OGL_FUNCPTR *_ogl_glTexImage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
#define glTexImage3DMultisample _ogl_glTexImage3DMultisample
extern void (OGL_FUNCPTR *_ogl_glWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
#define glWaitSync _ogl_glWaitSync
extern void (OGL_FUNCPTR *_ogl_glBindFragDataLocationIndexed)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
#define glBindFragDataLocationIndexed _ogl_glBindFragDataLocationIndexed
extern void (OGL_FUNCPTR *_ogl_glBindSampler)(GLuint unit, GLuint sampler);
#define glBindSampler _ogl_glBindSampler
extern void (OGL_FUNCPTR *_ogl_glDeleteSamplers)(GLsizei count, const GLuint * samplers);
#define glDeleteSamplers _ogl_glDeleteSamplers
extern void (OGL_FUNCPTR *_ogl_glGenSamplers)(GLsizei count, GLuint * samplers);
#define glGenSamplers _ogl_glGenSamplers
extern GLint (OGL_FUNCPTR *_ogl_glGetFragDataIndex)(GLuint program, const GLchar * name);
#define glGetFragDataIndex _ogl_glGetFragDataIndex
extern void (OGL_FUNCPTR *_ogl_glGetQueryObjecti64v)(GLuint id, GLenum pname, GLint64 * params);
#define glGetQueryObjecti64v _ogl_glGetQueryObjecti64v
extern void (OGL_FUNCPTR *_ogl_glGetQueryObjectui64v)(GLuint id, GLenum pname, GLuint64 * params);
#define glGetQueryObjectui64v _ogl_glGetQueryObjectui64v
extern void (OGL_FUNCPTR *_ogl_glGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint * params);
#define glGetSamplerParameterIiv _ogl_glGetSamplerParameterIiv
extern void (OGL_FUNCPTR *_ogl_glGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint * params);
#define glGetSamplerParameterIuiv _ogl_glGetSamplerParameterIuiv
extern void (OGL_FUNCPTR *_ogl_glGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat * params);
#define glGetSamplerParameterfv _ogl_glGetSamplerParameterfv
extern void (OGL_FUNCPTR *_ogl_glGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint * params);
#define glGetSamplerParameteriv _ogl_glGetSamplerParameteriv
extern GLboolean (OGL_FUNCPTR *_ogl_glIsSampler)(GLuint sampler);
#define glIsSampler _ogl_glIsSampler
extern void (OGL_FUNCPTR *_ogl_glQueryCounter)(GLuint id, GLenum target);
#define glQueryCounter _ogl_glQueryCounter
extern void (OGL_FUNCPTR *_ogl_glSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint * param);
#define glSamplerParameterIiv _ogl_glSamplerParameterIiv
extern void (OGL_FUNCPTR *_ogl_glSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint * param);
#define glSamplerParameterIuiv _ogl_glSamplerParameterIuiv
extern void (OGL_FUNCPTR *_ogl_glSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param);
#define glSamplerParameterf _ogl_glSamplerParameterf
extern void (OGL_FUNCPTR *_ogl_glSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat * param);
#define glSamplerParameterfv _ogl_glSamplerParameterfv
extern void (OGL_FUNCPTR *_ogl_glSamplerParameteri)(GLuint sampler, GLenum pname, GLint param);
#define glSamplerParameteri _ogl_glSamplerParameteri
extern void (OGL_FUNCPTR *_ogl_glSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint * param);
#define glSamplerParameteriv _ogl_glSamplerParameteriv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribDivisor)(GLuint index, GLuint divisor);
#define glVertexAttribDivisor _ogl_glVertexAttribDivisor
extern void (OGL_FUNCPTR *_ogl_glVertexAttribP1ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
#define glVertexAttribP1ui _ogl_glVertexAttribP1ui
extern void (OGL_FUNCPTR *_ogl_glVertexAttribP1uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
#define glVertexAttribP1uiv _ogl_glVertexAttribP1uiv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribP2ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
#define glVertexAttribP2ui _ogl_glVertexAttribP2ui
extern void (OGL_FUNCPTR *_ogl_glVertexAttribP2uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
#define glVertexAttribP2uiv _ogl_glVertexAttribP2uiv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribP3ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
#define glVertexAttribP3ui _ogl_glVertexAttribP3ui
extern void (OGL_FUNCPTR *_ogl_glVertexAttribP3uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
#define glVertexAttribP3uiv _ogl_glVertexAttribP3uiv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribP4ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
#define glVertexAttribP4ui _ogl_glVertexAttribP4ui
extern void (OGL_FUNCPTR *_ogl_glVertexAttribP4uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
#define glVertexAttribP4uiv _ogl_glVertexAttribP4uiv
extern void (OGL_FUNCPTR *_ogl_glBeginQueryIndexed)(GLenum target, GLuint index, GLuint id);
#define glBeginQueryIndexed _ogl_glBeginQueryIndexed
extern void (OGL_FUNCPTR *_ogl_glBindTransformFeedback)(GLenum target, GLuint id);
#define glBindTransformFeedback _ogl_glBindTransformFeedback
extern void (OGL_FUNCPTR *_ogl_glBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
#define glBlendEquationSeparatei _ogl_glBlendEquationSeparatei
extern void (OGL_FUNCPTR *_ogl_glBlendEquationi)(GLuint buf, GLenum mode);
#define glBlendEquationi _ogl_glBlendEquationi
extern void (OGL_FUNCPTR *_ogl_glBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
#define glBlendFuncSeparatei _ogl_glBlendFuncSeparatei
extern void (OGL_FUNCPTR *_ogl_glBlendFunci)(GLuint buf, GLenum src, GLenum dst);
#define glBlendFunci _ogl_glBlendFunci
extern void (OGL_FUNCPTR *_ogl_glDeleteTransformFeedbacks)(GLsizei n, const GLuint * ids);
#define glDeleteTransformFeedbacks _ogl_glDeleteTransformFeedbacks
extern void (OGL_FUNCPTR *_ogl_glDrawArraysIndirect)(GLenum mode, const void * indirect);
#define glDrawArraysIndirect _ogl_glDrawArraysIndirect
extern void (OGL_FUNCPTR *_ogl_glDrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect);
#define glDrawElementsIndirect _ogl_glDrawElementsIndirect
extern void (OGL_FUNCPTR *_ogl_glDrawTransformFeedback)(GLenum mode, GLuint id);
#define glDrawTransformFeedback _ogl_glDrawTransformFeedback
extern void (OGL_FUNCPTR *_ogl_glDrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream);
#define glDrawTransformFeedbackStream _ogl_glDrawTransformFeedbackStream
extern void (OGL_FUNCPTR *_ogl_glEndQueryIndexed)(GLenum target, GLuint index);
#define glEndQueryIndexed _ogl_glEndQueryIndexed
extern void (OGL_FUNCPTR *_ogl_glGenTransformFeedbacks)(GLsizei n, GLuint * ids);
#define glGenTransformFeedbacks _ogl_glGenTransformFeedbacks
extern void (OGL_FUNCPTR *_ogl_glGetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
#define glGetActiveSubroutineName _ogl_glGetActiveSubroutineName
extern void (OGL_FUNCPTR *_ogl_glGetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
#define glGetActiveSubroutineUniformName _ogl_glGetActiveSubroutineUniformName
extern void (OGL_FUNCPTR *_ogl_glGetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
#define glGetActiveSubroutineUniformiv _ogl_glGetActiveSubroutineUniformiv
extern void (OGL_FUNCPTR *_ogl_glGetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
#define glGetProgramStageiv _ogl_glGetProgramStageiv
extern void (OGL_FUNCPTR *_ogl_glGetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint * params);
#define glGetQueryIndexediv _ogl_glGetQueryIndexediv
extern GLuint (OGL_FUNCPTR *_ogl_glGetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar * name);
#define glGetSubroutineIndex _ogl_glGetSubroutineIndex
extern GLint (OGL_FUNCPTR *_ogl_glGetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar * name);
#define glGetSubroutineUniformLocation _ogl_glGetSubroutineUniformLocation
extern void (OGL_FUNCPTR *_ogl_glGetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint * params);
#define glGetUniformSubroutineuiv _ogl_glGetUniformSubroutineuiv
extern void (OGL_FUNCPTR *_ogl_glGetUniformdv)(GLuint program, GLint location, GLdouble * params);
#define glGetUniformdv _ogl_glGetUniformdv
extern GLboolean (OGL_FUNCPTR *_ogl_glIsTransformFeedback)(GLuint id);
#define glIsTransformFeedback _ogl_glIsTransformFeedback
extern void (OGL_FUNCPTR *_ogl_glMinSampleShading)(GLfloat value);
#define glMinSampleShading _ogl_glMinSampleShading
extern void (OGL_FUNCPTR *_ogl_glPatchParameterfv)(GLenum pname, const GLfloat * values);
#define glPatchParameterfv _ogl_glPatchParameterfv
extern void (OGL_FUNCPTR *_ogl_glPatchParameteri)(GLenum pname, GLint value);
#define glPatchParameteri _ogl_glPatchParameteri
extern void (OGL_FUNCPTR *_ogl_glPauseTransformFeedback)(void);
#define glPauseTransformFeedback _ogl_glPauseTransformFeedback
extern void (OGL_FUNCPTR *_ogl_glResumeTransformFeedback)(void);
#define glResumeTransformFeedback _ogl_glResumeTransformFeedback
extern void (OGL_FUNCPTR *_ogl_glUniform1d)(GLint location, GLdouble x);
#define glUniform1d _ogl_glUniform1d
extern void (OGL_FUNCPTR *_ogl_glUniform1dv)(GLint location, GLsizei count, const GLdouble * value);
#define glUniform1dv _ogl_glUniform1dv
extern void (OGL_FUNCPTR *_ogl_glUniform2d)(GLint location, GLdouble x, GLdouble y);
#define glUniform2d _ogl_glUniform2d
extern void (OGL_FUNCPTR *_ogl_glUniform2dv)(GLint location, GLsizei count, const GLdouble * value);
#define glUniform2dv _ogl_glUniform2dv
extern void (OGL_FUNCPTR *_ogl_glUniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z);
#define glUniform3d _ogl_glUniform3d
extern void (OGL_FUNCPTR *_ogl_glUniform3dv)(GLint location, GLsizei count, const GLdouble * value);
#define glUniform3dv _ogl_glUniform3dv
extern void (OGL_FUNCPTR *_ogl_glUniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#define glUniform4d _ogl_glUniform4d
extern void (OGL_FUNCPTR *_ogl_glUniform4dv)(GLint location, GLsizei count, const GLdouble * value);
#define glUniform4dv _ogl_glUniform4dv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glUniformMatrix2dv _ogl_glUniformMatrix2dv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glUniformMatrix2x3dv _ogl_glUniformMatrix2x3dv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glUniformMatrix2x4dv _ogl_glUniformMatrix2x4dv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glUniformMatrix3dv _ogl_glUniformMatrix3dv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glUniformMatrix3x2dv _ogl_glUniformMatrix3x2dv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glUniformMatrix3x4dv _ogl_glUniformMatrix3x4dv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glUniformMatrix4dv _ogl_glUniformMatrix4dv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glUniformMatrix4x2dv _ogl_glUniformMatrix4x2dv
extern void (OGL_FUNCPTR *_ogl_glUniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glUniformMatrix4x3dv _ogl_glUniformMatrix4x3dv
extern void (OGL_FUNCPTR *_ogl_glUniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint * indices);
#define glUniformSubroutinesuiv _ogl_glUniformSubroutinesuiv
extern void (OGL_FUNCPTR *_ogl_glActiveShaderProgram)(GLuint pipeline, GLuint program);
#define glActiveShaderProgram _ogl_glActiveShaderProgram
extern void (OGL_FUNCPTR *_ogl_glBindProgramPipeline)(GLuint pipeline);
#define glBindProgramPipeline _ogl_glBindProgramPipeline
extern void (OGL_FUNCPTR *_ogl_glClearDepthf)(GLfloat d);
#define glClearDepthf _ogl_glClearDepthf
extern GLuint (OGL_FUNCPTR *_ogl_glCreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const* strings);
#define glCreateShaderProgramv _ogl_glCreateShaderProgramv
extern void (OGL_FUNCPTR *_ogl_glDeleteProgramPipelines)(GLsizei n, const GLuint * pipelines);
#define glDeleteProgramPipelines _ogl_glDeleteProgramPipelines
extern void (OGL_FUNCPTR *_ogl_glDepthRangeArrayv)(GLuint first, GLsizei count, const GLdouble * v);
#define glDepthRangeArrayv _ogl_glDepthRangeArrayv
extern void (OGL_FUNCPTR *_ogl_glDepthRangeIndexed)(GLuint index, GLdouble n, GLdouble f);
#define glDepthRangeIndexed _ogl_glDepthRangeIndexed
extern void (OGL_FUNCPTR *_ogl_glDepthRangef)(GLfloat n, GLfloat f);
#define glDepthRangef _ogl_glDepthRangef
extern void (OGL_FUNCPTR *_ogl_glGenProgramPipelines)(GLsizei n, GLuint * pipelines);
#define glGenProgramPipelines _ogl_glGenProgramPipelines
extern void (OGL_FUNCPTR *_ogl_glGetDoublei_v)(GLenum target, GLuint index, GLdouble * data);
#define glGetDoublei_v _ogl_glGetDoublei_v
extern void (OGL_FUNCPTR *_ogl_glGetFloati_v)(GLenum target, GLuint index, GLfloat * data);
#define glGetFloati_v _ogl_glGetFloati_v
extern void (OGL_FUNCPTR *_ogl_glGetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
#define glGetProgramBinary _ogl_glGetProgramBinary
extern void (OGL_FUNCPTR *_ogl_glGetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
#define glGetProgramPipelineInfoLog _ogl_glGetProgramPipelineInfoLog
extern void (OGL_FUNCPTR *_ogl_glGetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint * params);
#define glGetProgramPipelineiv _ogl_glGetProgramPipelineiv
extern void (OGL_FUNCPTR *_ogl_glGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
#define glGetShaderPrecisionFormat _ogl_glGetShaderPrecisionFormat
extern void (OGL_FUNCPTR *_ogl_glGetVertexAttribLdv)(GLuint index, GLenum pname, GLdouble * params);
#define glGetVertexAttribLdv _ogl_glGetVertexAttribLdv
extern GLboolean (OGL_FUNCPTR *_ogl_glIsProgramPipeline)(GLuint pipeline);
#define glIsProgramPipeline _ogl_glIsProgramPipeline
extern void (OGL_FUNCPTR *_ogl_glProgramBinary)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
#define glProgramBinary _ogl_glProgramBinary
extern void (OGL_FUNCPTR *_ogl_glProgramParameteri)(GLuint program, GLenum pname, GLint value);
#define glProgramParameteri _ogl_glProgramParameteri
extern void (OGL_FUNCPTR *_ogl_glProgramUniform1d)(GLuint program, GLint location, GLdouble v0);
#define glProgramUniform1d _ogl_glProgramUniform1d
extern void (OGL_FUNCPTR *_ogl_glProgramUniform1dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
#define glProgramUniform1dv _ogl_glProgramUniform1dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform1f)(GLuint program, GLint location, GLfloat v0);
#define glProgramUniform1f _ogl_glProgramUniform1f
extern void (OGL_FUNCPTR *_ogl_glProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
#define glProgramUniform1fv _ogl_glProgramUniform1fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform1i)(GLuint program, GLint location, GLint v0);
#define glProgramUniform1i _ogl_glProgramUniform1i
extern void (OGL_FUNCPTR *_ogl_glProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
#define glProgramUniform1iv _ogl_glProgramUniform1iv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform1ui)(GLuint program, GLint location, GLuint v0);
#define glProgramUniform1ui _ogl_glProgramUniform1ui
extern void (OGL_FUNCPTR *_ogl_glProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
#define glProgramUniform1uiv _ogl_glProgramUniform1uiv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform2d)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
#define glProgramUniform2d _ogl_glProgramUniform2d
extern void (OGL_FUNCPTR *_ogl_glProgramUniform2dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
#define glProgramUniform2dv _ogl_glProgramUniform2dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
#define glProgramUniform2f _ogl_glProgramUniform2f
extern void (OGL_FUNCPTR *_ogl_glProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
#define glProgramUniform2fv _ogl_glProgramUniform2fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1);
#define glProgramUniform2i _ogl_glProgramUniform2i
extern void (OGL_FUNCPTR *_ogl_glProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
#define glProgramUniform2iv _ogl_glProgramUniform2iv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1);
#define glProgramUniform2ui _ogl_glProgramUniform2ui
extern void (OGL_FUNCPTR *_ogl_glProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
#define glProgramUniform2uiv _ogl_glProgramUniform2uiv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform3d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
#define glProgramUniform3d _ogl_glProgramUniform3d
extern void (OGL_FUNCPTR *_ogl_glProgramUniform3dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
#define glProgramUniform3dv _ogl_glProgramUniform3dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
#define glProgramUniform3f _ogl_glProgramUniform3f
extern void (OGL_FUNCPTR *_ogl_glProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
#define glProgramUniform3fv _ogl_glProgramUniform3fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
#define glProgramUniform3i _ogl_glProgramUniform3i
extern void (OGL_FUNCPTR *_ogl_glProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
#define glProgramUniform3iv _ogl_glProgramUniform3iv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
#define glProgramUniform3ui _ogl_glProgramUniform3ui
extern void (OGL_FUNCPTR *_ogl_glProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
#define glProgramUniform3uiv _ogl_glProgramUniform3uiv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform4d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
#define glProgramUniform4d _ogl_glProgramUniform4d
extern void (OGL_FUNCPTR *_ogl_glProgramUniform4dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
#define glProgramUniform4dv _ogl_glProgramUniform4dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
#define glProgramUniform4f _ogl_glProgramUniform4f
extern void (OGL_FUNCPTR *_ogl_glProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
#define glProgramUniform4fv _ogl_glProgramUniform4fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
#define glProgramUniform4i _ogl_glProgramUniform4i
extern void (OGL_FUNCPTR *_ogl_glProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
#define glProgramUniform4iv _ogl_glProgramUniform4iv
extern void (OGL_FUNCPTR *_ogl_glProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
#define glProgramUniform4ui _ogl_glProgramUniform4ui
extern void (OGL_FUNCPTR *_ogl_glProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
#define glProgramUniform4uiv _ogl_glProgramUniform4uiv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glProgramUniformMatrix2dv _ogl_glProgramUniformMatrix2dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glProgramUniformMatrix2fv _ogl_glProgramUniformMatrix2fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glProgramUniformMatrix2x3dv _ogl_glProgramUniformMatrix2x3dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glProgramUniformMatrix2x3fv _ogl_glProgramUniformMatrix2x3fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glProgramUniformMatrix2x4dv _ogl_glProgramUniformMatrix2x4dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glProgramUniformMatrix2x4fv _ogl_glProgramUniformMatrix2x4fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glProgramUniformMatrix3dv _ogl_glProgramUniformMatrix3dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glProgramUniformMatrix3fv _ogl_glProgramUniformMatrix3fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glProgramUniformMatrix3x2dv _ogl_glProgramUniformMatrix3x2dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glProgramUniformMatrix3x2fv _ogl_glProgramUniformMatrix3x2fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glProgramUniformMatrix3x4dv _ogl_glProgramUniformMatrix3x4dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glProgramUniformMatrix3x4fv _ogl_glProgramUniformMatrix3x4fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glProgramUniformMatrix4dv _ogl_glProgramUniformMatrix4dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glProgramUniformMatrix4fv _ogl_glProgramUniformMatrix4fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glProgramUniformMatrix4x2dv _ogl_glProgramUniformMatrix4x2dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glProgramUniformMatrix4x2fv _ogl_glProgramUniformMatrix4x2fv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
#define glProgramUniformMatrix4x3dv _ogl_glProgramUniformMatrix4x3dv
extern void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
#define glProgramUniformMatrix4x3fv _ogl_glProgramUniformMatrix4x3fv
extern void (OGL_FUNCPTR *_ogl_glReleaseShaderCompiler)(void);
#define glReleaseShaderCompiler _ogl_glReleaseShaderCompiler
extern void (OGL_FUNCPTR *_ogl_glScissorArrayv)(GLuint first, GLsizei count, const GLint * v);
#define glScissorArrayv _ogl_glScissorArrayv
extern void (OGL_FUNCPTR *_ogl_glScissorIndexed)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
#define glScissorIndexed _ogl_glScissorIndexed
extern void (OGL_FUNCPTR *_ogl_glScissorIndexedv)(GLuint index, const GLint * v);
#define glScissorIndexedv _ogl_glScissorIndexedv
extern void (OGL_FUNCPTR *_ogl_glShaderBinary)(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);
#define glShaderBinary _ogl_glShaderBinary
extern void (OGL_FUNCPTR *_ogl_glUseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program);
#define glUseProgramStages _ogl_glUseProgramStages
extern void (OGL_FUNCPTR *_ogl_glValidateProgramPipeline)(GLuint pipeline);
#define glValidateProgramPipeline _ogl_glValidateProgramPipeline
extern void (OGL_FUNCPTR *_ogl_glVertexAttribL1d)(GLuint index, GLdouble x);
#define glVertexAttribL1d _ogl_glVertexAttribL1d
extern void (OGL_FUNCPTR *_ogl_glVertexAttribL1dv)(GLuint index, const GLdouble * v);
#define glVertexAttribL1dv _ogl_glVertexAttribL1dv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribL2d)(GLuint index, GLdouble x, GLdouble y);
#define glVertexAttribL2d _ogl_glVertexAttribL2d
extern void (OGL_FUNCPTR *_ogl_glVertexAttribL2dv)(GLuint index, const GLdouble * v);
#define glVertexAttribL2dv _ogl_glVertexAttribL2dv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribL3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
#define glVertexAttribL3d _ogl_glVertexAttribL3d
extern void (OGL_FUNCPTR *_ogl_glVertexAttribL3dv)(GLuint index, const GLdouble * v);
#define glVertexAttribL3dv _ogl_glVertexAttribL3dv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribL4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#define glVertexAttribL4d _ogl_glVertexAttribL4d
extern void (OGL_FUNCPTR *_ogl_glVertexAttribL4dv)(GLuint index, const GLdouble * v);
#define glVertexAttribL4dv _ogl_glVertexAttribL4dv
extern void (OGL_FUNCPTR *_ogl_glVertexAttribLPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
#define glVertexAttribLPointer _ogl_glVertexAttribLPointer
extern void (OGL_FUNCPTR *_ogl_glViewportArrayv)(GLuint first, GLsizei count, const GLfloat * v);
#define glViewportArrayv _ogl_glViewportArrayv
extern void (OGL_FUNCPTR *_ogl_glViewportIndexedf)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
#define glViewportIndexedf _ogl_glViewportIndexedf
extern void (OGL_FUNCPTR *_ogl_glViewportIndexedfv)(GLuint index, const GLfloat * v);
#define glViewportIndexedfv _ogl_glViewportIndexedfv


#ifdef OGL_COMPATIBILITY
extern void (OGL_FUNCPTR *_ogl_glAccum)(GLenum op, GLfloat value);
#define glAccum _ogl_glAccum
extern void (OGL_FUNCPTR *_ogl_glAlphaFunc)(GLenum func, GLfloat ref);
#define glAlphaFunc _ogl_glAlphaFunc
extern void (OGL_FUNCPTR *_ogl_glBegin)(GLenum mode);
#define glBegin _ogl_glBegin
extern void (OGL_FUNCPTR *_ogl_glBitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
#define glBitmap _ogl_glBitmap
extern void (OGL_FUNCPTR *_ogl_glCallList)(GLuint list);
#define glCallList _ogl_glCallList
extern void (OGL_FUNCPTR *_ogl_glCallLists)(GLsizei n, GLenum type, const void * lists);
#define glCallLists _ogl_glCallLists
extern void (OGL_FUNCPTR *_ogl_glClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#define glClearAccum _ogl_glClearAccum
extern void (OGL_FUNCPTR *_ogl_glClearIndex)(GLfloat c);
#define glClearIndex _ogl_glClearIndex
extern void (OGL_FUNCPTR *_ogl_glClipPlane)(GLenum plane, const GLdouble * equation);
#define glClipPlane _ogl_glClipPlane
extern void (OGL_FUNCPTR *_ogl_glColor3b)(GLbyte red, GLbyte green, GLbyte blue);
#define glColor3b _ogl_glColor3b
extern void (OGL_FUNCPTR *_ogl_glColor3bv)(const GLbyte * v);
#define glColor3bv _ogl_glColor3bv
extern void (OGL_FUNCPTR *_ogl_glColor3d)(GLdouble red, GLdouble green, GLdouble blue);
#define glColor3d _ogl_glColor3d
extern void (OGL_FUNCPTR *_ogl_glColor3dv)(const GLdouble * v);
#define glColor3dv _ogl_glColor3dv
extern void (OGL_FUNCPTR *_ogl_glColor3f)(GLfloat red, GLfloat green, GLfloat blue);
#define glColor3f _ogl_glColor3f
extern void (OGL_FUNCPTR *_ogl_glColor3fv)(const GLfloat * v);
#define glColor3fv _ogl_glColor3fv
extern void (OGL_FUNCPTR *_ogl_glColor3i)(GLint red, GLint green, GLint blue);
#define glColor3i _ogl_glColor3i
extern void (OGL_FUNCPTR *_ogl_glColor3iv)(const GLint * v);
#define glColor3iv _ogl_glColor3iv
extern void (OGL_FUNCPTR *_ogl_glColor3s)(GLshort red, GLshort green, GLshort blue);
#define glColor3s _ogl_glColor3s
extern void (OGL_FUNCPTR *_ogl_glColor3sv)(const GLshort * v);
#define glColor3sv _ogl_glColor3sv
extern void (OGL_FUNCPTR *_ogl_glColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
#define glColor3ub _ogl_glColor3ub
extern void (OGL_FUNCPTR *_ogl_glColor3ubv)(const GLubyte * v);
#define glColor3ubv _ogl_glColor3ubv
extern void (OGL_FUNCPTR *_ogl_glColor3ui)(GLuint red, GLuint green, GLuint blue);
#define glColor3ui _ogl_glColor3ui
extern void (OGL_FUNCPTR *_ogl_glColor3uiv)(const GLuint * v);
#define glColor3uiv _ogl_glColor3uiv
extern void (OGL_FUNCPTR *_ogl_glColor3us)(GLushort red, GLushort green, GLushort blue);
#define glColor3us _ogl_glColor3us
extern void (OGL_FUNCPTR *_ogl_glColor3usv)(const GLushort * v);
#define glColor3usv _ogl_glColor3usv
extern void (OGL_FUNCPTR *_ogl_glColor4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
#define glColor4b _ogl_glColor4b
extern void (OGL_FUNCPTR *_ogl_glColor4bv)(const GLbyte * v);
#define glColor4bv _ogl_glColor4bv
extern void (OGL_FUNCPTR *_ogl_glColor4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
#define glColor4d _ogl_glColor4d
extern void (OGL_FUNCPTR *_ogl_glColor4dv)(const GLdouble * v);
#define glColor4dv _ogl_glColor4dv
extern void (OGL_FUNCPTR *_ogl_glColor4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#define glColor4f _ogl_glColor4f
extern void (OGL_FUNCPTR *_ogl_glColor4fv)(const GLfloat * v);
#define glColor4fv _ogl_glColor4fv
extern void (OGL_FUNCPTR *_ogl_glColor4i)(GLint red, GLint green, GLint blue, GLint alpha);
#define glColor4i _ogl_glColor4i
extern void (OGL_FUNCPTR *_ogl_glColor4iv)(const GLint * v);
#define glColor4iv _ogl_glColor4iv
extern void (OGL_FUNCPTR *_ogl_glColor4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
#define glColor4s _ogl_glColor4s
extern void (OGL_FUNCPTR *_ogl_glColor4sv)(const GLshort * v);
#define glColor4sv _ogl_glColor4sv
extern void (OGL_FUNCPTR *_ogl_glColor4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
#define glColor4ub _ogl_glColor4ub
extern void (OGL_FUNCPTR *_ogl_glColor4ubv)(const GLubyte * v);
#define glColor4ubv _ogl_glColor4ubv
extern void (OGL_FUNCPTR *_ogl_glColor4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
#define glColor4ui _ogl_glColor4ui
extern void (OGL_FUNCPTR *_ogl_glColor4uiv)(const GLuint * v);
#define glColor4uiv _ogl_glColor4uiv
extern void (OGL_FUNCPTR *_ogl_glColor4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
#define glColor4us _ogl_glColor4us
extern void (OGL_FUNCPTR *_ogl_glColor4usv)(const GLushort * v);
#define glColor4usv _ogl_glColor4usv
extern void (OGL_FUNCPTR *_ogl_glColorMaterial)(GLenum face, GLenum mode);
#define glColorMaterial _ogl_glColorMaterial
extern void (OGL_FUNCPTR *_ogl_glCopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
#define glCopyPixels _ogl_glCopyPixels
extern void (OGL_FUNCPTR *_ogl_glDeleteLists)(GLuint list, GLsizei range);
#define glDeleteLists _ogl_glDeleteLists
extern void (OGL_FUNCPTR *_ogl_glDrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
#define glDrawPixels _ogl_glDrawPixels
extern void (OGL_FUNCPTR *_ogl_glEdgeFlag)(GLboolean flag);
#define glEdgeFlag _ogl_glEdgeFlag
extern void (OGL_FUNCPTR *_ogl_glEdgeFlagv)(const GLboolean * flag);
#define glEdgeFlagv _ogl_glEdgeFlagv
extern void (OGL_FUNCPTR *_ogl_glEnd)(void);
#define glEnd _ogl_glEnd
extern void (OGL_FUNCPTR *_ogl_glEndList)(void);
#define glEndList _ogl_glEndList
extern void (OGL_FUNCPTR *_ogl_glEvalCoord1d)(GLdouble u);
#define glEvalCoord1d _ogl_glEvalCoord1d
extern void (OGL_FUNCPTR *_ogl_glEvalCoord1dv)(const GLdouble * u);
#define glEvalCoord1dv _ogl_glEvalCoord1dv
extern void (OGL_FUNCPTR *_ogl_glEvalCoord1f)(GLfloat u);
#define glEvalCoord1f _ogl_glEvalCoord1f
extern void (OGL_FUNCPTR *_ogl_glEvalCoord1fv)(const GLfloat * u);
#define glEvalCoord1fv _ogl_glEvalCoord1fv
extern void (OGL_FUNCPTR *_ogl_glEvalCoord2d)(GLdouble u, GLdouble v);
#define glEvalCoord2d _ogl_glEvalCoord2d
extern void (OGL_FUNCPTR *_ogl_glEvalCoord2dv)(const GLdouble * u);
#define glEvalCoord2dv _ogl_glEvalCoord2dv
extern void (OGL_FUNCPTR *_ogl_glEvalCoord2f)(GLfloat u, GLfloat v);
#define glEvalCoord2f _ogl_glEvalCoord2f
extern void (OGL_FUNCPTR *_ogl_glEvalCoord2fv)(const GLfloat * u);
#define glEvalCoord2fv _ogl_glEvalCoord2fv
extern void (OGL_FUNCPTR *_ogl_glEvalMesh1)(GLenum mode, GLint i1, GLint i2);
#define glEvalMesh1 _ogl_glEvalMesh1
extern void (OGL_FUNCPTR *_ogl_glEvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
#define glEvalMesh2 _ogl_glEvalMesh2
extern void (OGL_FUNCPTR *_ogl_glEvalPoint1)(GLint i);
#define glEvalPoint1 _ogl_glEvalPoint1
extern void (OGL_FUNCPTR *_ogl_glEvalPoint2)(GLint i, GLint j);
#define glEvalPoint2 _ogl_glEvalPoint2
extern void (OGL_FUNCPTR *_ogl_glFeedbackBuffer)(GLsizei size, GLenum type, GLfloat * buffer);
#define glFeedbackBuffer _ogl_glFeedbackBuffer
extern void (OGL_FUNCPTR *_ogl_glFogf)(GLenum pname, GLfloat param);
#define glFogf _ogl_glFogf
extern void (OGL_FUNCPTR *_ogl_glFogfv)(GLenum pname, const GLfloat * params);
#define glFogfv _ogl_glFogfv
extern void (OGL_FUNCPTR *_ogl_glFogi)(GLenum pname, GLint param);
#define glFogi _ogl_glFogi
extern void (OGL_FUNCPTR *_ogl_glFogiv)(GLenum pname, const GLint * params);
#define glFogiv _ogl_glFogiv
extern void (OGL_FUNCPTR *_ogl_glFrustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
#define glFrustum _ogl_glFrustum
extern GLuint (OGL_FUNCPTR *_ogl_glGenLists)(GLsizei range);
#define glGenLists _ogl_glGenLists
extern void (OGL_FUNCPTR *_ogl_glGetClipPlane)(GLenum plane, GLdouble * equation);
#define glGetClipPlane _ogl_glGetClipPlane
extern void (OGL_FUNCPTR *_ogl_glGetLightfv)(GLenum light, GLenum pname, GLfloat * params);
#define glGetLightfv _ogl_glGetLightfv
extern void (OGL_FUNCPTR *_ogl_glGetLightiv)(GLenum light, GLenum pname, GLint * params);
#define glGetLightiv _ogl_glGetLightiv
extern void (OGL_FUNCPTR *_ogl_glGetMapdv)(GLenum target, GLenum query, GLdouble * v);
#define glGetMapdv _ogl_glGetMapdv
extern void (OGL_FUNCPTR *_ogl_glGetMapfv)(GLenum target, GLenum query, GLfloat * v);
#define glGetMapfv _ogl_glGetMapfv
extern void (OGL_FUNCPTR *_ogl_glGetMapiv)(GLenum target, GLenum query, GLint * v);
#define glGetMapiv _ogl_glGetMapiv
extern void (OGL_FUNCPTR *_ogl_glGetMaterialfv)(GLenum face, GLenum pname, GLfloat * params);
#define glGetMaterialfv _ogl_glGetMaterialfv
extern void (OGL_FUNCPTR *_ogl_glGetMaterialiv)(GLenum face, GLenum pname, GLint * params);
#define glGetMaterialiv _ogl_glGetMaterialiv
extern void (OGL_FUNCPTR *_ogl_glGetPixelMapfv)(GLenum map, GLfloat * values);
#define glGetPixelMapfv _ogl_glGetPixelMapfv
extern void (OGL_FUNCPTR *_ogl_glGetPixelMapuiv)(GLenum map, GLuint * values);
#define glGetPixelMapuiv _ogl_glGetPixelMapuiv
extern void (OGL_FUNCPTR *_ogl_glGetPixelMapusv)(GLenum map, GLushort * values);
#define glGetPixelMapusv _ogl_glGetPixelMapusv
extern void (OGL_FUNCPTR *_ogl_glGetPolygonStipple)(GLubyte * mask);
#define glGetPolygonStipple _ogl_glGetPolygonStipple
extern void (OGL_FUNCPTR *_ogl_glGetTexEnvfv)(GLenum target, GLenum pname, GLfloat * params);
#define glGetTexEnvfv _ogl_glGetTexEnvfv
extern void (OGL_FUNCPTR *_ogl_glGetTexEnviv)(GLenum target, GLenum pname, GLint * params);
#define glGetTexEnviv _ogl_glGetTexEnviv
extern void (OGL_FUNCPTR *_ogl_glGetTexGendv)(GLenum coord, GLenum pname, GLdouble * params);
#define glGetTexGendv _ogl_glGetTexGendv
extern void (OGL_FUNCPTR *_ogl_glGetTexGenfv)(GLenum coord, GLenum pname, GLfloat * params);
#define glGetTexGenfv _ogl_glGetTexGenfv
extern void (OGL_FUNCPTR *_ogl_glGetTexGeniv)(GLenum coord, GLenum pname, GLint * params);
#define glGetTexGeniv _ogl_glGetTexGeniv
extern void (OGL_FUNCPTR *_ogl_glIndexMask)(GLuint mask);
#define glIndexMask _ogl_glIndexMask
extern void (OGL_FUNCPTR *_ogl_glIndexd)(GLdouble c);
#define glIndexd _ogl_glIndexd
extern void (OGL_FUNCPTR *_ogl_glIndexdv)(const GLdouble * c);
#define glIndexdv _ogl_glIndexdv
extern void (OGL_FUNCPTR *_ogl_glIndexf)(GLfloat c);
#define glIndexf _ogl_glIndexf
extern void (OGL_FUNCPTR *_ogl_glIndexfv)(const GLfloat * c);
#define glIndexfv _ogl_glIndexfv
extern void (OGL_FUNCPTR *_ogl_glIndexi)(GLint c);
#define glIndexi _ogl_glIndexi
extern void (OGL_FUNCPTR *_ogl_glIndexiv)(const GLint * c);
#define glIndexiv _ogl_glIndexiv
extern void (OGL_FUNCPTR *_ogl_glIndexs)(GLshort c);
#define glIndexs _ogl_glIndexs
extern void (OGL_FUNCPTR *_ogl_glIndexsv)(const GLshort * c);
#define glIndexsv _ogl_glIndexsv
extern void (OGL_FUNCPTR *_ogl_glInitNames)(void);
#define glInitNames _ogl_glInitNames
extern GLboolean (OGL_FUNCPTR *_ogl_glIsList)(GLuint list);
#define glIsList _ogl_glIsList
extern void (OGL_FUNCPTR *_ogl_glLightModelf)(GLenum pname, GLfloat param);
#define glLightModelf _ogl_glLightModelf
extern void (OGL_FUNCPTR *_ogl_glLightModelfv)(GLenum pname, const GLfloat * params);
#define glLightModelfv _ogl_glLightModelfv
extern void (OGL_FUNCPTR *_ogl_glLightModeli)(GLenum pname, GLint param);
#define glLightModeli _ogl_glLightModeli
extern void (OGL_FUNCPTR *_ogl_glLightModeliv)(GLenum pname, const GLint * params);
#define glLightModeliv _ogl_glLightModeliv
extern void (OGL_FUNCPTR *_ogl_glLightf)(GLenum light, GLenum pname, GLfloat param);
#define glLightf _ogl_glLightf
extern void (OGL_FUNCPTR *_ogl_glLightfv)(GLenum light, GLenum pname, const GLfloat * params);
#define glLightfv _ogl_glLightfv
extern void (OGL_FUNCPTR *_ogl_glLighti)(GLenum light, GLenum pname, GLint param);
#define glLighti _ogl_glLighti
extern void (OGL_FUNCPTR *_ogl_glLightiv)(GLenum light, GLenum pname, const GLint * params);
#define glLightiv _ogl_glLightiv
extern void (OGL_FUNCPTR *_ogl_glLineStipple)(GLint factor, GLushort pattern);
#define glLineStipple _ogl_glLineStipple
extern void (OGL_FUNCPTR *_ogl_glListBase)(GLuint base);
#define glListBase _ogl_glListBase
extern void (OGL_FUNCPTR *_ogl_glLoadIdentity)(void);
#define glLoadIdentity _ogl_glLoadIdentity
extern void (OGL_FUNCPTR *_ogl_glLoadMatrixd)(const GLdouble * m);
#define glLoadMatrixd _ogl_glLoadMatrixd
extern void (OGL_FUNCPTR *_ogl_glLoadMatrixf)(const GLfloat * m);
#define glLoadMatrixf _ogl_glLoadMatrixf
extern void (OGL_FUNCPTR *_ogl_glLoadName)(GLuint name);
#define glLoadName _ogl_glLoadName
extern void (OGL_FUNCPTR *_ogl_glMap1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
#define glMap1d _ogl_glMap1d
extern void (OGL_FUNCPTR *_ogl_glMap1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
#define glMap1f _ogl_glMap1f
extern void (OGL_FUNCPTR *_ogl_glMap2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
#define glMap2d _ogl_glMap2d
extern void (OGL_FUNCPTR *_ogl_glMap2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
#define glMap2f _ogl_glMap2f
extern void (OGL_FUNCPTR *_ogl_glMapGrid1d)(GLint un, GLdouble u1, GLdouble u2);
#define glMapGrid1d _ogl_glMapGrid1d
extern void (OGL_FUNCPTR *_ogl_glMapGrid1f)(GLint un, GLfloat u1, GLfloat u2);
#define glMapGrid1f _ogl_glMapGrid1f
extern void (OGL_FUNCPTR *_ogl_glMapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
#define glMapGrid2d _ogl_glMapGrid2d
extern void (OGL_FUNCPTR *_ogl_glMapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
#define glMapGrid2f _ogl_glMapGrid2f
extern void (OGL_FUNCPTR *_ogl_glMaterialf)(GLenum face, GLenum pname, GLfloat param);
#define glMaterialf _ogl_glMaterialf
extern void (OGL_FUNCPTR *_ogl_glMaterialfv)(GLenum face, GLenum pname, const GLfloat * params);
#define glMaterialfv _ogl_glMaterialfv
extern void (OGL_FUNCPTR *_ogl_glMateriali)(GLenum face, GLenum pname, GLint param);
#define glMateriali _ogl_glMateriali
extern void (OGL_FUNCPTR *_ogl_glMaterialiv)(GLenum face, GLenum pname, const GLint * params);
#define glMaterialiv _ogl_glMaterialiv
extern void (OGL_FUNCPTR *_ogl_glMatrixMode)(GLenum mode);
#define glMatrixMode _ogl_glMatrixMode
extern void (OGL_FUNCPTR *_ogl_glMultMatrixd)(const GLdouble * m);
#define glMultMatrixd _ogl_glMultMatrixd
extern void (OGL_FUNCPTR *_ogl_glMultMatrixf)(const GLfloat * m);
#define glMultMatrixf _ogl_glMultMatrixf
extern void (OGL_FUNCPTR *_ogl_glNewList)(GLuint list, GLenum mode);
#define glNewList _ogl_glNewList
extern void (OGL_FUNCPTR *_ogl_glNormal3b)(GLbyte nx, GLbyte ny, GLbyte nz);
#define glNormal3b _ogl_glNormal3b
extern void (OGL_FUNCPTR *_ogl_glNormal3bv)(const GLbyte * v);
#define glNormal3bv _ogl_glNormal3bv
extern void (OGL_FUNCPTR *_ogl_glNormal3d)(GLdouble nx, GLdouble ny, GLdouble nz);
#define glNormal3d _ogl_glNormal3d
extern void (OGL_FUNCPTR *_ogl_glNormal3dv)(const GLdouble * v);
#define glNormal3dv _ogl_glNormal3dv
extern void (OGL_FUNCPTR *_ogl_glNormal3f)(GLfloat nx, GLfloat ny, GLfloat nz);
#define glNormal3f _ogl_glNormal3f
extern void (OGL_FUNCPTR *_ogl_glNormal3fv)(const GLfloat * v);
#define glNormal3fv _ogl_glNormal3fv
extern void (OGL_FUNCPTR *_ogl_glNormal3i)(GLint nx, GLint ny, GLint nz);
#define glNormal3i _ogl_glNormal3i
extern void (OGL_FUNCPTR *_ogl_glNormal3iv)(const GLint * v);
#define glNormal3iv _ogl_glNormal3iv
extern void (OGL_FUNCPTR *_ogl_glNormal3s)(GLshort nx, GLshort ny, GLshort nz);
#define glNormal3s _ogl_glNormal3s
extern void (OGL_FUNCPTR *_ogl_glNormal3sv)(const GLshort * v);
#define glNormal3sv _ogl_glNormal3sv
extern void (OGL_FUNCPTR *_ogl_glOrtho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
#define glOrtho _ogl_glOrtho
extern void (OGL_FUNCPTR *_ogl_glPassThrough)(GLfloat token);
#define glPassThrough _ogl_glPassThrough
extern void (OGL_FUNCPTR *_ogl_glPixelMapfv)(GLenum map, GLsizei mapsize, const GLfloat * values);
#define glPixelMapfv _ogl_glPixelMapfv
extern void (OGL_FUNCPTR *_ogl_glPixelMapuiv)(GLenum map, GLsizei mapsize, const GLuint * values);
#define glPixelMapuiv _ogl_glPixelMapuiv
extern void (OGL_FUNCPTR *_ogl_glPixelMapusv)(GLenum map, GLsizei mapsize, const GLushort * values);
#define glPixelMapusv _ogl_glPixelMapusv
extern void (OGL_FUNCPTR *_ogl_glPixelTransferf)(GLenum pname, GLfloat param);
#define glPixelTransferf _ogl_glPixelTransferf
extern void (OGL_FUNCPTR *_ogl_glPixelTransferi)(GLenum pname, GLint param);
#define glPixelTransferi _ogl_glPixelTransferi
extern void (OGL_FUNCPTR *_ogl_glPixelZoom)(GLfloat xfactor, GLfloat yfactor);
#define glPixelZoom _ogl_glPixelZoom
extern void (OGL_FUNCPTR *_ogl_glPolygonStipple)(const GLubyte * mask);
#define glPolygonStipple _ogl_glPolygonStipple
extern void (OGL_FUNCPTR *_ogl_glPopAttrib)(void);
#define glPopAttrib _ogl_glPopAttrib
extern void (OGL_FUNCPTR *_ogl_glPopMatrix)(void);
#define glPopMatrix _ogl_glPopMatrix
extern void (OGL_FUNCPTR *_ogl_glPopName)(void);
#define glPopName _ogl_glPopName
extern void (OGL_FUNCPTR *_ogl_glPushAttrib)(GLbitfield mask);
#define glPushAttrib _ogl_glPushAttrib
extern void (OGL_FUNCPTR *_ogl_glPushMatrix)(void);
#define glPushMatrix _ogl_glPushMatrix
extern void (OGL_FUNCPTR *_ogl_glPushName)(GLuint name);
#define glPushName _ogl_glPushName
extern void (OGL_FUNCPTR *_ogl_glRasterPos2d)(GLdouble x, GLdouble y);
#define glRasterPos2d _ogl_glRasterPos2d
extern void (OGL_FUNCPTR *_ogl_glRasterPos2dv)(const GLdouble * v);
#define glRasterPos2dv _ogl_glRasterPos2dv
extern void (OGL_FUNCPTR *_ogl_glRasterPos2f)(GLfloat x, GLfloat y);
#define glRasterPos2f _ogl_glRasterPos2f
extern void (OGL_FUNCPTR *_ogl_glRasterPos2fv)(const GLfloat * v);
#define glRasterPos2fv _ogl_glRasterPos2fv
extern void (OGL_FUNCPTR *_ogl_glRasterPos2i)(GLint x, GLint y);
#define glRasterPos2i _ogl_glRasterPos2i
extern void (OGL_FUNCPTR *_ogl_glRasterPos2iv)(const GLint * v);
#define glRasterPos2iv _ogl_glRasterPos2iv
extern void (OGL_FUNCPTR *_ogl_glRasterPos2s)(GLshort x, GLshort y);
#define glRasterPos2s _ogl_glRasterPos2s
extern void (OGL_FUNCPTR *_ogl_glRasterPos2sv)(const GLshort * v);
#define glRasterPos2sv _ogl_glRasterPos2sv
extern void (OGL_FUNCPTR *_ogl_glRasterPos3d)(GLdouble x, GLdouble y, GLdouble z);
#define glRasterPos3d _ogl_glRasterPos3d
extern void (OGL_FUNCPTR *_ogl_glRasterPos3dv)(const GLdouble * v);
#define glRasterPos3dv _ogl_glRasterPos3dv
extern void (OGL_FUNCPTR *_ogl_glRasterPos3f)(GLfloat x, GLfloat y, GLfloat z);
#define glRasterPos3f _ogl_glRasterPos3f
extern void (OGL_FUNCPTR *_ogl_glRasterPos3fv)(const GLfloat * v);
#define glRasterPos3fv _ogl_glRasterPos3fv
extern void (OGL_FUNCPTR *_ogl_glRasterPos3i)(GLint x, GLint y, GLint z);
#define glRasterPos3i _ogl_glRasterPos3i
extern void (OGL_FUNCPTR *_ogl_glRasterPos3iv)(const GLint * v);
#define glRasterPos3iv _ogl_glRasterPos3iv
extern void (OGL_FUNCPTR *_ogl_glRasterPos3s)(GLshort x, GLshort y, GLshort z);
#define glRasterPos3s _ogl_glRasterPos3s
extern void (OGL_FUNCPTR *_ogl_glRasterPos3sv)(const GLshort * v);
#define glRasterPos3sv _ogl_glRasterPos3sv
extern void (OGL_FUNCPTR *_ogl_glRasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#define glRasterPos4d _ogl_glRasterPos4d
extern void (OGL_FUNCPTR *_ogl_glRasterPos4dv)(const GLdouble * v);
#define glRasterPos4dv _ogl_glRasterPos4dv
extern void (OGL_FUNCPTR *_ogl_glRasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
#define glRasterPos4f _ogl_glRasterPos4f
extern void (OGL_FUNCPTR *_ogl_glRasterPos4fv)(const GLfloat * v);
#define glRasterPos4fv _ogl_glRasterPos4fv
extern void (OGL_FUNCPTR *_ogl_glRasterPos4i)(GLint x, GLint y, GLint z, GLint w);
#define glRasterPos4i _ogl_glRasterPos4i
extern void (OGL_FUNCPTR *_ogl_glRasterPos4iv)(const GLint * v);
#define glRasterPos4iv _ogl_glRasterPos4iv
extern void (OGL_FUNCPTR *_ogl_glRasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w);
#define glRasterPos4s _ogl_glRasterPos4s
extern void (OGL_FUNCPTR *_ogl_glRasterPos4sv)(const GLshort * v);
#define glRasterPos4sv _ogl_glRasterPos4sv
extern void (OGL_FUNCPTR *_ogl_glRectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
#define glRectd _ogl_glRectd
extern void (OGL_FUNCPTR *_ogl_glRectdv)(const GLdouble * v1, const GLdouble * v2);
#define glRectdv _ogl_glRectdv
extern void (OGL_FUNCPTR *_ogl_glRectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
#define glRectf _ogl_glRectf
extern void (OGL_FUNCPTR *_ogl_glRectfv)(const GLfloat * v1, const GLfloat * v2);
#define glRectfv _ogl_glRectfv
extern void (OGL_FUNCPTR *_ogl_glRecti)(GLint x1, GLint y1, GLint x2, GLint y2);
#define glRecti _ogl_glRecti
extern void (OGL_FUNCPTR *_ogl_glRectiv)(const GLint * v1, const GLint * v2);
#define glRectiv _ogl_glRectiv
extern void (OGL_FUNCPTR *_ogl_glRects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
#define glRects _ogl_glRects
extern void (OGL_FUNCPTR *_ogl_glRectsv)(const GLshort * v1, const GLshort * v2);
#define glRectsv _ogl_glRectsv
extern GLint (OGL_FUNCPTR *_ogl_glRenderMode)(GLenum mode);
#define glRenderMode _ogl_glRenderMode
extern void (OGL_FUNCPTR *_ogl_glRotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
#define glRotated _ogl_glRotated
extern void (OGL_FUNCPTR *_ogl_glRotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
#define glRotatef _ogl_glRotatef
extern void (OGL_FUNCPTR *_ogl_glScaled)(GLdouble x, GLdouble y, GLdouble z);
#define glScaled _ogl_glScaled
extern void (OGL_FUNCPTR *_ogl_glScalef)(GLfloat x, GLfloat y, GLfloat z);
#define glScalef _ogl_glScalef
extern void (OGL_FUNCPTR *_ogl_glSelectBuffer)(GLsizei size, GLuint * buffer);
#define glSelectBuffer _ogl_glSelectBuffer
extern void (OGL_FUNCPTR *_ogl_glShadeModel)(GLenum mode);
#define glShadeModel _ogl_glShadeModel
extern void (OGL_FUNCPTR *_ogl_glTexCoord1d)(GLdouble s);
#define glTexCoord1d _ogl_glTexCoord1d
extern void (OGL_FUNCPTR *_ogl_glTexCoord1dv)(const GLdouble * v);
#define glTexCoord1dv _ogl_glTexCoord1dv
extern void (OGL_FUNCPTR *_ogl_glTexCoord1f)(GLfloat s);
#define glTexCoord1f _ogl_glTexCoord1f
extern void (OGL_FUNCPTR *_ogl_glTexCoord1fv)(const GLfloat * v);
#define glTexCoord1fv _ogl_glTexCoord1fv
extern void (OGL_FUNCPTR *_ogl_glTexCoord1i)(GLint s);
#define glTexCoord1i _ogl_glTexCoord1i
extern void (OGL_FUNCPTR *_ogl_glTexCoord1iv)(const GLint * v);
#define glTexCoord1iv _ogl_glTexCoord1iv
extern void (OGL_FUNCPTR *_ogl_glTexCoord1s)(GLshort s);
#define glTexCoord1s _ogl_glTexCoord1s
extern void (OGL_FUNCPTR *_ogl_glTexCoord1sv)(const GLshort * v);
#define glTexCoord1sv _ogl_glTexCoord1sv
extern void (OGL_FUNCPTR *_ogl_glTexCoord2d)(GLdouble s, GLdouble t);
#define glTexCoord2d _ogl_glTexCoord2d
extern void (OGL_FUNCPTR *_ogl_glTexCoord2dv)(const GLdouble * v);
#define glTexCoord2dv _ogl_glTexCoord2dv
extern void (OGL_FUNCPTR *_ogl_glTexCoord2f)(GLfloat s, GLfloat t);
#define glTexCoord2f _ogl_glTexCoord2f
extern void (OGL_FUNCPTR *_ogl_glTexCoord2fv)(const GLfloat * v);
#define glTexCoord2fv _ogl_glTexCoord2fv
extern void (OGL_FUNCPTR *_ogl_glTexCoord2i)(GLint s, GLint t);
#define glTexCoord2i _ogl_glTexCoord2i
extern void (OGL_FUNCPTR *_ogl_glTexCoord2iv)(const GLint * v);
#define glTexCoord2iv _ogl_glTexCoord2iv
extern void (OGL_FUNCPTR *_ogl_glTexCoord2s)(GLshort s, GLshort t);
#define glTexCoord2s _ogl_glTexCoord2s
extern void (OGL_FUNCPTR *_ogl_glTexCoord2sv)(const GLshort * v);
#define glTexCoord2sv _ogl_glTexCoord2sv
extern void (OGL_FUNCPTR *_ogl_glTexCoord3d)(GLdouble s, GLdouble t, GLdouble r);
#define glTexCoord3d _ogl_glTexCoord3d
extern void (OGL_FUNCPTR *_ogl_glTexCoord3dv)(const GLdouble * v);
#define glTexCoord3dv _ogl_glTexCoord3dv
extern void (OGL_FUNCPTR *_ogl_glTexCoord3f)(GLfloat s, GLfloat t, GLfloat r);
#define glTexCoord3f _ogl_glTexCoord3f
extern void (OGL_FUNCPTR *_ogl_glTexCoord3fv)(const GLfloat * v);
#define glTexCoord3fv _ogl_glTexCoord3fv
extern void (OGL_FUNCPTR *_ogl_glTexCoord3i)(GLint s, GLint t, GLint r);
#define glTexCoord3i _ogl_glTexCoord3i
extern void (OGL_FUNCPTR *_ogl_glTexCoord3iv)(const GLint * v);
#define glTexCoord3iv _ogl_glTexCoord3iv
extern void (OGL_FUNCPTR *_ogl_glTexCoord3s)(GLshort s, GLshort t, GLshort r);
#define glTexCoord3s _ogl_glTexCoord3s
extern void (OGL_FUNCPTR *_ogl_glTexCoord3sv)(const GLshort * v);
#define glTexCoord3sv _ogl_glTexCoord3sv
extern void (OGL_FUNCPTR *_ogl_glTexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
#define glTexCoord4d _ogl_glTexCoord4d
extern void (OGL_FUNCPTR *_ogl_glTexCoord4dv)(const GLdouble * v);
#define glTexCoord4dv _ogl_glTexCoord4dv
extern void (OGL_FUNCPTR *_ogl_glTexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
#define glTexCoord4f _ogl_glTexCoord4f
extern void (OGL_FUNCPTR *_ogl_glTexCoord4fv)(const GLfloat * v);
#define glTexCoord4fv _ogl_glTexCoord4fv
extern void (OGL_FUNCPTR *_ogl_glTexCoord4i)(GLint s, GLint t, GLint r, GLint q);
#define glTexCoord4i _ogl_glTexCoord4i
extern void (OGL_FUNCPTR *_ogl_glTexCoord4iv)(const GLint * v);
#define glTexCoord4iv _ogl_glTexCoord4iv
extern void (OGL_FUNCPTR *_ogl_glTexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q);
#define glTexCoord4s _ogl_glTexCoord4s
extern void (OGL_FUNCPTR *_ogl_glTexCoord4sv)(const GLshort * v);
#define glTexCoord4sv _ogl_glTexCoord4sv
extern void (OGL_FUNCPTR *_ogl_glTexEnvf)(GLenum target, GLenum pname, GLfloat param);
#define glTexEnvf _ogl_glTexEnvf
extern void (OGL_FUNCPTR *_ogl_glTexEnvfv)(GLenum target, GLenum pname, const GLfloat * params);
#define glTexEnvfv _ogl_glTexEnvfv
extern void (OGL_FUNCPTR *_ogl_glTexEnvi)(GLenum target, GLenum pname, GLint param);
#define glTexEnvi _ogl_glTexEnvi
extern void (OGL_FUNCPTR *_ogl_glTexEnviv)(GLenum target, GLenum pname, const GLint * params);
#define glTexEnviv _ogl_glTexEnviv
extern void (OGL_FUNCPTR *_ogl_glTexGend)(GLenum coord, GLenum pname, GLdouble param);
#define glTexGend _ogl_glTexGend
extern void (OGL_FUNCPTR *_ogl_glTexGendv)(GLenum coord, GLenum pname, const GLdouble * params);
#define glTexGendv _ogl_glTexGendv
extern void (OGL_FUNCPTR *_ogl_glTexGenf)(GLenum coord, GLenum pname, GLfloat param);
#define glTexGenf _ogl_glTexGenf
extern void (OGL_FUNCPTR *_ogl_glTexGenfv)(GLenum coord, GLenum pname, const GLfloat * params);
#define glTexGenfv _ogl_glTexGenfv
extern void (OGL_FUNCPTR *_ogl_glTexGeni)(GLenum coord, GLenum pname, GLint param);
#define glTexGeni _ogl_glTexGeni
extern void (OGL_FUNCPTR *_ogl_glTexGeniv)(GLenum coord, GLenum pname, const GLint * params);
#define glTexGeniv _ogl_glTexGeniv
extern void (OGL_FUNCPTR *_ogl_glTranslated)(GLdouble x, GLdouble y, GLdouble z);
#define glTranslated _ogl_glTranslated
extern void (OGL_FUNCPTR *_ogl_glTranslatef)(GLfloat x, GLfloat y, GLfloat z);
#define glTranslatef _ogl_glTranslatef
extern void (OGL_FUNCPTR *_ogl_glVertex2d)(GLdouble x, GLdouble y);
#define glVertex2d _ogl_glVertex2d
extern void (OGL_FUNCPTR *_ogl_glVertex2dv)(const GLdouble * v);
#define glVertex2dv _ogl_glVertex2dv
extern void (OGL_FUNCPTR *_ogl_glVertex2f)(GLfloat x, GLfloat y);
#define glVertex2f _ogl_glVertex2f
extern void (OGL_FUNCPTR *_ogl_glVertex2fv)(const GLfloat * v);
#define glVertex2fv _ogl_glVertex2fv
extern void (OGL_FUNCPTR *_ogl_glVertex2i)(GLint x, GLint y);
#define glVertex2i _ogl_glVertex2i
extern void (OGL_FUNCPTR *_ogl_glVertex2iv)(const GLint * v);
#define glVertex2iv _ogl_glVertex2iv
extern void (OGL_FUNCPTR *_ogl_glVertex2s)(GLshort x, GLshort y);
#define glVertex2s _ogl_glVertex2s
extern void (OGL_FUNCPTR *_ogl_glVertex2sv)(const GLshort * v);
#define glVertex2sv _ogl_glVertex2sv
extern void (OGL_FUNCPTR *_ogl_glVertex3d)(GLdouble x, GLdouble y, GLdouble z);
#define glVertex3d _ogl_glVertex3d
extern void (OGL_FUNCPTR *_ogl_glVertex3dv)(const GLdouble * v);
#define glVertex3dv _ogl_glVertex3dv
extern void (OGL_FUNCPTR *_ogl_glVertex3f)(GLfloat x, GLfloat y, GLfloat z);
#define glVertex3f _ogl_glVertex3f
extern void (OGL_FUNCPTR *_ogl_glVertex3fv)(const GLfloat * v);
#define glVertex3fv _ogl_glVertex3fv
extern void (OGL_FUNCPTR *_ogl_glVertex3i)(GLint x, GLint y, GLint z);
#define glVertex3i _ogl_glVertex3i
extern void (OGL_FUNCPTR *_ogl_glVertex3iv)(const GLint * v);
#define glVertex3iv _ogl_glVertex3iv
extern void (OGL_FUNCPTR *_ogl_glVertex3s)(GLshort x, GLshort y, GLshort z);
#define glVertex3s _ogl_glVertex3s
extern void (OGL_FUNCPTR *_ogl_glVertex3sv)(const GLshort * v);
#define glVertex3sv _ogl_glVertex3sv
extern void (OGL_FUNCPTR *_ogl_glVertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#define glVertex4d _ogl_glVertex4d
extern void (OGL_FUNCPTR *_ogl_glVertex4dv)(const GLdouble * v);
#define glVertex4dv _ogl_glVertex4dv
extern void (OGL_FUNCPTR *_ogl_glVertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
#define glVertex4f _ogl_glVertex4f
extern void (OGL_FUNCPTR *_ogl_glVertex4fv)(const GLfloat * v);
#define glVertex4fv _ogl_glVertex4fv
extern void (OGL_FUNCPTR *_ogl_glVertex4i)(GLint x, GLint y, GLint z, GLint w);
#define glVertex4i _ogl_glVertex4i
extern void (OGL_FUNCPTR *_ogl_glVertex4iv)(const GLint * v);
#define glVertex4iv _ogl_glVertex4iv
extern void (OGL_FUNCPTR *_ogl_glVertex4s)(GLshort x, GLshort y, GLshort z, GLshort w);
#define glVertex4s _ogl_glVertex4s
extern void (OGL_FUNCPTR *_ogl_glVertex4sv)(const GLshort * v);
#define glVertex4sv _ogl_glVertex4sv
extern GLboolean (OGL_FUNCPTR *_ogl_glAreTexturesResident)(GLsizei n, const GLuint * textures, GLboolean * residences);
#define glAreTexturesResident _ogl_glAreTexturesResident
extern void (OGL_FUNCPTR *_ogl_glArrayElement)(GLint i);
#define glArrayElement _ogl_glArrayElement
extern void (OGL_FUNCPTR *_ogl_glColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
#define glColorPointer _ogl_glColorPointer
extern void (OGL_FUNCPTR *_ogl_glDisableClientState)(GLenum ren_array);
#define glDisableClientState _ogl_glDisableClientState
extern void (OGL_FUNCPTR *_ogl_glEdgeFlagPointer)(GLsizei stride, const void * pointer);
#define glEdgeFlagPointer _ogl_glEdgeFlagPointer
extern void (OGL_FUNCPTR *_ogl_glEnableClientState)(GLenum ren_array);
#define glEnableClientState _ogl_glEnableClientState
extern void (OGL_FUNCPTR *_ogl_glGetPointerv)(GLenum pname, void ** params);
#define glGetPointerv _ogl_glGetPointerv
extern void (OGL_FUNCPTR *_ogl_glIndexPointer)(GLenum type, GLsizei stride, const void * pointer);
#define glIndexPointer _ogl_glIndexPointer
extern void (OGL_FUNCPTR *_ogl_glIndexub)(GLubyte c);
#define glIndexub _ogl_glIndexub
extern void (OGL_FUNCPTR *_ogl_glIndexubv)(const GLubyte * c);
#define glIndexubv _ogl_glIndexubv
extern void (OGL_FUNCPTR *_ogl_glInterleavedArrays)(GLenum format, GLsizei stride, const void * pointer);
#define glInterleavedArrays _ogl_glInterleavedArrays
extern void (OGL_FUNCPTR *_ogl_glNormalPointer)(GLenum type, GLsizei stride, const void * pointer);
#define glNormalPointer _ogl_glNormalPointer
extern void (OGL_FUNCPTR *_ogl_glPopClientAttrib)(void);
#define glPopClientAttrib _ogl_glPopClientAttrib
extern void (OGL_FUNCPTR *_ogl_glPrioritizeTextures)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
#define glPrioritizeTextures _ogl_glPrioritizeTextures
extern void (OGL_FUNCPTR *_ogl_glPushClientAttrib)(GLbitfield mask);
#define glPushClientAttrib _ogl_glPushClientAttrib
extern void (OGL_FUNCPTR *_ogl_glTexCoordPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
#define glTexCoordPointer _ogl_glTexCoordPointer
extern void (OGL_FUNCPTR *_ogl_glVertexPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
#define glVertexPointer _ogl_glVertexPointer
extern void (OGL_FUNCPTR *_ogl_glClientActiveTexture)(GLenum texture);
#define glClientActiveTexture _ogl_glClientActiveTexture
extern void (OGL_FUNCPTR *_ogl_glLoadTransposeMatrixd)(const GLdouble * m);
#define glLoadTransposeMatrixd _ogl_glLoadTransposeMatrixd
extern void (OGL_FUNCPTR *_ogl_glLoadTransposeMatrixf)(const GLfloat * m);
#define glLoadTransposeMatrixf _ogl_glLoadTransposeMatrixf
extern void (OGL_FUNCPTR *_ogl_glMultTransposeMatrixd)(const GLdouble * m);
#define glMultTransposeMatrixd _ogl_glMultTransposeMatrixd
extern void (OGL_FUNCPTR *_ogl_glMultTransposeMatrixf)(const GLfloat * m);
#define glMultTransposeMatrixf _ogl_glMultTransposeMatrixf
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord1d)(GLenum target, GLdouble s);
#define glMultiTexCoord1d _ogl_glMultiTexCoord1d
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord1dv)(GLenum target, const GLdouble * v);
#define glMultiTexCoord1dv _ogl_glMultiTexCoord1dv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord1f)(GLenum target, GLfloat s);
#define glMultiTexCoord1f _ogl_glMultiTexCoord1f
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord1fv)(GLenum target, const GLfloat * v);
#define glMultiTexCoord1fv _ogl_glMultiTexCoord1fv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord1i)(GLenum target, GLint s);
#define glMultiTexCoord1i _ogl_glMultiTexCoord1i
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord1iv)(GLenum target, const GLint * v);
#define glMultiTexCoord1iv _ogl_glMultiTexCoord1iv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord1s)(GLenum target, GLshort s);
#define glMultiTexCoord1s _ogl_glMultiTexCoord1s
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord1sv)(GLenum target, const GLshort * v);
#define glMultiTexCoord1sv _ogl_glMultiTexCoord1sv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t);
#define glMultiTexCoord2d _ogl_glMultiTexCoord2d
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord2dv)(GLenum target, const GLdouble * v);
#define glMultiTexCoord2dv _ogl_glMultiTexCoord2dv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t);
#define glMultiTexCoord2f _ogl_glMultiTexCoord2f
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord2fv)(GLenum target, const GLfloat * v);
#define glMultiTexCoord2fv _ogl_glMultiTexCoord2fv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord2i)(GLenum target, GLint s, GLint t);
#define glMultiTexCoord2i _ogl_glMultiTexCoord2i
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord2iv)(GLenum target, const GLint * v);
#define glMultiTexCoord2iv _ogl_glMultiTexCoord2iv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord2s)(GLenum target, GLshort s, GLshort t);
#define glMultiTexCoord2s _ogl_glMultiTexCoord2s
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord2sv)(GLenum target, const GLshort * v);
#define glMultiTexCoord2sv _ogl_glMultiTexCoord2sv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
#define glMultiTexCoord3d _ogl_glMultiTexCoord3d
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord3dv)(GLenum target, const GLdouble * v);
#define glMultiTexCoord3dv _ogl_glMultiTexCoord3dv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
#define glMultiTexCoord3f _ogl_glMultiTexCoord3f
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord3fv)(GLenum target, const GLfloat * v);
#define glMultiTexCoord3fv _ogl_glMultiTexCoord3fv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r);
#define glMultiTexCoord3i _ogl_glMultiTexCoord3i
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord3iv)(GLenum target, const GLint * v);
#define glMultiTexCoord3iv _ogl_glMultiTexCoord3iv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r);
#define glMultiTexCoord3s _ogl_glMultiTexCoord3s
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord3sv)(GLenum target, const GLshort * v);
#define glMultiTexCoord3sv _ogl_glMultiTexCoord3sv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
#define glMultiTexCoord4d _ogl_glMultiTexCoord4d
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord4dv)(GLenum target, const GLdouble * v);
#define glMultiTexCoord4dv _ogl_glMultiTexCoord4dv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
#define glMultiTexCoord4f _ogl_glMultiTexCoord4f
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord4fv)(GLenum target, const GLfloat * v);
#define glMultiTexCoord4fv _ogl_glMultiTexCoord4fv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q);
#define glMultiTexCoord4i _ogl_glMultiTexCoord4i
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord4iv)(GLenum target, const GLint * v);
#define glMultiTexCoord4iv _ogl_glMultiTexCoord4iv
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
#define glMultiTexCoord4s _ogl_glMultiTexCoord4s
extern void (OGL_FUNCPTR *_ogl_glMultiTexCoord4sv)(GLenum target, const GLshort * v);
#define glMultiTexCoord4sv _ogl_glMultiTexCoord4sv
extern void (OGL_FUNCPTR *_ogl_glFogCoordPointer)(GLenum type, GLsizei stride, const void * pointer);
#define glFogCoordPointer _ogl_glFogCoordPointer
extern void (OGL_FUNCPTR *_ogl_glFogCoordd)(GLdouble coord);
#define glFogCoordd _ogl_glFogCoordd
extern void (OGL_FUNCPTR *_ogl_glFogCoorddv)(const GLdouble * coord);
#define glFogCoorddv _ogl_glFogCoorddv
extern void (OGL_FUNCPTR *_ogl_glFogCoordf)(GLfloat coord);
#define glFogCoordf _ogl_glFogCoordf
extern void (OGL_FUNCPTR *_ogl_glFogCoordfv)(const GLfloat * coord);
#define glFogCoordfv _ogl_glFogCoordfv
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue);
#define glSecondaryColor3b _ogl_glSecondaryColor3b
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3bv)(const GLbyte * v);
#define glSecondaryColor3bv _ogl_glSecondaryColor3bv
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue);
#define glSecondaryColor3d _ogl_glSecondaryColor3d
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3dv)(const GLdouble * v);
#define glSecondaryColor3dv _ogl_glSecondaryColor3dv
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue);
#define glSecondaryColor3f _ogl_glSecondaryColor3f
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3fv)(const GLfloat * v);
#define glSecondaryColor3fv _ogl_glSecondaryColor3fv
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3i)(GLint red, GLint green, GLint blue);
#define glSecondaryColor3i _ogl_glSecondaryColor3i
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3iv)(const GLint * v);
#define glSecondaryColor3iv _ogl_glSecondaryColor3iv
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3s)(GLshort red, GLshort green, GLshort blue);
#define glSecondaryColor3s _ogl_glSecondaryColor3s
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3sv)(const GLshort * v);
#define glSecondaryColor3sv _ogl_glSecondaryColor3sv
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
#define glSecondaryColor3ub _ogl_glSecondaryColor3ub
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3ubv)(const GLubyte * v);
#define glSecondaryColor3ubv _ogl_glSecondaryColor3ubv
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3ui)(GLuint red, GLuint green, GLuint blue);
#define glSecondaryColor3ui _ogl_glSecondaryColor3ui
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3uiv)(const GLuint * v);
#define glSecondaryColor3uiv _ogl_glSecondaryColor3uiv
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3us)(GLushort red, GLushort green, GLushort blue);
#define glSecondaryColor3us _ogl_glSecondaryColor3us
extern void (OGL_FUNCPTR *_ogl_glSecondaryColor3usv)(const GLushort * v);
#define glSecondaryColor3usv _ogl_glSecondaryColor3usv
extern void (OGL_FUNCPTR *_ogl_glSecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
#define glSecondaryColorPointer _ogl_glSecondaryColorPointer
extern void (OGL_FUNCPTR *_ogl_glWindowPos2d)(GLdouble x, GLdouble y);
#define glWindowPos2d _ogl_glWindowPos2d
extern void (OGL_FUNCPTR *_ogl_glWindowPos2dv)(const GLdouble * v);
#define glWindowPos2dv _ogl_glWindowPos2dv
extern void (OGL_FUNCPTR *_ogl_glWindowPos2f)(GLfloat x, GLfloat y);
#define glWindowPos2f _ogl_glWindowPos2f
extern void (OGL_FUNCPTR *_ogl_glWindowPos2fv)(const GLfloat * v);
#define glWindowPos2fv _ogl_glWindowPos2fv
extern void (OGL_FUNCPTR *_ogl_glWindowPos2i)(GLint x, GLint y);
#define glWindowPos2i _ogl_glWindowPos2i
extern void (OGL_FUNCPTR *_ogl_glWindowPos2iv)(const GLint * v);
#define glWindowPos2iv _ogl_glWindowPos2iv
extern void (OGL_FUNCPTR *_ogl_glWindowPos2s)(GLshort x, GLshort y);
#define glWindowPos2s _ogl_glWindowPos2s
extern void (OGL_FUNCPTR *_ogl_glWindowPos2sv)(const GLshort * v);
#define glWindowPos2sv _ogl_glWindowPos2sv
extern void (OGL_FUNCPTR *_ogl_glWindowPos3d)(GLdouble x, GLdouble y, GLdouble z);
#define glWindowPos3d _ogl_glWindowPos3d
extern void (OGL_FUNCPTR *_ogl_glWindowPos3dv)(const GLdouble * v);
#define glWindowPos3dv _ogl_glWindowPos3dv
extern void (OGL_FUNCPTR *_ogl_glWindowPos3f)(GLfloat x, GLfloat y, GLfloat z);
#define glWindowPos3f _ogl_glWindowPos3f
extern void (OGL_FUNCPTR *_ogl_glWindowPos3fv)(const GLfloat * v);
#define glWindowPos3fv _ogl_glWindowPos3fv
extern void (OGL_FUNCPTR *_ogl_glWindowPos3i)(GLint x, GLint y, GLint z);
#define glWindowPos3i _ogl_glWindowPos3i
extern void (OGL_FUNCPTR *_ogl_glWindowPos3iv)(const GLint * v);
#define glWindowPos3iv _ogl_glWindowPos3iv
extern void (OGL_FUNCPTR *_ogl_glWindowPos3s)(GLshort x, GLshort y, GLshort z);
#define glWindowPos3s _ogl_glWindowPos3s
extern void (OGL_FUNCPTR *_ogl_glWindowPos3sv)(const GLshort * v);
#define glWindowPos3sv _ogl_glWindowPos3sv
#endif /* OGL_COMPATIBILITY */

int ogl_init(void);


#ifdef OGL_IMPLEMENTATION

#if defined(__APPLE__)
#include <dlfcn.h>

static void* apple_gl_get_proc_address (const char *name)
{
	static void* image = NULL;
	
	if (NULL == image)
		image = dlopen("/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL", RTLD_LAZY);

	return (image ? dlsym(image, name) : NULL);
}
#endif /* __APPLE__ */

#if defined(__sgi) || defined (__sun)
#include <dlfcn.h>
#include <stdio.h>

static void* sun_get_proc_address (const GLubyte* name)
{
  static void* h = NULL;
  static void* gpa;

  if (h == NULL)
  {
    if ((h = dlopen(NULL, RTLD_LAZY | RTLD_LOCAL)) == NULL) return NULL;
    gpa = dlsym(h, "glXGetProcAddress");
  }

  if (gpa != NULL)
    return ((void*(*)(const GLubyte*))gpa)(name);
  else
    return dlsym(h, (const char*)name);
}
#endif /* __sgi || __sun */

#if defined(_WIN32)

#ifdef _MSC_VER
#pragma warning(disable: 4996)
#pragma warning(disable: 4054)
#pragma warning(disable: 4191)
#pragma warning(disable: 4996)
#endif

static int test_pointer(const PROC pTest)
{
	ptrdiff_t iTest;
	if(!pTest) return 0;
	iTest = (ptrdiff_t)pTest;
	
	if(iTest == 1 || iTest == 2 || iTest == 3 || iTest == -1) return 0;
	
	return 1;
}

static PROC win_get_proc_address(const char *name)
{
	HMODULE glMod = NULL;
	PROC pFunc = wglGetProcAddress((LPCSTR)name);
	if(test_pointer(pFunc))
	{
		return pFunc;
	}
	glMod = GetModuleHandleA("OpenGL32.dll");
	return (PROC)GetProcAddress(glMod, (LPCSTR)name);
}
	
#define ogl_get_proc_address(name) win_get_proc_address(name)
#else
	#if defined(__APPLE__)
		#define ogl_get_proc_address(name) apple_gl_get_proc_address(name)
	#else
		#if defined(__sgi) || defined(__sun)
			#define ogl_get_proc_address(name) sun_get_proc_address(name)
		#else /* GLX */
		    #include <GL/glx.h>

			#define ogl_get_proc_address(name) (*glXGetProcAddressARB)((const GLubyte*)name)
		#endif
	#endif
#endif

void (OGL_FUNCPTR *_ogl_glBlendFunc)(GLenum sfactor, GLenum dfactor) = NULL;
void (OGL_FUNCPTR *_ogl_glClear)(GLbitfield mask) = NULL;
void (OGL_FUNCPTR *_ogl_glClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glClearDepth)(GLdouble depth) = NULL;
void (OGL_FUNCPTR *_ogl_glClearStencil)(GLint s) = NULL;
void (OGL_FUNCPTR *_ogl_glColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glCullFace)(GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glDepthFunc)(GLenum func) = NULL;
void (OGL_FUNCPTR *_ogl_glDepthMask)(GLboolean flag) = NULL;
void (OGL_FUNCPTR *_ogl_glDepthRange)(GLdouble ren_near, GLdouble ren_far) = NULL;
void (OGL_FUNCPTR *_ogl_glDisable)(GLenum cap) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawBuffer)(GLenum buf) = NULL;
void (OGL_FUNCPTR *_ogl_glEnable)(GLenum cap) = NULL;
void (OGL_FUNCPTR *_ogl_glFinish)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glFlush)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glFrontFace)(GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glGetBooleanv)(GLenum pname, GLboolean * data) = NULL;
void (OGL_FUNCPTR *_ogl_glGetDoublev)(GLenum pname, GLdouble * data) = NULL;
GLenum (OGL_FUNCPTR *_ogl_glGetError)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glGetFloatv)(GLenum pname, GLfloat * data) = NULL;
void (OGL_FUNCPTR *_ogl_glGetIntegerv)(GLenum pname, GLint * data) = NULL;
const GLubyte * (OGL_FUNCPTR *_ogl_glGetString)(GLenum name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexParameterfv)(GLenum target, GLenum pname, GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexParameteriv)(GLenum target, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glHint)(GLenum target, GLenum mode) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsEnabled)(GLenum cap) = NULL;
void (OGL_FUNCPTR *_ogl_glLineWidth)(GLfloat width) = NULL;
void (OGL_FUNCPTR *_ogl_glLogicOp)(GLenum opcode) = NULL;
void (OGL_FUNCPTR *_ogl_glPixelStoref)(GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glPixelStorei)(GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glPointSize)(GLfloat size) = NULL;
void (OGL_FUNCPTR *_ogl_glPolygonMode)(GLenum face, GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glReadBuffer)(GLenum src) = NULL;
void (OGL_FUNCPTR *_ogl_glReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) = NULL;
void (OGL_FUNCPTR *_ogl_glScissor)(GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void (OGL_FUNCPTR *_ogl_glStencilFunc)(GLenum func, GLint ref, GLuint mask) = NULL;
void (OGL_FUNCPTR *_ogl_glStencilMask)(GLuint mask) = NULL;
void (OGL_FUNCPTR *_ogl_glStencilOp)(GLenum fail, GLenum zfail, GLenum zpass) = NULL;
void (OGL_FUNCPTR *_ogl_glTexImage1D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) = NULL;
void (OGL_FUNCPTR *_ogl_glTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) = NULL;
void (OGL_FUNCPTR *_ogl_glTexParameterf)(GLenum target, GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glTexParameterfv)(GLenum target, GLenum pname, const GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glTexParameteri)(GLenum target, GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glTexParameteriv)(GLenum target, GLenum pname, const GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glViewport)(GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void (OGL_FUNCPTR *_ogl_glBindTexture)(GLenum target, GLuint texture) = NULL;
void (OGL_FUNCPTR *_ogl_glCopyTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) = NULL;
void (OGL_FUNCPTR *_ogl_glCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = NULL;
void (OGL_FUNCPTR *_ogl_glCopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = NULL;
void (OGL_FUNCPTR *_ogl_glCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteTextures)(GLsizei n, const GLuint * textures) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawArrays)(GLenum mode, GLint first, GLsizei count) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawElements)(GLenum mode, GLsizei count, GLenum type, const void * indices) = NULL;
void (OGL_FUNCPTR *_ogl_glGenTextures)(GLsizei n, GLuint * textures) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsTexture)(GLuint texture) = NULL;
void (OGL_FUNCPTR *_ogl_glPolygonOffset)(GLfloat factor, GLfloat units) = NULL;
void (OGL_FUNCPTR *_ogl_glTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) = NULL;
void (OGL_FUNCPTR *_ogl_glTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) = NULL;
void (OGL_FUNCPTR *_ogl_glCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) = NULL;
void (OGL_FUNCPTR *_ogl_glTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) = NULL;
void (OGL_FUNCPTR *_ogl_glTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) = NULL;
void (OGL_FUNCPTR *_ogl_glActiveTexture)(GLenum texture) = NULL;
void (OGL_FUNCPTR *_ogl_glCompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) = NULL;
void (OGL_FUNCPTR *_ogl_glCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) = NULL;
void (OGL_FUNCPTR *_ogl_glCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) = NULL;
void (OGL_FUNCPTR *_ogl_glCompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) = NULL;
void (OGL_FUNCPTR *_ogl_glCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) = NULL;
void (OGL_FUNCPTR *_ogl_glCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) = NULL;
void (OGL_FUNCPTR *_ogl_glGetCompressedTexImage)(GLenum target, GLint level, void * img) = NULL;
void (OGL_FUNCPTR *_ogl_glSampleCoverage)(GLfloat value, GLboolean invert) = NULL;
void (OGL_FUNCPTR *_ogl_glBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glBlendEquation)(GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiDrawArrays)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiDrawElements)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) = NULL;
void (OGL_FUNCPTR *_ogl_glPointParameterf)(GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glPointParameterfv)(GLenum pname, const GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glPointParameteri)(GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glPointParameteriv)(GLenum pname, const GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glBeginQuery)(GLenum target, GLuint id) = NULL;
void (OGL_FUNCPTR *_ogl_glBindBuffer)(GLenum target, GLuint buffer) = NULL;
void (OGL_FUNCPTR *_ogl_glBufferData)(GLenum target, GLsizeiptr size, const void * data, GLenum usage) = NULL;
void (OGL_FUNCPTR *_ogl_glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteBuffers)(GLsizei n, const GLuint * buffers) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteQueries)(GLsizei n, const GLuint * ids) = NULL;
void (OGL_FUNCPTR *_ogl_glEndQuery)(GLenum target) = NULL;
void (OGL_FUNCPTR *_ogl_glGenBuffers)(GLsizei n, GLuint * buffers) = NULL;
void (OGL_FUNCPTR *_ogl_glGenQueries)(GLsizei n, GLuint * ids) = NULL;
void (OGL_FUNCPTR *_ogl_glGetBufferParameteriv)(GLenum target, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetBufferPointerv)(GLenum target, GLenum pname, void ** params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void * data) = NULL;
void (OGL_FUNCPTR *_ogl_glGetQueryObjectiv)(GLuint id, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetQueryiv)(GLenum target, GLenum pname, GLint * params) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsBuffer)(GLuint buffer) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsQuery)(GLuint id) = NULL;
void * (OGL_FUNCPTR *_ogl_glMapBuffer)(GLenum target, GLenum access) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glUnmapBuffer)(GLenum target) = NULL;
void (OGL_FUNCPTR *_ogl_glAttachShader)(GLuint program, GLuint shader) = NULL;
void (OGL_FUNCPTR *_ogl_glBindAttribLocation)(GLuint program, GLuint index, const GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha) = NULL;
void (OGL_FUNCPTR *_ogl_glCompileShader)(GLuint shader) = NULL;
GLuint (OGL_FUNCPTR *_ogl_glCreateProgram)(void) = NULL;
GLuint (OGL_FUNCPTR *_ogl_glCreateShader)(GLenum type) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteProgram)(GLuint program) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteShader)(GLuint shader) = NULL;
void (OGL_FUNCPTR *_ogl_glDetachShader)(GLuint program, GLuint shader) = NULL;
void (OGL_FUNCPTR *_ogl_glDisableVertexAttribArray)(GLuint index) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawBuffers)(GLsizei n, const GLenum * bufs) = NULL;
void (OGL_FUNCPTR *_ogl_glEnableVertexAttribArray)(GLuint index) = NULL;
void (OGL_FUNCPTR *_ogl_glGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) = NULL;
GLint (OGL_FUNCPTR *_ogl_glGetAttribLocation)(GLuint program, const GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) = NULL;
void (OGL_FUNCPTR *_ogl_glGetProgramiv)(GLuint program, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) = NULL;
void (OGL_FUNCPTR *_ogl_glGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) = NULL;
void (OGL_FUNCPTR *_ogl_glGetShaderiv)(GLuint shader, GLenum pname, GLint * params) = NULL;
GLint (OGL_FUNCPTR *_ogl_glGetUniformLocation)(GLuint program, const GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetUniformfv)(GLuint program, GLint location, GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetUniformiv)(GLuint program, GLint location, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetVertexAttribPointerv)(GLuint index, GLenum pname, void ** pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glGetVertexAttribdv)(GLuint index, GLenum pname, GLdouble * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetVertexAttribiv)(GLuint index, GLenum pname, GLint * params) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsProgram)(GLuint program) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsShader)(GLuint shader) = NULL;
void (OGL_FUNCPTR *_ogl_glLinkProgram)(GLuint program) = NULL;
void (OGL_FUNCPTR *_ogl_glShaderSource)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) = NULL;
void (OGL_FUNCPTR *_ogl_glStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask) = NULL;
void (OGL_FUNCPTR *_ogl_glStencilMaskSeparate)(GLenum face, GLuint mask) = NULL;
void (OGL_FUNCPTR *_ogl_glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform1f)(GLint location, GLfloat v0) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform1fv)(GLint location, GLsizei count, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform1i)(GLint location, GLint v0) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform1iv)(GLint location, GLsizei count, const GLint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform2f)(GLint location, GLfloat v0, GLfloat v1) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform2fv)(GLint location, GLsizei count, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform2i)(GLint location, GLint v0, GLint v1) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform2iv)(GLint location, GLsizei count, const GLint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform3fv)(GLint location, GLsizei count, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform3i)(GLint location, GLint v0, GLint v1, GLint v2) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform3iv)(GLint location, GLsizei count, const GLint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform4fv)(GLint location, GLsizei count, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform4iv)(GLint location, GLsizei count, const GLint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUseProgram)(GLuint program) = NULL;
void (OGL_FUNCPTR *_ogl_glValidateProgram)(GLuint program) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib1d)(GLuint index, GLdouble x) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib1dv)(GLuint index, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib1f)(GLuint index, GLfloat x) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib1fv)(GLuint index, const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib1s)(GLuint index, GLshort x) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib1sv)(GLuint index, const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib2d)(GLuint index, GLdouble x, GLdouble y) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib2dv)(GLuint index, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib2fv)(GLuint index, const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib2s)(GLuint index, GLshort x, GLshort y) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib2sv)(GLuint index, const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib3dv)(GLuint index, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib3fv)(GLuint index, const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib3sv)(GLuint index, const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nbv)(GLuint index, const GLbyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4Niv)(GLuint index, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nsv)(GLuint index, const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nubv)(GLuint index, const GLubyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nuiv)(GLuint index, const GLuint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4Nusv)(GLuint index, const GLushort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4bv)(GLuint index, const GLbyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4dv)(GLuint index, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4fv)(GLuint index, const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4iv)(GLuint index, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4sv)(GLuint index, const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4ubv)(GLuint index, const GLubyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4uiv)(GLuint index, const GLuint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttrib4usv)(GLuint index, const GLushort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glBeginConditionalRender)(GLuint id, GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glBeginTransformFeedback)(GLenum primitiveMode) = NULL;
void (OGL_FUNCPTR *_ogl_glBindBufferBase)(GLenum target, GLuint index, GLuint buffer) = NULL;
void (OGL_FUNCPTR *_ogl_glBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) = NULL;
void (OGL_FUNCPTR *_ogl_glBindFragDataLocation)(GLuint program, GLuint color, const GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glBindFramebuffer)(GLenum target, GLuint framebuffer) = NULL;
void (OGL_FUNCPTR *_ogl_glBindRenderbuffer)(GLenum target, GLuint renderbuffer) = NULL;
void (OGL_FUNCPTR *_ogl_glBindVertexArray)(GLuint ren_array) = NULL;
void (OGL_FUNCPTR *_ogl_glBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) = NULL;
GLenum (OGL_FUNCPTR *_ogl_glCheckFramebufferStatus)(GLenum target) = NULL;
void (OGL_FUNCPTR *_ogl_glClampColor)(GLenum target, GLenum clamp) = NULL;
void (OGL_FUNCPTR *_ogl_glClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) = NULL;
void (OGL_FUNCPTR *_ogl_glClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteFramebuffers)(GLsizei n, const GLuint * framebuffers) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteRenderbuffers)(GLsizei n, const GLuint * renderbuffers) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteVertexArrays)(GLsizei n, const GLuint * arrays) = NULL;
void (OGL_FUNCPTR *_ogl_glDisablei)(GLenum target, GLuint index) = NULL;
void (OGL_FUNCPTR *_ogl_glEnablei)(GLenum target, GLuint index) = NULL;
void (OGL_FUNCPTR *_ogl_glEndConditionalRender)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glEndTransformFeedback)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length) = NULL;
void (OGL_FUNCPTR *_ogl_glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = NULL;
void (OGL_FUNCPTR *_ogl_glFramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = NULL;
void (OGL_FUNCPTR *_ogl_glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = NULL;
void (OGL_FUNCPTR *_ogl_glFramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) = NULL;
void (OGL_FUNCPTR *_ogl_glFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) = NULL;
void (OGL_FUNCPTR *_ogl_glGenFramebuffers)(GLsizei n, GLuint * framebuffers) = NULL;
void (OGL_FUNCPTR *_ogl_glGenRenderbuffers)(GLsizei n, GLuint * renderbuffers) = NULL;
void (OGL_FUNCPTR *_ogl_glGenVertexArrays)(GLsizei n, GLuint * arrays) = NULL;
void (OGL_FUNCPTR *_ogl_glGenerateMipmap)(GLenum target) = NULL;
void (OGL_FUNCPTR *_ogl_glGetBooleani_v)(GLenum target, GLuint index, GLboolean * data) = NULL;
GLint (OGL_FUNCPTR *_ogl_glGetFragDataLocation)(GLuint program, const GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetIntegeri_v)(GLenum target, GLuint index, GLint * data) = NULL;
void (OGL_FUNCPTR *_ogl_glGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint * params) = NULL;
const GLubyte * (OGL_FUNCPTR *_ogl_glGetStringi)(GLenum name, GLuint index) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexParameterIiv)(GLenum target, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetUniformuiv)(GLuint program, GLint location, GLuint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetVertexAttribIiv)(GLuint index, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint * params) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsEnabledi)(GLenum target, GLuint index) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsFramebuffer)(GLuint framebuffer) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsRenderbuffer)(GLuint renderbuffer) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsVertexArray)(GLuint ren_array) = NULL;
void * (OGL_FUNCPTR *_ogl_glMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) = NULL;
void (OGL_FUNCPTR *_ogl_glRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) = NULL;
void (OGL_FUNCPTR *_ogl_glRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = NULL;
void (OGL_FUNCPTR *_ogl_glTexParameterIiv)(GLenum target, GLenum pname, const GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glTexParameterIuiv)(GLenum target, GLenum pname, const GLuint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform1ui)(GLint location, GLuint v0) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform1uiv)(GLint location, GLsizei count, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform2ui)(GLint location, GLuint v0, GLuint v1) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform2uiv)(GLint location, GLsizei count, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform3uiv)(GLint location, GLsizei count, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform4uiv)(GLint location, GLsizei count, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI1i)(GLuint index, GLint x) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI1iv)(GLuint index, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI1ui)(GLuint index, GLuint x) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI1uiv)(GLuint index, const GLuint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI2i)(GLuint index, GLint x, GLint y) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI2iv)(GLuint index, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI2ui)(GLuint index, GLuint x, GLuint y) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI2uiv)(GLuint index, const GLuint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI3iv)(GLuint index, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI3uiv)(GLuint index, const GLuint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI4bv)(GLuint index, const GLbyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI4iv)(GLuint index, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI4sv)(GLuint index, const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI4ubv)(GLuint index, const GLubyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI4uiv)(GLuint index, const GLuint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribI4usv)(GLuint index, const GLushort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) = NULL;
void (OGL_FUNCPTR *_ogl_glGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) = NULL;
void (OGL_FUNCPTR *_ogl_glGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetActiveUniformName)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) = NULL;
void (OGL_FUNCPTR *_ogl_glGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) = NULL;
GLuint (OGL_FUNCPTR *_ogl_glGetUniformBlockIndex)(GLuint program, const GLchar * uniformBlockName) = NULL;
void (OGL_FUNCPTR *_ogl_glGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) = NULL;
void (OGL_FUNCPTR *_ogl_glPrimitiveRestartIndex)(GLuint index) = NULL;
void (OGL_FUNCPTR *_ogl_glTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) = NULL;
GLenum (OGL_FUNCPTR *_ogl_glClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteSync)(GLsync sync) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) = NULL;
GLsync (OGL_FUNCPTR *_ogl_glFenceSync)(GLenum condition, GLbitfield flags) = NULL;
void (OGL_FUNCPTR *_ogl_glFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level) = NULL;
void (OGL_FUNCPTR *_ogl_glGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetInteger64i_v)(GLenum target, GLuint index, GLint64 * data) = NULL;
void (OGL_FUNCPTR *_ogl_glGetInteger64v)(GLenum pname, GLint64 * data) = NULL;
void (OGL_FUNCPTR *_ogl_glGetMultisamplefv)(GLenum pname, GLuint index, GLfloat * val) = NULL;
void (OGL_FUNCPTR *_ogl_glGetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsSync)(GLsync sync) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiDrawElementsBaseVertex)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) = NULL;
void (OGL_FUNCPTR *_ogl_glProvokingVertex)(GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glSampleMaski)(GLuint maskNumber, GLbitfield mask) = NULL;
void (OGL_FUNCPTR *_ogl_glTexImage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = NULL;
void (OGL_FUNCPTR *_ogl_glTexImage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = NULL;
void (OGL_FUNCPTR *_ogl_glWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout) = NULL;
void (OGL_FUNCPTR *_ogl_glBindFragDataLocationIndexed)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glBindSampler)(GLuint unit, GLuint sampler) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteSamplers)(GLsizei count, const GLuint * samplers) = NULL;
void (OGL_FUNCPTR *_ogl_glGenSamplers)(GLsizei count, GLuint * samplers) = NULL;
GLint (OGL_FUNCPTR *_ogl_glGetFragDataIndex)(GLuint program, const GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetQueryObjecti64v)(GLuint id, GLenum pname, GLint64 * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetQueryObjectui64v)(GLuint id, GLenum pname, GLuint64 * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint * params) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsSampler)(GLuint sampler) = NULL;
void (OGL_FUNCPTR *_ogl_glQueryCounter)(GLuint id, GLenum target) = NULL;
void (OGL_FUNCPTR *_ogl_glSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint * param) = NULL;
void (OGL_FUNCPTR *_ogl_glSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint * param) = NULL;
void (OGL_FUNCPTR *_ogl_glSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat * param) = NULL;
void (OGL_FUNCPTR *_ogl_glSamplerParameteri)(GLuint sampler, GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint * param) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribDivisor)(GLuint index, GLuint divisor) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribP1ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribP1uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribP2ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribP2uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribP3ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribP3uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribP4ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribP4uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glBeginQueryIndexed)(GLenum target, GLuint index, GLuint id) = NULL;
void (OGL_FUNCPTR *_ogl_glBindTransformFeedback)(GLenum target, GLuint id) = NULL;
void (OGL_FUNCPTR *_ogl_glBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha) = NULL;
void (OGL_FUNCPTR *_ogl_glBlendEquationi)(GLuint buf, GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) = NULL;
void (OGL_FUNCPTR *_ogl_glBlendFunci)(GLuint buf, GLenum src, GLenum dst) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteTransformFeedbacks)(GLsizei n, const GLuint * ids) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawArraysIndirect)(GLenum mode, const void * indirect) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawTransformFeedback)(GLenum mode, GLuint id) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream) = NULL;
void (OGL_FUNCPTR *_ogl_glEndQueryIndexed)(GLenum target, GLuint index) = NULL;
void (OGL_FUNCPTR *_ogl_glGenTransformFeedbacks)(GLsizei n, GLuint * ids) = NULL;
void (OGL_FUNCPTR *_ogl_glGetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) = NULL;
void (OGL_FUNCPTR *_ogl_glGetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint * values) = NULL;
void (OGL_FUNCPTR *_ogl_glGetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint * params) = NULL;
GLuint (OGL_FUNCPTR *_ogl_glGetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar * name) = NULL;
GLint (OGL_FUNCPTR *_ogl_glGetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar * name) = NULL;
void (OGL_FUNCPTR *_ogl_glGetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetUniformdv)(GLuint program, GLint location, GLdouble * params) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsTransformFeedback)(GLuint id) = NULL;
void (OGL_FUNCPTR *_ogl_glMinSampleShading)(GLfloat value) = NULL;
void (OGL_FUNCPTR *_ogl_glPatchParameterfv)(GLenum pname, const GLfloat * values) = NULL;
void (OGL_FUNCPTR *_ogl_glPatchParameteri)(GLenum pname, GLint value) = NULL;
void (OGL_FUNCPTR *_ogl_glPauseTransformFeedback)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glResumeTransformFeedback)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform1d)(GLint location, GLdouble x) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform1dv)(GLint location, GLsizei count, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform2d)(GLint location, GLdouble x, GLdouble y) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform2dv)(GLint location, GLsizei count, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform3dv)(GLint location, GLsizei count, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void (OGL_FUNCPTR *_ogl_glUniform4dv)(GLint location, GLsizei count, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glUniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint * indices) = NULL;
void (OGL_FUNCPTR *_ogl_glActiveShaderProgram)(GLuint pipeline, GLuint program) = NULL;
void (OGL_FUNCPTR *_ogl_glBindProgramPipeline)(GLuint pipeline) = NULL;
void (OGL_FUNCPTR *_ogl_glClearDepthf)(GLfloat d) = NULL;
GLuint (OGL_FUNCPTR *_ogl_glCreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const* strings) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteProgramPipelines)(GLsizei n, const GLuint * pipelines) = NULL;
void (OGL_FUNCPTR *_ogl_glDepthRangeArrayv)(GLuint first, GLsizei count, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glDepthRangeIndexed)(GLuint index, GLdouble n, GLdouble f) = NULL;
void (OGL_FUNCPTR *_ogl_glDepthRangef)(GLfloat n, GLfloat f) = NULL;
void (OGL_FUNCPTR *_ogl_glGenProgramPipelines)(GLsizei n, GLuint * pipelines) = NULL;
void (OGL_FUNCPTR *_ogl_glGetDoublei_v)(GLenum target, GLuint index, GLdouble * data) = NULL;
void (OGL_FUNCPTR *_ogl_glGetFloati_v)(GLenum target, GLuint index, GLfloat * data) = NULL;
void (OGL_FUNCPTR *_ogl_glGetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) = NULL;
void (OGL_FUNCPTR *_ogl_glGetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) = NULL;
void (OGL_FUNCPTR *_ogl_glGetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) = NULL;
void (OGL_FUNCPTR *_ogl_glGetVertexAttribLdv)(GLuint index, GLenum pname, GLdouble * params) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsProgramPipeline)(GLuint pipeline) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramBinary)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramParameteri)(GLuint program, GLenum pname, GLint value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform1d)(GLuint program, GLint location, GLdouble v0) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform1dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform1f)(GLuint program, GLint location, GLfloat v0) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform1i)(GLuint program, GLint location, GLint v0) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform1ui)(GLuint program, GLint location, GLuint v0) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform2d)(GLuint program, GLint location, GLdouble v0, GLdouble v1) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform2dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform3d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform3dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform4d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform4dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) = NULL;
void (OGL_FUNCPTR *_ogl_glProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) = NULL;
void (OGL_FUNCPTR *_ogl_glReleaseShaderCompiler)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glScissorArrayv)(GLuint first, GLsizei count, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glScissorIndexed)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) = NULL;
void (OGL_FUNCPTR *_ogl_glScissorIndexedv)(GLuint index, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glShaderBinary)(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length) = NULL;
void (OGL_FUNCPTR *_ogl_glUseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program) = NULL;
void (OGL_FUNCPTR *_ogl_glValidateProgramPipeline)(GLuint pipeline) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribL1d)(GLuint index, GLdouble x) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribL1dv)(GLuint index, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribL2d)(GLuint index, GLdouble x, GLdouble y) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribL2dv)(GLuint index, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribL3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribL3dv)(GLuint index, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribL4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribL4dv)(GLuint index, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexAttribLPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glViewportArrayv)(GLuint first, GLsizei count, const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glViewportIndexedf)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) = NULL;
void (OGL_FUNCPTR *_ogl_glViewportIndexedfv)(GLuint index, const GLfloat * v) = NULL;


#ifdef OGL_COMPATIBILITY
void (OGL_FUNCPTR *_ogl_glAccum)(GLenum op, GLfloat value) = NULL;
void (OGL_FUNCPTR *_ogl_glAlphaFunc)(GLenum func, GLfloat ref) = NULL;
void (OGL_FUNCPTR *_ogl_glBegin)(GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glBitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) = NULL;
void (OGL_FUNCPTR *_ogl_glCallList)(GLuint list) = NULL;
void (OGL_FUNCPTR *_ogl_glCallLists)(GLsizei n, GLenum type, const void * lists) = NULL;
void (OGL_FUNCPTR *_ogl_glClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glClearIndex)(GLfloat c) = NULL;
void (OGL_FUNCPTR *_ogl_glClipPlane)(GLenum plane, const GLdouble * equation) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3b)(GLbyte red, GLbyte green, GLbyte blue) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3bv)(const GLbyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3d)(GLdouble red, GLdouble green, GLdouble blue) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3f)(GLfloat red, GLfloat green, GLfloat blue) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3i)(GLint red, GLint green, GLint blue) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3s)(GLshort red, GLshort green, GLshort blue) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3ub)(GLubyte red, GLubyte green, GLubyte blue) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3ubv)(const GLubyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3ui)(GLuint red, GLuint green, GLuint blue) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3uiv)(const GLuint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3us)(GLushort red, GLushort green, GLushort blue) = NULL;
void (OGL_FUNCPTR *_ogl_glColor3usv)(const GLushort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4bv)(const GLbyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4i)(GLint red, GLint green, GLint blue, GLint alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4ubv)(const GLubyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4uiv)(const GLuint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha) = NULL;
void (OGL_FUNCPTR *_ogl_glColor4usv)(const GLushort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glColorMaterial)(GLenum face, GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glCopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) = NULL;
void (OGL_FUNCPTR *_ogl_glDeleteLists)(GLuint list, GLsizei range) = NULL;
void (OGL_FUNCPTR *_ogl_glDrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) = NULL;
void (OGL_FUNCPTR *_ogl_glEdgeFlag)(GLboolean flag) = NULL;
void (OGL_FUNCPTR *_ogl_glEdgeFlagv)(const GLboolean * flag) = NULL;
void (OGL_FUNCPTR *_ogl_glEnd)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glEndList)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalCoord1d)(GLdouble u) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalCoord1dv)(const GLdouble * u) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalCoord1f)(GLfloat u) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalCoord1fv)(const GLfloat * u) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalCoord2d)(GLdouble u, GLdouble v) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalCoord2dv)(const GLdouble * u) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalCoord2f)(GLfloat u, GLfloat v) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalCoord2fv)(const GLfloat * u) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalMesh1)(GLenum mode, GLint i1, GLint i2) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalPoint1)(GLint i) = NULL;
void (OGL_FUNCPTR *_ogl_glEvalPoint2)(GLint i, GLint j) = NULL;
void (OGL_FUNCPTR *_ogl_glFeedbackBuffer)(GLsizei size, GLenum type, GLfloat * buffer) = NULL;
void (OGL_FUNCPTR *_ogl_glFogf)(GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glFogfv)(GLenum pname, const GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glFogi)(GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glFogiv)(GLenum pname, const GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glFrustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = NULL;
GLuint (OGL_FUNCPTR *_ogl_glGenLists)(GLsizei range) = NULL;
void (OGL_FUNCPTR *_ogl_glGetClipPlane)(GLenum plane, GLdouble * equation) = NULL;
void (OGL_FUNCPTR *_ogl_glGetLightfv)(GLenum light, GLenum pname, GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetLightiv)(GLenum light, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetMapdv)(GLenum target, GLenum query, GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glGetMapfv)(GLenum target, GLenum query, GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glGetMapiv)(GLenum target, GLenum query, GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glGetMaterialfv)(GLenum face, GLenum pname, GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetMaterialiv)(GLenum face, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetPixelMapfv)(GLenum map, GLfloat * values) = NULL;
void (OGL_FUNCPTR *_ogl_glGetPixelMapuiv)(GLenum map, GLuint * values) = NULL;
void (OGL_FUNCPTR *_ogl_glGetPixelMapusv)(GLenum map, GLushort * values) = NULL;
void (OGL_FUNCPTR *_ogl_glGetPolygonStipple)(GLubyte * mask) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexEnvfv)(GLenum target, GLenum pname, GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexEnviv)(GLenum target, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexGendv)(GLenum coord, GLenum pname, GLdouble * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexGenfv)(GLenum coord, GLenum pname, GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glGetTexGeniv)(GLenum coord, GLenum pname, GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexMask)(GLuint mask) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexd)(GLdouble c) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexdv)(const GLdouble * c) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexf)(GLfloat c) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexfv)(const GLfloat * c) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexi)(GLint c) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexiv)(const GLint * c) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexs)(GLshort c) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexsv)(const GLshort * c) = NULL;
void (OGL_FUNCPTR *_ogl_glInitNames)(void) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glIsList)(GLuint list) = NULL;
void (OGL_FUNCPTR *_ogl_glLightModelf)(GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glLightModelfv)(GLenum pname, const GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glLightModeli)(GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glLightModeliv)(GLenum pname, const GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glLightf)(GLenum light, GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glLightfv)(GLenum light, GLenum pname, const GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glLighti)(GLenum light, GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glLightiv)(GLenum light, GLenum pname, const GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glLineStipple)(GLint factor, GLushort pattern) = NULL;
void (OGL_FUNCPTR *_ogl_glListBase)(GLuint base) = NULL;
void (OGL_FUNCPTR *_ogl_glLoadIdentity)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glLoadMatrixd)(const GLdouble * m) = NULL;
void (OGL_FUNCPTR *_ogl_glLoadMatrixf)(const GLfloat * m) = NULL;
void (OGL_FUNCPTR *_ogl_glLoadName)(GLuint name) = NULL;
void (OGL_FUNCPTR *_ogl_glMap1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) = NULL;
void (OGL_FUNCPTR *_ogl_glMap1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) = NULL;
void (OGL_FUNCPTR *_ogl_glMap2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) = NULL;
void (OGL_FUNCPTR *_ogl_glMap2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) = NULL;
void (OGL_FUNCPTR *_ogl_glMapGrid1d)(GLint un, GLdouble u1, GLdouble u2) = NULL;
void (OGL_FUNCPTR *_ogl_glMapGrid1f)(GLint un, GLfloat u1, GLfloat u2) = NULL;
void (OGL_FUNCPTR *_ogl_glMapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) = NULL;
void (OGL_FUNCPTR *_ogl_glMapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) = NULL;
void (OGL_FUNCPTR *_ogl_glMaterialf)(GLenum face, GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glMaterialfv)(GLenum face, GLenum pname, const GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glMateriali)(GLenum face, GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glMaterialiv)(GLenum face, GLenum pname, const GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glMatrixMode)(GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glMultMatrixd)(const GLdouble * m) = NULL;
void (OGL_FUNCPTR *_ogl_glMultMatrixf)(const GLfloat * m) = NULL;
void (OGL_FUNCPTR *_ogl_glNewList)(GLuint list, GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glNormal3b)(GLbyte nx, GLbyte ny, GLbyte nz) = NULL;
void (OGL_FUNCPTR *_ogl_glNormal3bv)(const GLbyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glNormal3d)(GLdouble nx, GLdouble ny, GLdouble nz) = NULL;
void (OGL_FUNCPTR *_ogl_glNormal3dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glNormal3f)(GLfloat nx, GLfloat ny, GLfloat nz) = NULL;
void (OGL_FUNCPTR *_ogl_glNormal3fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glNormal3i)(GLint nx, GLint ny, GLint nz) = NULL;
void (OGL_FUNCPTR *_ogl_glNormal3iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glNormal3s)(GLshort nx, GLshort ny, GLshort nz) = NULL;
void (OGL_FUNCPTR *_ogl_glNormal3sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glOrtho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = NULL;
void (OGL_FUNCPTR *_ogl_glPassThrough)(GLfloat token) = NULL;
void (OGL_FUNCPTR *_ogl_glPixelMapfv)(GLenum map, GLsizei mapsize, const GLfloat * values) = NULL;
void (OGL_FUNCPTR *_ogl_glPixelMapuiv)(GLenum map, GLsizei mapsize, const GLuint * values) = NULL;
void (OGL_FUNCPTR *_ogl_glPixelMapusv)(GLenum map, GLsizei mapsize, const GLushort * values) = NULL;
void (OGL_FUNCPTR *_ogl_glPixelTransferf)(GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glPixelTransferi)(GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glPixelZoom)(GLfloat xfactor, GLfloat yfactor) = NULL;
void (OGL_FUNCPTR *_ogl_glPolygonStipple)(const GLubyte * mask) = NULL;
void (OGL_FUNCPTR *_ogl_glPopAttrib)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glPopMatrix)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glPopName)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glPushAttrib)(GLbitfield mask) = NULL;
void (OGL_FUNCPTR *_ogl_glPushMatrix)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glPushName)(GLuint name) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos2d)(GLdouble x, GLdouble y) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos2dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos2f)(GLfloat x, GLfloat y) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos2fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos2i)(GLint x, GLint y) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos2iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos2s)(GLshort x, GLshort y) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos2sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos3d)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos3dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos3f)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos3fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos3i)(GLint x, GLint y, GLint z) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos3iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos3s)(GLshort x, GLshort y, GLshort z) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos3sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos4dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos4fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos4i)(GLint x, GLint y, GLint z, GLint w) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos4iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w) = NULL;
void (OGL_FUNCPTR *_ogl_glRasterPos4sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glRectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) = NULL;
void (OGL_FUNCPTR *_ogl_glRectdv)(const GLdouble * v1, const GLdouble * v2) = NULL;
void (OGL_FUNCPTR *_ogl_glRectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) = NULL;
void (OGL_FUNCPTR *_ogl_glRectfv)(const GLfloat * v1, const GLfloat * v2) = NULL;
void (OGL_FUNCPTR *_ogl_glRecti)(GLint x1, GLint y1, GLint x2, GLint y2) = NULL;
void (OGL_FUNCPTR *_ogl_glRectiv)(const GLint * v1, const GLint * v2) = NULL;
void (OGL_FUNCPTR *_ogl_glRects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2) = NULL;
void (OGL_FUNCPTR *_ogl_glRectsv)(const GLshort * v1, const GLshort * v2) = NULL;
GLint (OGL_FUNCPTR *_ogl_glRenderMode)(GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glRotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) = NULL;
void (OGL_FUNCPTR *_ogl_glRotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) = NULL;
void (OGL_FUNCPTR *_ogl_glScaled)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (OGL_FUNCPTR *_ogl_glScalef)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (OGL_FUNCPTR *_ogl_glSelectBuffer)(GLsizei size, GLuint * buffer) = NULL;
void (OGL_FUNCPTR *_ogl_glShadeModel)(GLenum mode) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord1d)(GLdouble s) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord1dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord1f)(GLfloat s) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord1fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord1i)(GLint s) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord1iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord1s)(GLshort s) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord1sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord2d)(GLdouble s, GLdouble t) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord2dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord2f)(GLfloat s, GLfloat t) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord2fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord2i)(GLint s, GLint t) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord2iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord2s)(GLshort s, GLshort t) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord2sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord3d)(GLdouble s, GLdouble t, GLdouble r) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord3dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord3f)(GLfloat s, GLfloat t, GLfloat r) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord3fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord3i)(GLint s, GLint t, GLint r) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord3iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord3s)(GLshort s, GLshort t, GLshort r) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord3sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord4dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord4fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord4i)(GLint s, GLint t, GLint r, GLint q) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord4iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoord4sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glTexEnvf)(GLenum target, GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glTexEnvfv)(GLenum target, GLenum pname, const GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glTexEnvi)(GLenum target, GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glTexEnviv)(GLenum target, GLenum pname, const GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glTexGend)(GLenum coord, GLenum pname, GLdouble param) = NULL;
void (OGL_FUNCPTR *_ogl_glTexGendv)(GLenum coord, GLenum pname, const GLdouble * params) = NULL;
void (OGL_FUNCPTR *_ogl_glTexGenf)(GLenum coord, GLenum pname, GLfloat param) = NULL;
void (OGL_FUNCPTR *_ogl_glTexGenfv)(GLenum coord, GLenum pname, const GLfloat * params) = NULL;
void (OGL_FUNCPTR *_ogl_glTexGeni)(GLenum coord, GLenum pname, GLint param) = NULL;
void (OGL_FUNCPTR *_ogl_glTexGeniv)(GLenum coord, GLenum pname, const GLint * params) = NULL;
void (OGL_FUNCPTR *_ogl_glTranslated)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (OGL_FUNCPTR *_ogl_glTranslatef)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex2d)(GLdouble x, GLdouble y) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex2dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex2f)(GLfloat x, GLfloat y) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex2fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex2i)(GLint x, GLint y) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex2iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex2s)(GLshort x, GLshort y) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex2sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex3d)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex3dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex3f)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex3fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex3i)(GLint x, GLint y, GLint z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex3iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex3s)(GLshort x, GLshort y, GLshort z) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex3sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex4dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex4fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex4i)(GLint x, GLint y, GLint z, GLint w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex4iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex4s)(GLshort x, GLshort y, GLshort z, GLshort w) = NULL;
void (OGL_FUNCPTR *_ogl_glVertex4sv)(const GLshort * v) = NULL;
GLboolean (OGL_FUNCPTR *_ogl_glAreTexturesResident)(GLsizei n, const GLuint * textures, GLboolean * residences) = NULL;
void (OGL_FUNCPTR *_ogl_glArrayElement)(GLint i) = NULL;
void (OGL_FUNCPTR *_ogl_glColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glDisableClientState)(GLenum ren_array) = NULL;
void (OGL_FUNCPTR *_ogl_glEdgeFlagPointer)(GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glEnableClientState)(GLenum ren_array) = NULL;
void (OGL_FUNCPTR *_ogl_glGetPointerv)(GLenum pname, void ** params) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexPointer)(GLenum type, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexub)(GLubyte c) = NULL;
void (OGL_FUNCPTR *_ogl_glIndexubv)(const GLubyte * c) = NULL;
void (OGL_FUNCPTR *_ogl_glInterleavedArrays)(GLenum format, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glNormalPointer)(GLenum type, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glPopClientAttrib)(void) = NULL;
void (OGL_FUNCPTR *_ogl_glPrioritizeTextures)(GLsizei n, const GLuint * textures, const GLfloat * priorities) = NULL;
void (OGL_FUNCPTR *_ogl_glPushClientAttrib)(GLbitfield mask) = NULL;
void (OGL_FUNCPTR *_ogl_glTexCoordPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glVertexPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glClientActiveTexture)(GLenum texture) = NULL;
void (OGL_FUNCPTR *_ogl_glLoadTransposeMatrixd)(const GLdouble * m) = NULL;
void (OGL_FUNCPTR *_ogl_glLoadTransposeMatrixf)(const GLfloat * m) = NULL;
void (OGL_FUNCPTR *_ogl_glMultTransposeMatrixd)(const GLdouble * m) = NULL;
void (OGL_FUNCPTR *_ogl_glMultTransposeMatrixf)(const GLfloat * m) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord1d)(GLenum target, GLdouble s) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord1dv)(GLenum target, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord1f)(GLenum target, GLfloat s) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord1fv)(GLenum target, const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord1i)(GLenum target, GLint s) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord1iv)(GLenum target, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord1s)(GLenum target, GLshort s) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord1sv)(GLenum target, const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord2dv)(GLenum target, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord2fv)(GLenum target, const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord2i)(GLenum target, GLint s, GLint t) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord2iv)(GLenum target, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord2s)(GLenum target, GLshort s, GLshort t) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord2sv)(GLenum target, const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord3dv)(GLenum target, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord3fv)(GLenum target, const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord3iv)(GLenum target, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord3sv)(GLenum target, const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord4dv)(GLenum target, const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord4fv)(GLenum target, const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord4iv)(GLenum target, const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) = NULL;
void (OGL_FUNCPTR *_ogl_glMultiTexCoord4sv)(GLenum target, const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glFogCoordPointer)(GLenum type, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glFogCoordd)(GLdouble coord) = NULL;
void (OGL_FUNCPTR *_ogl_glFogCoorddv)(const GLdouble * coord) = NULL;
void (OGL_FUNCPTR *_ogl_glFogCoordf)(GLfloat coord) = NULL;
void (OGL_FUNCPTR *_ogl_glFogCoordfv)(const GLfloat * coord) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3bv)(const GLbyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3i)(GLint red, GLint green, GLint blue) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3s)(GLshort red, GLshort green, GLshort blue) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3ubv)(const GLubyte * v) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3ui)(GLuint red, GLuint green, GLuint blue) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3uiv)(const GLuint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3us)(GLushort red, GLushort green, GLushort blue) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColor3usv)(const GLushort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glSecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos2d)(GLdouble x, GLdouble y) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos2dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos2f)(GLfloat x, GLfloat y) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos2fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos2i)(GLint x, GLint y) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos2iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos2s)(GLshort x, GLshort y) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos2sv)(const GLshort * v) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos3d)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos3dv)(const GLdouble * v) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos3f)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos3fv)(const GLfloat * v) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos3i)(GLint x, GLint y, GLint z) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos3iv)(const GLint * v) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos3s)(GLshort x, GLshort y, GLshort z) = NULL;
void (OGL_FUNCPTR *_ogl_glWindowPos3sv)(const GLshort * v) = NULL;
#endif /* OGL_COMPATIBILITY */

extern int ogl_init(void)
{
	int num_failed = 0;
	_ogl_glBlendFunc = (void (OGL_FUNCPTR *)(GLenum, GLenum))ogl_get_proc_address("glBlendFunc");
	if(!_ogl_glBlendFunc) num_failed++;
	_ogl_glClear = (void (OGL_FUNCPTR *)(GLbitfield))ogl_get_proc_address("glClear");
	if(!_ogl_glClear) num_failed++;
	_ogl_glClearColor = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glClearColor");
	if(!_ogl_glClearColor) num_failed++;
	_ogl_glClearDepth = (void (OGL_FUNCPTR *)(GLdouble))ogl_get_proc_address("glClearDepth");
	if(!_ogl_glClearDepth) num_failed++;
	_ogl_glClearStencil = (void (OGL_FUNCPTR *)(GLint))ogl_get_proc_address("glClearStencil");
	if(!_ogl_glClearStencil) num_failed++;
	_ogl_glColorMask = (void (OGL_FUNCPTR *)(GLboolean, GLboolean, GLboolean, GLboolean))ogl_get_proc_address("glColorMask");
	if(!_ogl_glColorMask) num_failed++;
	_ogl_glCullFace = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glCullFace");
	if(!_ogl_glCullFace) num_failed++;
	_ogl_glDepthFunc = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glDepthFunc");
	if(!_ogl_glDepthFunc) num_failed++;
	_ogl_glDepthMask = (void (OGL_FUNCPTR *)(GLboolean))ogl_get_proc_address("glDepthMask");
	if(!_ogl_glDepthMask) num_failed++;
	_ogl_glDepthRange = (void (OGL_FUNCPTR *)(GLdouble, GLdouble))ogl_get_proc_address("glDepthRange");
	if(!_ogl_glDepthRange) num_failed++;
	_ogl_glDisable = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glDisable");
	if(!_ogl_glDisable) num_failed++;
	_ogl_glDrawBuffer = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glDrawBuffer");
	if(!_ogl_glDrawBuffer) num_failed++;
	_ogl_glEnable = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glEnable");
	if(!_ogl_glEnable) num_failed++;
	_ogl_glFinish = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glFinish");
	if(!_ogl_glFinish) num_failed++;
	_ogl_glFlush = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glFlush");
	if(!_ogl_glFlush) num_failed++;
	_ogl_glFrontFace = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glFrontFace");
	if(!_ogl_glFrontFace) num_failed++;
	_ogl_glGetBooleanv = (void (OGL_FUNCPTR *)(GLenum, GLboolean *))ogl_get_proc_address("glGetBooleanv");
	if(!_ogl_glGetBooleanv) num_failed++;
	_ogl_glGetDoublev = (void (OGL_FUNCPTR *)(GLenum, GLdouble *))ogl_get_proc_address("glGetDoublev");
	if(!_ogl_glGetDoublev) num_failed++;
	_ogl_glGetError = (GLenum (OGL_FUNCPTR *)(void))ogl_get_proc_address("glGetError");
	if(!_ogl_glGetError) num_failed++;
	_ogl_glGetFloatv = (void (OGL_FUNCPTR *)(GLenum, GLfloat *))ogl_get_proc_address("glGetFloatv");
	if(!_ogl_glGetFloatv) num_failed++;
	_ogl_glGetIntegerv = (void (OGL_FUNCPTR *)(GLenum, GLint *))ogl_get_proc_address("glGetIntegerv");
	if(!_ogl_glGetIntegerv) num_failed++;
	_ogl_glGetString = (const GLubyte * (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glGetString");
	if(!_ogl_glGetString) num_failed++;
	_ogl_glGetTexImage = (void (OGL_FUNCPTR *)(GLenum, GLint, GLenum, GLenum, void *))ogl_get_proc_address("glGetTexImage");
	if(!_ogl_glGetTexImage) num_failed++;
	_ogl_glGetTexLevelParameterfv = (void (OGL_FUNCPTR *)(GLenum, GLint, GLenum, GLfloat *))ogl_get_proc_address("glGetTexLevelParameterfv");
	if(!_ogl_glGetTexLevelParameterfv) num_failed++;
	_ogl_glGetTexLevelParameteriv = (void (OGL_FUNCPTR *)(GLenum, GLint, GLenum, GLint *))ogl_get_proc_address("glGetTexLevelParameteriv");
	if(!_ogl_glGetTexLevelParameteriv) num_failed++;
	_ogl_glGetTexParameterfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat *))ogl_get_proc_address("glGetTexParameterfv");
	if(!_ogl_glGetTexParameterfv) num_failed++;
	_ogl_glGetTexParameteriv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *))ogl_get_proc_address("glGetTexParameteriv");
	if(!_ogl_glGetTexParameteriv) num_failed++;
	_ogl_glHint = (void (OGL_FUNCPTR *)(GLenum, GLenum))ogl_get_proc_address("glHint");
	if(!_ogl_glHint) num_failed++;
	_ogl_glIsEnabled = (GLboolean (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glIsEnabled");
	if(!_ogl_glIsEnabled) num_failed++;
	_ogl_glLineWidth = (void (OGL_FUNCPTR *)(GLfloat))ogl_get_proc_address("glLineWidth");
	if(!_ogl_glLineWidth) num_failed++;
	_ogl_glLogicOp = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glLogicOp");
	if(!_ogl_glLogicOp) num_failed++;
	_ogl_glPixelStoref = (void (OGL_FUNCPTR *)(GLenum, GLfloat))ogl_get_proc_address("glPixelStoref");
	if(!_ogl_glPixelStoref) num_failed++;
	_ogl_glPixelStorei = (void (OGL_FUNCPTR *)(GLenum, GLint))ogl_get_proc_address("glPixelStorei");
	if(!_ogl_glPixelStorei) num_failed++;
	_ogl_glPointSize = (void (OGL_FUNCPTR *)(GLfloat))ogl_get_proc_address("glPointSize");
	if(!_ogl_glPointSize) num_failed++;
	_ogl_glPolygonMode = (void (OGL_FUNCPTR *)(GLenum, GLenum))ogl_get_proc_address("glPolygonMode");
	if(!_ogl_glPolygonMode) num_failed++;
	_ogl_glReadBuffer = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glReadBuffer");
	if(!_ogl_glReadBuffer) num_failed++;
	_ogl_glReadPixels = (void (OGL_FUNCPTR *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *))ogl_get_proc_address("glReadPixels");
	if(!_ogl_glReadPixels) num_failed++;
	_ogl_glScissor = (void (OGL_FUNCPTR *)(GLint, GLint, GLsizei, GLsizei))ogl_get_proc_address("glScissor");
	if(!_ogl_glScissor) num_failed++;
	_ogl_glStencilFunc = (void (OGL_FUNCPTR *)(GLenum, GLint, GLuint))ogl_get_proc_address("glStencilFunc");
	if(!_ogl_glStencilFunc) num_failed++;
	_ogl_glStencilMask = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glStencilMask");
	if(!_ogl_glStencilMask) num_failed++;
	_ogl_glStencilOp = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLenum))ogl_get_proc_address("glStencilOp");
	if(!_ogl_glStencilOp) num_failed++;
	_ogl_glTexImage1D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *))ogl_get_proc_address("glTexImage1D");
	if(!_ogl_glTexImage1D) num_failed++;
	_ogl_glTexImage2D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))ogl_get_proc_address("glTexImage2D");
	if(!_ogl_glTexImage2D) num_failed++;
	_ogl_glTexParameterf = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat))ogl_get_proc_address("glTexParameterf");
	if(!_ogl_glTexParameterf) num_failed++;
	_ogl_glTexParameterfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLfloat *))ogl_get_proc_address("glTexParameterfv");
	if(!_ogl_glTexParameterfv) num_failed++;
	_ogl_glTexParameteri = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint))ogl_get_proc_address("glTexParameteri");
	if(!_ogl_glTexParameteri) num_failed++;
	_ogl_glTexParameteriv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLint *))ogl_get_proc_address("glTexParameteriv");
	if(!_ogl_glTexParameteriv) num_failed++;
	_ogl_glViewport = (void (OGL_FUNCPTR *)(GLint, GLint, GLsizei, GLsizei))ogl_get_proc_address("glViewport");
	if(!_ogl_glViewport) num_failed++;
	_ogl_glBindTexture = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glBindTexture");
	if(!_ogl_glBindTexture) num_failed++;
	_ogl_glCopyTexImage1D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))ogl_get_proc_address("glCopyTexImage1D");
	if(!_ogl_glCopyTexImage1D) num_failed++;
	_ogl_glCopyTexImage2D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))ogl_get_proc_address("glCopyTexImage2D");
	if(!_ogl_glCopyTexImage2D) num_failed++;
	_ogl_glCopyTexSubImage1D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLint, GLint, GLsizei))ogl_get_proc_address("glCopyTexSubImage1D");
	if(!_ogl_glCopyTexSubImage1D) num_failed++;
	_ogl_glCopyTexSubImage2D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))ogl_get_proc_address("glCopyTexSubImage2D");
	if(!_ogl_glCopyTexSubImage2D) num_failed++;
	_ogl_glDeleteTextures = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *))ogl_get_proc_address("glDeleteTextures");
	if(!_ogl_glDeleteTextures) num_failed++;
	_ogl_glDrawArrays = (void (OGL_FUNCPTR *)(GLenum, GLint, GLsizei))ogl_get_proc_address("glDrawArrays");
	if(!_ogl_glDrawArrays) num_failed++;
	_ogl_glDrawElements = (void (OGL_FUNCPTR *)(GLenum, GLsizei, GLenum, const void *))ogl_get_proc_address("glDrawElements");
	if(!_ogl_glDrawElements) num_failed++;
	_ogl_glGenTextures = (void (OGL_FUNCPTR *)(GLsizei, GLuint *))ogl_get_proc_address("glGenTextures");
	if(!_ogl_glGenTextures) num_failed++;
	_ogl_glIsTexture = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsTexture");
	if(!_ogl_glIsTexture) num_failed++;
	_ogl_glPolygonOffset = (void (OGL_FUNCPTR *)(GLfloat, GLfloat))ogl_get_proc_address("glPolygonOffset");
	if(!_ogl_glPolygonOffset) num_failed++;
	_ogl_glTexSubImage1D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))ogl_get_proc_address("glTexSubImage1D");
	if(!_ogl_glTexSubImage1D) num_failed++;
	_ogl_glTexSubImage2D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))ogl_get_proc_address("glTexSubImage2D");
	if(!_ogl_glTexSubImage2D) num_failed++;
	_ogl_glCopyTexSubImage3D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))ogl_get_proc_address("glCopyTexSubImage3D");
	if(!_ogl_glCopyTexSubImage3D) num_failed++;
	_ogl_glDrawRangeElements = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *))ogl_get_proc_address("glDrawRangeElements");
	if(!_ogl_glDrawRangeElements) num_failed++;
	_ogl_glTexImage3D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))ogl_get_proc_address("glTexImage3D");
	if(!_ogl_glTexImage3D) num_failed++;
	_ogl_glTexSubImage3D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))ogl_get_proc_address("glTexSubImage3D");
	if(!_ogl_glTexSubImage3D) num_failed++;
	_ogl_glActiveTexture = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glActiveTexture");
	if(!_ogl_glActiveTexture) num_failed++;
	_ogl_glCompressedTexImage1D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))ogl_get_proc_address("glCompressedTexImage1D");
	if(!_ogl_glCompressedTexImage1D) num_failed++;
	_ogl_glCompressedTexImage2D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))ogl_get_proc_address("glCompressedTexImage2D");
	if(!_ogl_glCompressedTexImage2D) num_failed++;
	_ogl_glCompressedTexImage3D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))ogl_get_proc_address("glCompressedTexImage3D");
	if(!_ogl_glCompressedTexImage3D) num_failed++;
	_ogl_glCompressedTexSubImage1D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))ogl_get_proc_address("glCompressedTexSubImage1D");
	if(!_ogl_glCompressedTexSubImage1D) num_failed++;
	_ogl_glCompressedTexSubImage2D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))ogl_get_proc_address("glCompressedTexSubImage2D");
	if(!_ogl_glCompressedTexSubImage2D) num_failed++;
	_ogl_glCompressedTexSubImage3D = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))ogl_get_proc_address("glCompressedTexSubImage3D");
	if(!_ogl_glCompressedTexSubImage3D) num_failed++;
	_ogl_glGetCompressedTexImage = (void (OGL_FUNCPTR *)(GLenum, GLint, void *))ogl_get_proc_address("glGetCompressedTexImage");
	if(!_ogl_glGetCompressedTexImage) num_failed++;
	_ogl_glSampleCoverage = (void (OGL_FUNCPTR *)(GLfloat, GLboolean))ogl_get_proc_address("glSampleCoverage");
	if(!_ogl_glSampleCoverage) num_failed++;
	_ogl_glBlendColor = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glBlendColor");
	if(!_ogl_glBlendColor) num_failed++;
	_ogl_glBlendEquation = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glBlendEquation");
	if(!_ogl_glBlendEquation) num_failed++;
	_ogl_glBlendFuncSeparate = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLenum, GLenum))ogl_get_proc_address("glBlendFuncSeparate");
	if(!_ogl_glBlendFuncSeparate) num_failed++;
	_ogl_glMultiDrawArrays = (void (OGL_FUNCPTR *)(GLenum, const GLint *, const GLsizei *, GLsizei))ogl_get_proc_address("glMultiDrawArrays");
	if(!_ogl_glMultiDrawArrays) num_failed++;
	_ogl_glMultiDrawElements = (void (OGL_FUNCPTR *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei))ogl_get_proc_address("glMultiDrawElements");
	if(!_ogl_glMultiDrawElements) num_failed++;
	_ogl_glPointParameterf = (void (OGL_FUNCPTR *)(GLenum, GLfloat))ogl_get_proc_address("glPointParameterf");
	if(!_ogl_glPointParameterf) num_failed++;
	_ogl_glPointParameterfv = (void (OGL_FUNCPTR *)(GLenum, const GLfloat *))ogl_get_proc_address("glPointParameterfv");
	if(!_ogl_glPointParameterfv) num_failed++;
	_ogl_glPointParameteri = (void (OGL_FUNCPTR *)(GLenum, GLint))ogl_get_proc_address("glPointParameteri");
	if(!_ogl_glPointParameteri) num_failed++;
	_ogl_glPointParameteriv = (void (OGL_FUNCPTR *)(GLenum, const GLint *))ogl_get_proc_address("glPointParameteriv");
	if(!_ogl_glPointParameteriv) num_failed++;
	_ogl_glBeginQuery = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glBeginQuery");
	if(!_ogl_glBeginQuery) num_failed++;
	_ogl_glBindBuffer = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glBindBuffer");
	if(!_ogl_glBindBuffer) num_failed++;
	_ogl_glBufferData = (void (OGL_FUNCPTR *)(GLenum, GLsizeiptr, const void *, GLenum))ogl_get_proc_address("glBufferData");
	if(!_ogl_glBufferData) num_failed++;
	_ogl_glBufferSubData = (void (OGL_FUNCPTR *)(GLenum, GLintptr, GLsizeiptr, const void *))ogl_get_proc_address("glBufferSubData");
	if(!_ogl_glBufferSubData) num_failed++;
	_ogl_glDeleteBuffers = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *))ogl_get_proc_address("glDeleteBuffers");
	if(!_ogl_glDeleteBuffers) num_failed++;
	_ogl_glDeleteQueries = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *))ogl_get_proc_address("glDeleteQueries");
	if(!_ogl_glDeleteQueries) num_failed++;
	_ogl_glEndQuery = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glEndQuery");
	if(!_ogl_glEndQuery) num_failed++;
	_ogl_glGenBuffers = (void (OGL_FUNCPTR *)(GLsizei, GLuint *))ogl_get_proc_address("glGenBuffers");
	if(!_ogl_glGenBuffers) num_failed++;
	_ogl_glGenQueries = (void (OGL_FUNCPTR *)(GLsizei, GLuint *))ogl_get_proc_address("glGenQueries");
	if(!_ogl_glGenQueries) num_failed++;
	_ogl_glGetBufferParameteriv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *))ogl_get_proc_address("glGetBufferParameteriv");
	if(!_ogl_glGetBufferParameteriv) num_failed++;
	_ogl_glGetBufferPointerv = (void (OGL_FUNCPTR *)(GLenum, GLenum, void **))ogl_get_proc_address("glGetBufferPointerv");
	if(!_ogl_glGetBufferPointerv) num_failed++;
	_ogl_glGetBufferSubData = (void (OGL_FUNCPTR *)(GLenum, GLintptr, GLsizeiptr, void *))ogl_get_proc_address("glGetBufferSubData");
	if(!_ogl_glGetBufferSubData) num_failed++;
	_ogl_glGetQueryObjectiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint *))ogl_get_proc_address("glGetQueryObjectiv");
	if(!_ogl_glGetQueryObjectiv) num_failed++;
	_ogl_glGetQueryObjectuiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLuint *))ogl_get_proc_address("glGetQueryObjectuiv");
	if(!_ogl_glGetQueryObjectuiv) num_failed++;
	_ogl_glGetQueryiv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *))ogl_get_proc_address("glGetQueryiv");
	if(!_ogl_glGetQueryiv) num_failed++;
	_ogl_glIsBuffer = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsBuffer");
	if(!_ogl_glIsBuffer) num_failed++;
	_ogl_glIsQuery = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsQuery");
	if(!_ogl_glIsQuery) num_failed++;
	_ogl_glMapBuffer = (void * (OGL_FUNCPTR *)(GLenum, GLenum))ogl_get_proc_address("glMapBuffer");
	if(!_ogl_glMapBuffer) num_failed++;
	_ogl_glUnmapBuffer = (GLboolean (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glUnmapBuffer");
	if(!_ogl_glUnmapBuffer) num_failed++;
	_ogl_glAttachShader = (void (OGL_FUNCPTR *)(GLuint, GLuint))ogl_get_proc_address("glAttachShader");
	if(!_ogl_glAttachShader) num_failed++;
	_ogl_glBindAttribLocation = (void (OGL_FUNCPTR *)(GLuint, GLuint, const GLchar *))ogl_get_proc_address("glBindAttribLocation");
	if(!_ogl_glBindAttribLocation) num_failed++;
	_ogl_glBlendEquationSeparate = (void (OGL_FUNCPTR *)(GLenum, GLenum))ogl_get_proc_address("glBlendEquationSeparate");
	if(!_ogl_glBlendEquationSeparate) num_failed++;
	_ogl_glCompileShader = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glCompileShader");
	if(!_ogl_glCompileShader) num_failed++;
	_ogl_glCreateProgram = (GLuint (OGL_FUNCPTR *)(void))ogl_get_proc_address("glCreateProgram");
	if(!_ogl_glCreateProgram) num_failed++;
	_ogl_glCreateShader = (GLuint (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glCreateShader");
	if(!_ogl_glCreateShader) num_failed++;
	_ogl_glDeleteProgram = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glDeleteProgram");
	if(!_ogl_glDeleteProgram) num_failed++;
	_ogl_glDeleteShader = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glDeleteShader");
	if(!_ogl_glDeleteShader) num_failed++;
	_ogl_glDetachShader = (void (OGL_FUNCPTR *)(GLuint, GLuint))ogl_get_proc_address("glDetachShader");
	if(!_ogl_glDetachShader) num_failed++;
	_ogl_glDisableVertexAttribArray = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glDisableVertexAttribArray");
	if(!_ogl_glDisableVertexAttribArray) num_failed++;
	_ogl_glDrawBuffers = (void (OGL_FUNCPTR *)(GLsizei, const GLenum *))ogl_get_proc_address("glDrawBuffers");
	if(!_ogl_glDrawBuffers) num_failed++;
	_ogl_glEnableVertexAttribArray = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glEnableVertexAttribArray");
	if(!_ogl_glEnableVertexAttribArray) num_failed++;
	_ogl_glGetActiveAttrib = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *))ogl_get_proc_address("glGetActiveAttrib");
	if(!_ogl_glGetActiveAttrib) num_failed++;
	_ogl_glGetActiveUniform = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *))ogl_get_proc_address("glGetActiveUniform");
	if(!_ogl_glGetActiveUniform) num_failed++;
	_ogl_glGetAttachedShaders = (void (OGL_FUNCPTR *)(GLuint, GLsizei, GLsizei *, GLuint *))ogl_get_proc_address("glGetAttachedShaders");
	if(!_ogl_glGetAttachedShaders) num_failed++;
	_ogl_glGetAttribLocation = (GLint (OGL_FUNCPTR *)(GLuint, const GLchar *))ogl_get_proc_address("glGetAttribLocation");
	if(!_ogl_glGetAttribLocation) num_failed++;
	_ogl_glGetProgramInfoLog = (void (OGL_FUNCPTR *)(GLuint, GLsizei, GLsizei *, GLchar *))ogl_get_proc_address("glGetProgramInfoLog");
	if(!_ogl_glGetProgramInfoLog) num_failed++;
	_ogl_glGetProgramiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint *))ogl_get_proc_address("glGetProgramiv");
	if(!_ogl_glGetProgramiv) num_failed++;
	_ogl_glGetShaderInfoLog = (void (OGL_FUNCPTR *)(GLuint, GLsizei, GLsizei *, GLchar *))ogl_get_proc_address("glGetShaderInfoLog");
	if(!_ogl_glGetShaderInfoLog) num_failed++;
	_ogl_glGetShaderSource = (void (OGL_FUNCPTR *)(GLuint, GLsizei, GLsizei *, GLchar *))ogl_get_proc_address("glGetShaderSource");
	if(!_ogl_glGetShaderSource) num_failed++;
	_ogl_glGetShaderiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint *))ogl_get_proc_address("glGetShaderiv");
	if(!_ogl_glGetShaderiv) num_failed++;
	_ogl_glGetUniformLocation = (GLint (OGL_FUNCPTR *)(GLuint, const GLchar *))ogl_get_proc_address("glGetUniformLocation");
	if(!_ogl_glGetUniformLocation) num_failed++;
	_ogl_glGetUniformfv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLfloat *))ogl_get_proc_address("glGetUniformfv");
	if(!_ogl_glGetUniformfv) num_failed++;
	_ogl_glGetUniformiv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLint *))ogl_get_proc_address("glGetUniformiv");
	if(!_ogl_glGetUniformiv) num_failed++;
	_ogl_glGetVertexAttribPointerv = (void (OGL_FUNCPTR *)(GLuint, GLenum, void **))ogl_get_proc_address("glGetVertexAttribPointerv");
	if(!_ogl_glGetVertexAttribPointerv) num_failed++;
	_ogl_glGetVertexAttribdv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLdouble *))ogl_get_proc_address("glGetVertexAttribdv");
	if(!_ogl_glGetVertexAttribdv) num_failed++;
	_ogl_glGetVertexAttribfv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLfloat *))ogl_get_proc_address("glGetVertexAttribfv");
	if(!_ogl_glGetVertexAttribfv) num_failed++;
	_ogl_glGetVertexAttribiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint *))ogl_get_proc_address("glGetVertexAttribiv");
	if(!_ogl_glGetVertexAttribiv) num_failed++;
	_ogl_glIsProgram = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsProgram");
	if(!_ogl_glIsProgram) num_failed++;
	_ogl_glIsShader = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsShader");
	if(!_ogl_glIsShader) num_failed++;
	_ogl_glLinkProgram = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glLinkProgram");
	if(!_ogl_glLinkProgram) num_failed++;
	_ogl_glShaderSource = (void (OGL_FUNCPTR *)(GLuint, GLsizei, const GLchar *const*, const GLint *))ogl_get_proc_address("glShaderSource");
	if(!_ogl_glShaderSource) num_failed++;
	_ogl_glStencilFuncSeparate = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint, GLuint))ogl_get_proc_address("glStencilFuncSeparate");
	if(!_ogl_glStencilFuncSeparate) num_failed++;
	_ogl_glStencilMaskSeparate = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glStencilMaskSeparate");
	if(!_ogl_glStencilMaskSeparate) num_failed++;
	_ogl_glStencilOpSeparate = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLenum, GLenum))ogl_get_proc_address("glStencilOpSeparate");
	if(!_ogl_glStencilOpSeparate) num_failed++;
	_ogl_glUniform1f = (void (OGL_FUNCPTR *)(GLint, GLfloat))ogl_get_proc_address("glUniform1f");
	if(!_ogl_glUniform1f) num_failed++;
	_ogl_glUniform1fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLfloat *))ogl_get_proc_address("glUniform1fv");
	if(!_ogl_glUniform1fv) num_failed++;
	_ogl_glUniform1i = (void (OGL_FUNCPTR *)(GLint, GLint))ogl_get_proc_address("glUniform1i");
	if(!_ogl_glUniform1i) num_failed++;
	_ogl_glUniform1iv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLint *))ogl_get_proc_address("glUniform1iv");
	if(!_ogl_glUniform1iv) num_failed++;
	_ogl_glUniform2f = (void (OGL_FUNCPTR *)(GLint, GLfloat, GLfloat))ogl_get_proc_address("glUniform2f");
	if(!_ogl_glUniform2f) num_failed++;
	_ogl_glUniform2fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLfloat *))ogl_get_proc_address("glUniform2fv");
	if(!_ogl_glUniform2fv) num_failed++;
	_ogl_glUniform2i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint))ogl_get_proc_address("glUniform2i");
	if(!_ogl_glUniform2i) num_failed++;
	_ogl_glUniform2iv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLint *))ogl_get_proc_address("glUniform2iv");
	if(!_ogl_glUniform2iv) num_failed++;
	_ogl_glUniform3f = (void (OGL_FUNCPTR *)(GLint, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glUniform3f");
	if(!_ogl_glUniform3f) num_failed++;
	_ogl_glUniform3fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLfloat *))ogl_get_proc_address("glUniform3fv");
	if(!_ogl_glUniform3fv) num_failed++;
	_ogl_glUniform3i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint, GLint))ogl_get_proc_address("glUniform3i");
	if(!_ogl_glUniform3i) num_failed++;
	_ogl_glUniform3iv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLint *))ogl_get_proc_address("glUniform3iv");
	if(!_ogl_glUniform3iv) num_failed++;
	_ogl_glUniform4f = (void (OGL_FUNCPTR *)(GLint, GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glUniform4f");
	if(!_ogl_glUniform4f) num_failed++;
	_ogl_glUniform4fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLfloat *))ogl_get_proc_address("glUniform4fv");
	if(!_ogl_glUniform4fv) num_failed++;
	_ogl_glUniform4i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint, GLint, GLint))ogl_get_proc_address("glUniform4i");
	if(!_ogl_glUniform4i) num_failed++;
	_ogl_glUniform4iv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLint *))ogl_get_proc_address("glUniform4iv");
	if(!_ogl_glUniform4iv) num_failed++;
	_ogl_glUniformMatrix2fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glUniformMatrix2fv");
	if(!_ogl_glUniformMatrix2fv) num_failed++;
	_ogl_glUniformMatrix3fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glUniformMatrix3fv");
	if(!_ogl_glUniformMatrix3fv) num_failed++;
	_ogl_glUniformMatrix4fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glUniformMatrix4fv");
	if(!_ogl_glUniformMatrix4fv) num_failed++;
	_ogl_glUseProgram = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glUseProgram");
	if(!_ogl_glUseProgram) num_failed++;
	_ogl_glValidateProgram = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glValidateProgram");
	if(!_ogl_glValidateProgram) num_failed++;
	_ogl_glVertexAttrib1d = (void (OGL_FUNCPTR *)(GLuint, GLdouble))ogl_get_proc_address("glVertexAttrib1d");
	if(!_ogl_glVertexAttrib1d) num_failed++;
	_ogl_glVertexAttrib1dv = (void (OGL_FUNCPTR *)(GLuint, const GLdouble *))ogl_get_proc_address("glVertexAttrib1dv");
	if(!_ogl_glVertexAttrib1dv) num_failed++;
	_ogl_glVertexAttrib1f = (void (OGL_FUNCPTR *)(GLuint, GLfloat))ogl_get_proc_address("glVertexAttrib1f");
	if(!_ogl_glVertexAttrib1f) num_failed++;
	_ogl_glVertexAttrib1fv = (void (OGL_FUNCPTR *)(GLuint, const GLfloat *))ogl_get_proc_address("glVertexAttrib1fv");
	if(!_ogl_glVertexAttrib1fv) num_failed++;
	_ogl_glVertexAttrib1s = (void (OGL_FUNCPTR *)(GLuint, GLshort))ogl_get_proc_address("glVertexAttrib1s");
	if(!_ogl_glVertexAttrib1s) num_failed++;
	_ogl_glVertexAttrib1sv = (void (OGL_FUNCPTR *)(GLuint, const GLshort *))ogl_get_proc_address("glVertexAttrib1sv");
	if(!_ogl_glVertexAttrib1sv) num_failed++;
	_ogl_glVertexAttrib2d = (void (OGL_FUNCPTR *)(GLuint, GLdouble, GLdouble))ogl_get_proc_address("glVertexAttrib2d");
	if(!_ogl_glVertexAttrib2d) num_failed++;
	_ogl_glVertexAttrib2dv = (void (OGL_FUNCPTR *)(GLuint, const GLdouble *))ogl_get_proc_address("glVertexAttrib2dv");
	if(!_ogl_glVertexAttrib2dv) num_failed++;
	_ogl_glVertexAttrib2f = (void (OGL_FUNCPTR *)(GLuint, GLfloat, GLfloat))ogl_get_proc_address("glVertexAttrib2f");
	if(!_ogl_glVertexAttrib2f) num_failed++;
	_ogl_glVertexAttrib2fv = (void (OGL_FUNCPTR *)(GLuint, const GLfloat *))ogl_get_proc_address("glVertexAttrib2fv");
	if(!_ogl_glVertexAttrib2fv) num_failed++;
	_ogl_glVertexAttrib2s = (void (OGL_FUNCPTR *)(GLuint, GLshort, GLshort))ogl_get_proc_address("glVertexAttrib2s");
	if(!_ogl_glVertexAttrib2s) num_failed++;
	_ogl_glVertexAttrib2sv = (void (OGL_FUNCPTR *)(GLuint, const GLshort *))ogl_get_proc_address("glVertexAttrib2sv");
	if(!_ogl_glVertexAttrib2sv) num_failed++;
	_ogl_glVertexAttrib3d = (void (OGL_FUNCPTR *)(GLuint, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glVertexAttrib3d");
	if(!_ogl_glVertexAttrib3d) num_failed++;
	_ogl_glVertexAttrib3dv = (void (OGL_FUNCPTR *)(GLuint, const GLdouble *))ogl_get_proc_address("glVertexAttrib3dv");
	if(!_ogl_glVertexAttrib3dv) num_failed++;
	_ogl_glVertexAttrib3f = (void (OGL_FUNCPTR *)(GLuint, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glVertexAttrib3f");
	if(!_ogl_glVertexAttrib3f) num_failed++;
	_ogl_glVertexAttrib3fv = (void (OGL_FUNCPTR *)(GLuint, const GLfloat *))ogl_get_proc_address("glVertexAttrib3fv");
	if(!_ogl_glVertexAttrib3fv) num_failed++;
	_ogl_glVertexAttrib3s = (void (OGL_FUNCPTR *)(GLuint, GLshort, GLshort, GLshort))ogl_get_proc_address("glVertexAttrib3s");
	if(!_ogl_glVertexAttrib3s) num_failed++;
	_ogl_glVertexAttrib3sv = (void (OGL_FUNCPTR *)(GLuint, const GLshort *))ogl_get_proc_address("glVertexAttrib3sv");
	if(!_ogl_glVertexAttrib3sv) num_failed++;
	_ogl_glVertexAttrib4Nbv = (void (OGL_FUNCPTR *)(GLuint, const GLbyte *))ogl_get_proc_address("glVertexAttrib4Nbv");
	if(!_ogl_glVertexAttrib4Nbv) num_failed++;
	_ogl_glVertexAttrib4Niv = (void (OGL_FUNCPTR *)(GLuint, const GLint *))ogl_get_proc_address("glVertexAttrib4Niv");
	if(!_ogl_glVertexAttrib4Niv) num_failed++;
	_ogl_glVertexAttrib4Nsv = (void (OGL_FUNCPTR *)(GLuint, const GLshort *))ogl_get_proc_address("glVertexAttrib4Nsv");
	if(!_ogl_glVertexAttrib4Nsv) num_failed++;
	_ogl_glVertexAttrib4Nub = (void (OGL_FUNCPTR *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte))ogl_get_proc_address("glVertexAttrib4Nub");
	if(!_ogl_glVertexAttrib4Nub) num_failed++;
	_ogl_glVertexAttrib4Nubv = (void (OGL_FUNCPTR *)(GLuint, const GLubyte *))ogl_get_proc_address("glVertexAttrib4Nubv");
	if(!_ogl_glVertexAttrib4Nubv) num_failed++;
	_ogl_glVertexAttrib4Nuiv = (void (OGL_FUNCPTR *)(GLuint, const GLuint *))ogl_get_proc_address("glVertexAttrib4Nuiv");
	if(!_ogl_glVertexAttrib4Nuiv) num_failed++;
	_ogl_glVertexAttrib4Nusv = (void (OGL_FUNCPTR *)(GLuint, const GLushort *))ogl_get_proc_address("glVertexAttrib4Nusv");
	if(!_ogl_glVertexAttrib4Nusv) num_failed++;
	_ogl_glVertexAttrib4bv = (void (OGL_FUNCPTR *)(GLuint, const GLbyte *))ogl_get_proc_address("glVertexAttrib4bv");
	if(!_ogl_glVertexAttrib4bv) num_failed++;
	_ogl_glVertexAttrib4d = (void (OGL_FUNCPTR *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glVertexAttrib4d");
	if(!_ogl_glVertexAttrib4d) num_failed++;
	_ogl_glVertexAttrib4dv = (void (OGL_FUNCPTR *)(GLuint, const GLdouble *))ogl_get_proc_address("glVertexAttrib4dv");
	if(!_ogl_glVertexAttrib4dv) num_failed++;
	_ogl_glVertexAttrib4f = (void (OGL_FUNCPTR *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glVertexAttrib4f");
	if(!_ogl_glVertexAttrib4f) num_failed++;
	_ogl_glVertexAttrib4fv = (void (OGL_FUNCPTR *)(GLuint, const GLfloat *))ogl_get_proc_address("glVertexAttrib4fv");
	if(!_ogl_glVertexAttrib4fv) num_failed++;
	_ogl_glVertexAttrib4iv = (void (OGL_FUNCPTR *)(GLuint, const GLint *))ogl_get_proc_address("glVertexAttrib4iv");
	if(!_ogl_glVertexAttrib4iv) num_failed++;
	_ogl_glVertexAttrib4s = (void (OGL_FUNCPTR *)(GLuint, GLshort, GLshort, GLshort, GLshort))ogl_get_proc_address("glVertexAttrib4s");
	if(!_ogl_glVertexAttrib4s) num_failed++;
	_ogl_glVertexAttrib4sv = (void (OGL_FUNCPTR *)(GLuint, const GLshort *))ogl_get_proc_address("glVertexAttrib4sv");
	if(!_ogl_glVertexAttrib4sv) num_failed++;
	_ogl_glVertexAttrib4ubv = (void (OGL_FUNCPTR *)(GLuint, const GLubyte *))ogl_get_proc_address("glVertexAttrib4ubv");
	if(!_ogl_glVertexAttrib4ubv) num_failed++;
	_ogl_glVertexAttrib4uiv = (void (OGL_FUNCPTR *)(GLuint, const GLuint *))ogl_get_proc_address("glVertexAttrib4uiv");
	if(!_ogl_glVertexAttrib4uiv) num_failed++;
	_ogl_glVertexAttrib4usv = (void (OGL_FUNCPTR *)(GLuint, const GLushort *))ogl_get_proc_address("glVertexAttrib4usv");
	if(!_ogl_glVertexAttrib4usv) num_failed++;
	_ogl_glVertexAttribPointer = (void (OGL_FUNCPTR *)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *))ogl_get_proc_address("glVertexAttribPointer");
	if(!_ogl_glVertexAttribPointer) num_failed++;
	_ogl_glUniformMatrix2x3fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glUniformMatrix2x3fv");
	if(!_ogl_glUniformMatrix2x3fv) num_failed++;
	_ogl_glUniformMatrix2x4fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glUniformMatrix2x4fv");
	if(!_ogl_glUniformMatrix2x4fv) num_failed++;
	_ogl_glUniformMatrix3x2fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glUniformMatrix3x2fv");
	if(!_ogl_glUniformMatrix3x2fv) num_failed++;
	_ogl_glUniformMatrix3x4fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glUniformMatrix3x4fv");
	if(!_ogl_glUniformMatrix3x4fv) num_failed++;
	_ogl_glUniformMatrix4x2fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glUniformMatrix4x2fv");
	if(!_ogl_glUniformMatrix4x2fv) num_failed++;
	_ogl_glUniformMatrix4x3fv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glUniformMatrix4x3fv");
	if(!_ogl_glUniformMatrix4x3fv) num_failed++;
	_ogl_glBeginConditionalRender = (void (OGL_FUNCPTR *)(GLuint, GLenum))ogl_get_proc_address("glBeginConditionalRender");
	if(!_ogl_glBeginConditionalRender) num_failed++;
	_ogl_glBeginTransformFeedback = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glBeginTransformFeedback");
	if(!_ogl_glBeginTransformFeedback) num_failed++;
	_ogl_glBindBufferBase = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLuint))ogl_get_proc_address("glBindBufferBase");
	if(!_ogl_glBindBufferBase) num_failed++;
	_ogl_glBindBufferRange = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr))ogl_get_proc_address("glBindBufferRange");
	if(!_ogl_glBindBufferRange) num_failed++;
	_ogl_glBindFragDataLocation = (void (OGL_FUNCPTR *)(GLuint, GLuint, const GLchar *))ogl_get_proc_address("glBindFragDataLocation");
	if(!_ogl_glBindFragDataLocation) num_failed++;
	_ogl_glBindFramebuffer = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glBindFramebuffer");
	if(!_ogl_glBindFramebuffer) num_failed++;
	_ogl_glBindRenderbuffer = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glBindRenderbuffer");
	if(!_ogl_glBindRenderbuffer) num_failed++;
	_ogl_glBindVertexArray = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glBindVertexArray");
	if(!_ogl_glBindVertexArray) num_failed++;
	_ogl_glBlitFramebuffer = (void (OGL_FUNCPTR *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))ogl_get_proc_address("glBlitFramebuffer");
	if(!_ogl_glBlitFramebuffer) num_failed++;
	_ogl_glCheckFramebufferStatus = (GLenum (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glCheckFramebufferStatus");
	if(!_ogl_glCheckFramebufferStatus) num_failed++;
	_ogl_glClampColor = (void (OGL_FUNCPTR *)(GLenum, GLenum))ogl_get_proc_address("glClampColor");
	if(!_ogl_glClampColor) num_failed++;
	_ogl_glClearBufferfi = (void (OGL_FUNCPTR *)(GLenum, GLint, GLfloat, GLint))ogl_get_proc_address("glClearBufferfi");
	if(!_ogl_glClearBufferfi) num_failed++;
	_ogl_glClearBufferfv = (void (OGL_FUNCPTR *)(GLenum, GLint, const GLfloat *))ogl_get_proc_address("glClearBufferfv");
	if(!_ogl_glClearBufferfv) num_failed++;
	_ogl_glClearBufferiv = (void (OGL_FUNCPTR *)(GLenum, GLint, const GLint *))ogl_get_proc_address("glClearBufferiv");
	if(!_ogl_glClearBufferiv) num_failed++;
	_ogl_glClearBufferuiv = (void (OGL_FUNCPTR *)(GLenum, GLint, const GLuint *))ogl_get_proc_address("glClearBufferuiv");
	if(!_ogl_glClearBufferuiv) num_failed++;
	_ogl_glColorMaski = (void (OGL_FUNCPTR *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))ogl_get_proc_address("glColorMaski");
	if(!_ogl_glColorMaski) num_failed++;
	_ogl_glDeleteFramebuffers = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *))ogl_get_proc_address("glDeleteFramebuffers");
	if(!_ogl_glDeleteFramebuffers) num_failed++;
	_ogl_glDeleteRenderbuffers = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *))ogl_get_proc_address("glDeleteRenderbuffers");
	if(!_ogl_glDeleteRenderbuffers) num_failed++;
	_ogl_glDeleteVertexArrays = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *))ogl_get_proc_address("glDeleteVertexArrays");
	if(!_ogl_glDeleteVertexArrays) num_failed++;
	_ogl_glDisablei = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glDisablei");
	if(!_ogl_glDisablei) num_failed++;
	_ogl_glEnablei = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glEnablei");
	if(!_ogl_glEnablei) num_failed++;
	_ogl_glEndConditionalRender = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glEndConditionalRender");
	if(!_ogl_glEndConditionalRender) num_failed++;
	_ogl_glEndTransformFeedback = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glEndTransformFeedback");
	if(!_ogl_glEndTransformFeedback) num_failed++;
	_ogl_glFlushMappedBufferRange = (void (OGL_FUNCPTR *)(GLenum, GLintptr, GLsizeiptr))ogl_get_proc_address("glFlushMappedBufferRange");
	if(!_ogl_glFlushMappedBufferRange) num_failed++;
	_ogl_glFramebufferRenderbuffer = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLenum, GLuint))ogl_get_proc_address("glFramebufferRenderbuffer");
	if(!_ogl_glFramebufferRenderbuffer) num_failed++;
	_ogl_glFramebufferTexture1D = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLenum, GLuint, GLint))ogl_get_proc_address("glFramebufferTexture1D");
	if(!_ogl_glFramebufferTexture1D) num_failed++;
	_ogl_glFramebufferTexture2D = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLenum, GLuint, GLint))ogl_get_proc_address("glFramebufferTexture2D");
	if(!_ogl_glFramebufferTexture2D) num_failed++;
	_ogl_glFramebufferTexture3D = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint))ogl_get_proc_address("glFramebufferTexture3D");
	if(!_ogl_glFramebufferTexture3D) num_failed++;
	_ogl_glFramebufferTextureLayer = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLuint, GLint, GLint))ogl_get_proc_address("glFramebufferTextureLayer");
	if(!_ogl_glFramebufferTextureLayer) num_failed++;
	_ogl_glGenFramebuffers = (void (OGL_FUNCPTR *)(GLsizei, GLuint *))ogl_get_proc_address("glGenFramebuffers");
	if(!_ogl_glGenFramebuffers) num_failed++;
	_ogl_glGenRenderbuffers = (void (OGL_FUNCPTR *)(GLsizei, GLuint *))ogl_get_proc_address("glGenRenderbuffers");
	if(!_ogl_glGenRenderbuffers) num_failed++;
	_ogl_glGenVertexArrays = (void (OGL_FUNCPTR *)(GLsizei, GLuint *))ogl_get_proc_address("glGenVertexArrays");
	if(!_ogl_glGenVertexArrays) num_failed++;
	_ogl_glGenerateMipmap = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glGenerateMipmap");
	if(!_ogl_glGenerateMipmap) num_failed++;
	_ogl_glGetBooleani_v = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLboolean *))ogl_get_proc_address("glGetBooleani_v");
	if(!_ogl_glGetBooleani_v) num_failed++;
	_ogl_glGetFragDataLocation = (GLint (OGL_FUNCPTR *)(GLuint, const GLchar *))ogl_get_proc_address("glGetFragDataLocation");
	if(!_ogl_glGetFragDataLocation) num_failed++;
	_ogl_glGetFramebufferAttachmentParameteriv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLenum, GLint *))ogl_get_proc_address("glGetFramebufferAttachmentParameteriv");
	if(!_ogl_glGetFramebufferAttachmentParameteriv) num_failed++;
	_ogl_glGetIntegeri_v = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLint *))ogl_get_proc_address("glGetIntegeri_v");
	if(!_ogl_glGetIntegeri_v) num_failed++;
	_ogl_glGetRenderbufferParameteriv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *))ogl_get_proc_address("glGetRenderbufferParameteriv");
	if(!_ogl_glGetRenderbufferParameteriv) num_failed++;
	_ogl_glGetStringi = (const GLubyte * (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glGetStringi");
	if(!_ogl_glGetStringi) num_failed++;
	_ogl_glGetTexParameterIiv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *))ogl_get_proc_address("glGetTexParameterIiv");
	if(!_ogl_glGetTexParameterIiv) num_failed++;
	_ogl_glGetTexParameterIuiv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLuint *))ogl_get_proc_address("glGetTexParameterIuiv");
	if(!_ogl_glGetTexParameterIuiv) num_failed++;
	_ogl_glGetTransformFeedbackVarying = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *))ogl_get_proc_address("glGetTransformFeedbackVarying");
	if(!_ogl_glGetTransformFeedbackVarying) num_failed++;
	_ogl_glGetUniformuiv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLuint *))ogl_get_proc_address("glGetUniformuiv");
	if(!_ogl_glGetUniformuiv) num_failed++;
	_ogl_glGetVertexAttribIiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint *))ogl_get_proc_address("glGetVertexAttribIiv");
	if(!_ogl_glGetVertexAttribIiv) num_failed++;
	_ogl_glGetVertexAttribIuiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLuint *))ogl_get_proc_address("glGetVertexAttribIuiv");
	if(!_ogl_glGetVertexAttribIuiv) num_failed++;
	_ogl_glIsEnabledi = (GLboolean (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glIsEnabledi");
	if(!_ogl_glIsEnabledi) num_failed++;
	_ogl_glIsFramebuffer = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsFramebuffer");
	if(!_ogl_glIsFramebuffer) num_failed++;
	_ogl_glIsRenderbuffer = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsRenderbuffer");
	if(!_ogl_glIsRenderbuffer) num_failed++;
	_ogl_glIsVertexArray = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsVertexArray");
	if(!_ogl_glIsVertexArray) num_failed++;
	_ogl_glMapBufferRange = (void * (OGL_FUNCPTR *)(GLenum, GLintptr, GLsizeiptr, GLbitfield))ogl_get_proc_address("glMapBufferRange");
	if(!_ogl_glMapBufferRange) num_failed++;
	_ogl_glRenderbufferStorage = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLsizei, GLsizei))ogl_get_proc_address("glRenderbufferStorage");
	if(!_ogl_glRenderbufferStorage) num_failed++;
	_ogl_glRenderbufferStorageMultisample = (void (OGL_FUNCPTR *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))ogl_get_proc_address("glRenderbufferStorageMultisample");
	if(!_ogl_glRenderbufferStorageMultisample) num_failed++;
	_ogl_glTexParameterIiv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLint *))ogl_get_proc_address("glTexParameterIiv");
	if(!_ogl_glTexParameterIiv) num_failed++;
	_ogl_glTexParameterIuiv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLuint *))ogl_get_proc_address("glTexParameterIuiv");
	if(!_ogl_glTexParameterIuiv) num_failed++;
	_ogl_glTransformFeedbackVaryings = (void (OGL_FUNCPTR *)(GLuint, GLsizei, const GLchar *const*, GLenum))ogl_get_proc_address("glTransformFeedbackVaryings");
	if(!_ogl_glTransformFeedbackVaryings) num_failed++;
	_ogl_glUniform1ui = (void (OGL_FUNCPTR *)(GLint, GLuint))ogl_get_proc_address("glUniform1ui");
	if(!_ogl_glUniform1ui) num_failed++;
	_ogl_glUniform1uiv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLuint *))ogl_get_proc_address("glUniform1uiv");
	if(!_ogl_glUniform1uiv) num_failed++;
	_ogl_glUniform2ui = (void (OGL_FUNCPTR *)(GLint, GLuint, GLuint))ogl_get_proc_address("glUniform2ui");
	if(!_ogl_glUniform2ui) num_failed++;
	_ogl_glUniform2uiv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLuint *))ogl_get_proc_address("glUniform2uiv");
	if(!_ogl_glUniform2uiv) num_failed++;
	_ogl_glUniform3ui = (void (OGL_FUNCPTR *)(GLint, GLuint, GLuint, GLuint))ogl_get_proc_address("glUniform3ui");
	if(!_ogl_glUniform3ui) num_failed++;
	_ogl_glUniform3uiv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLuint *))ogl_get_proc_address("glUniform3uiv");
	if(!_ogl_glUniform3uiv) num_failed++;
	_ogl_glUniform4ui = (void (OGL_FUNCPTR *)(GLint, GLuint, GLuint, GLuint, GLuint))ogl_get_proc_address("glUniform4ui");
	if(!_ogl_glUniform4ui) num_failed++;
	_ogl_glUniform4uiv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLuint *))ogl_get_proc_address("glUniform4uiv");
	if(!_ogl_glUniform4uiv) num_failed++;
	_ogl_glVertexAttribI1i = (void (OGL_FUNCPTR *)(GLuint, GLint))ogl_get_proc_address("glVertexAttribI1i");
	if(!_ogl_glVertexAttribI1i) num_failed++;
	_ogl_glVertexAttribI1iv = (void (OGL_FUNCPTR *)(GLuint, const GLint *))ogl_get_proc_address("glVertexAttribI1iv");
	if(!_ogl_glVertexAttribI1iv) num_failed++;
	_ogl_glVertexAttribI1ui = (void (OGL_FUNCPTR *)(GLuint, GLuint))ogl_get_proc_address("glVertexAttribI1ui");
	if(!_ogl_glVertexAttribI1ui) num_failed++;
	_ogl_glVertexAttribI1uiv = (void (OGL_FUNCPTR *)(GLuint, const GLuint *))ogl_get_proc_address("glVertexAttribI1uiv");
	if(!_ogl_glVertexAttribI1uiv) num_failed++;
	_ogl_glVertexAttribI2i = (void (OGL_FUNCPTR *)(GLuint, GLint, GLint))ogl_get_proc_address("glVertexAttribI2i");
	if(!_ogl_glVertexAttribI2i) num_failed++;
	_ogl_glVertexAttribI2iv = (void (OGL_FUNCPTR *)(GLuint, const GLint *))ogl_get_proc_address("glVertexAttribI2iv");
	if(!_ogl_glVertexAttribI2iv) num_failed++;
	_ogl_glVertexAttribI2ui = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLuint))ogl_get_proc_address("glVertexAttribI2ui");
	if(!_ogl_glVertexAttribI2ui) num_failed++;
	_ogl_glVertexAttribI2uiv = (void (OGL_FUNCPTR *)(GLuint, const GLuint *))ogl_get_proc_address("glVertexAttribI2uiv");
	if(!_ogl_glVertexAttribI2uiv) num_failed++;
	_ogl_glVertexAttribI3i = (void (OGL_FUNCPTR *)(GLuint, GLint, GLint, GLint))ogl_get_proc_address("glVertexAttribI3i");
	if(!_ogl_glVertexAttribI3i) num_failed++;
	_ogl_glVertexAttribI3iv = (void (OGL_FUNCPTR *)(GLuint, const GLint *))ogl_get_proc_address("glVertexAttribI3iv");
	if(!_ogl_glVertexAttribI3iv) num_failed++;
	_ogl_glVertexAttribI3ui = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLuint, GLuint))ogl_get_proc_address("glVertexAttribI3ui");
	if(!_ogl_glVertexAttribI3ui) num_failed++;
	_ogl_glVertexAttribI3uiv = (void (OGL_FUNCPTR *)(GLuint, const GLuint *))ogl_get_proc_address("glVertexAttribI3uiv");
	if(!_ogl_glVertexAttribI3uiv) num_failed++;
	_ogl_glVertexAttribI4bv = (void (OGL_FUNCPTR *)(GLuint, const GLbyte *))ogl_get_proc_address("glVertexAttribI4bv");
	if(!_ogl_glVertexAttribI4bv) num_failed++;
	_ogl_glVertexAttribI4i = (void (OGL_FUNCPTR *)(GLuint, GLint, GLint, GLint, GLint))ogl_get_proc_address("glVertexAttribI4i");
	if(!_ogl_glVertexAttribI4i) num_failed++;
	_ogl_glVertexAttribI4iv = (void (OGL_FUNCPTR *)(GLuint, const GLint *))ogl_get_proc_address("glVertexAttribI4iv");
	if(!_ogl_glVertexAttribI4iv) num_failed++;
	_ogl_glVertexAttribI4sv = (void (OGL_FUNCPTR *)(GLuint, const GLshort *))ogl_get_proc_address("glVertexAttribI4sv");
	if(!_ogl_glVertexAttribI4sv) num_failed++;
	_ogl_glVertexAttribI4ubv = (void (OGL_FUNCPTR *)(GLuint, const GLubyte *))ogl_get_proc_address("glVertexAttribI4ubv");
	if(!_ogl_glVertexAttribI4ubv) num_failed++;
	_ogl_glVertexAttribI4ui = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLuint, GLuint, GLuint))ogl_get_proc_address("glVertexAttribI4ui");
	if(!_ogl_glVertexAttribI4ui) num_failed++;
	_ogl_glVertexAttribI4uiv = (void (OGL_FUNCPTR *)(GLuint, const GLuint *))ogl_get_proc_address("glVertexAttribI4uiv");
	if(!_ogl_glVertexAttribI4uiv) num_failed++;
	_ogl_glVertexAttribI4usv = (void (OGL_FUNCPTR *)(GLuint, const GLushort *))ogl_get_proc_address("glVertexAttribI4usv");
	if(!_ogl_glVertexAttribI4usv) num_failed++;
	_ogl_glVertexAttribIPointer = (void (OGL_FUNCPTR *)(GLuint, GLint, GLenum, GLsizei, const void *))ogl_get_proc_address("glVertexAttribIPointer");
	if(!_ogl_glVertexAttribIPointer) num_failed++;
	_ogl_glCopyBufferSubData = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr))ogl_get_proc_address("glCopyBufferSubData");
	if(!_ogl_glCopyBufferSubData) num_failed++;
	_ogl_glDrawArraysInstanced = (void (OGL_FUNCPTR *)(GLenum, GLint, GLsizei, GLsizei))ogl_get_proc_address("glDrawArraysInstanced");
	if(!_ogl_glDrawArraysInstanced) num_failed++;
	_ogl_glDrawElementsInstanced = (void (OGL_FUNCPTR *)(GLenum, GLsizei, GLenum, const void *, GLsizei))ogl_get_proc_address("glDrawElementsInstanced");
	if(!_ogl_glDrawElementsInstanced) num_failed++;
	_ogl_glGetActiveUniformBlockName = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))ogl_get_proc_address("glGetActiveUniformBlockName");
	if(!_ogl_glGetActiveUniformBlockName) num_failed++;
	_ogl_glGetActiveUniformBlockiv = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLenum, GLint *))ogl_get_proc_address("glGetActiveUniformBlockiv");
	if(!_ogl_glGetActiveUniformBlockiv) num_failed++;
	_ogl_glGetActiveUniformName = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))ogl_get_proc_address("glGetActiveUniformName");
	if(!_ogl_glGetActiveUniformName) num_failed++;
	_ogl_glGetActiveUniformsiv = (void (OGL_FUNCPTR *)(GLuint, GLsizei, const GLuint *, GLenum, GLint *))ogl_get_proc_address("glGetActiveUniformsiv");
	if(!_ogl_glGetActiveUniformsiv) num_failed++;
	_ogl_glGetUniformBlockIndex = (GLuint (OGL_FUNCPTR *)(GLuint, const GLchar *))ogl_get_proc_address("glGetUniformBlockIndex");
	if(!_ogl_glGetUniformBlockIndex) num_failed++;
	_ogl_glGetUniformIndices = (void (OGL_FUNCPTR *)(GLuint, GLsizei, const GLchar *const*, GLuint *))ogl_get_proc_address("glGetUniformIndices");
	if(!_ogl_glGetUniformIndices) num_failed++;
	_ogl_glPrimitiveRestartIndex = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glPrimitiveRestartIndex");
	if(!_ogl_glPrimitiveRestartIndex) num_failed++;
	_ogl_glTexBuffer = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLuint))ogl_get_proc_address("glTexBuffer");
	if(!_ogl_glTexBuffer) num_failed++;
	_ogl_glUniformBlockBinding = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLuint))ogl_get_proc_address("glUniformBlockBinding");
	if(!_ogl_glUniformBlockBinding) num_failed++;
	_ogl_glClientWaitSync = (GLenum (OGL_FUNCPTR *)(GLsync, GLbitfield, GLuint64))ogl_get_proc_address("glClientWaitSync");
	if(!_ogl_glClientWaitSync) num_failed++;
	_ogl_glDeleteSync = (void (OGL_FUNCPTR *)(GLsync))ogl_get_proc_address("glDeleteSync");
	if(!_ogl_glDeleteSync) num_failed++;
	_ogl_glDrawElementsBaseVertex = (void (OGL_FUNCPTR *)(GLenum, GLsizei, GLenum, const void *, GLint))ogl_get_proc_address("glDrawElementsBaseVertex");
	if(!_ogl_glDrawElementsBaseVertex) num_failed++;
	_ogl_glDrawElementsInstancedBaseVertex = (void (OGL_FUNCPTR *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint))ogl_get_proc_address("glDrawElementsInstancedBaseVertex");
	if(!_ogl_glDrawElementsInstancedBaseVertex) num_failed++;
	_ogl_glDrawRangeElementsBaseVertex = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint))ogl_get_proc_address("glDrawRangeElementsBaseVertex");
	if(!_ogl_glDrawRangeElementsBaseVertex) num_failed++;
	_ogl_glFenceSync = (GLsync (OGL_FUNCPTR *)(GLenum, GLbitfield))ogl_get_proc_address("glFenceSync");
	if(!_ogl_glFenceSync) num_failed++;
	_ogl_glFramebufferTexture = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLuint, GLint))ogl_get_proc_address("glFramebufferTexture");
	if(!_ogl_glFramebufferTexture) num_failed++;
	_ogl_glGetBufferParameteri64v = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint64 *))ogl_get_proc_address("glGetBufferParameteri64v");
	if(!_ogl_glGetBufferParameteri64v) num_failed++;
	_ogl_glGetInteger64i_v = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLint64 *))ogl_get_proc_address("glGetInteger64i_v");
	if(!_ogl_glGetInteger64i_v) num_failed++;
	_ogl_glGetInteger64v = (void (OGL_FUNCPTR *)(GLenum, GLint64 *))ogl_get_proc_address("glGetInteger64v");
	if(!_ogl_glGetInteger64v) num_failed++;
	_ogl_glGetMultisamplefv = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLfloat *))ogl_get_proc_address("glGetMultisamplefv");
	if(!_ogl_glGetMultisamplefv) num_failed++;
	_ogl_glGetSynciv = (void (OGL_FUNCPTR *)(GLsync, GLenum, GLsizei, GLsizei *, GLint *))ogl_get_proc_address("glGetSynciv");
	if(!_ogl_glGetSynciv) num_failed++;
	_ogl_glIsSync = (GLboolean (OGL_FUNCPTR *)(GLsync))ogl_get_proc_address("glIsSync");
	if(!_ogl_glIsSync) num_failed++;
	_ogl_glMultiDrawElementsBaseVertex = (void (OGL_FUNCPTR *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *))ogl_get_proc_address("glMultiDrawElementsBaseVertex");
	if(!_ogl_glMultiDrawElementsBaseVertex) num_failed++;
	_ogl_glProvokingVertex = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glProvokingVertex");
	if(!_ogl_glProvokingVertex) num_failed++;
	_ogl_glSampleMaski = (void (OGL_FUNCPTR *)(GLuint, GLbitfield))ogl_get_proc_address("glSampleMaski");
	if(!_ogl_glSampleMaski) num_failed++;
	_ogl_glTexImage2DMultisample = (void (OGL_FUNCPTR *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))ogl_get_proc_address("glTexImage2DMultisample");
	if(!_ogl_glTexImage2DMultisample) num_failed++;
	_ogl_glTexImage3DMultisample = (void (OGL_FUNCPTR *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))ogl_get_proc_address("glTexImage3DMultisample");
	if(!_ogl_glTexImage3DMultisample) num_failed++;
	_ogl_glWaitSync = (void (OGL_FUNCPTR *)(GLsync, GLbitfield, GLuint64))ogl_get_proc_address("glWaitSync");
	if(!_ogl_glWaitSync) num_failed++;
	_ogl_glBindFragDataLocationIndexed = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLuint, const GLchar *))ogl_get_proc_address("glBindFragDataLocationIndexed");
	if(!_ogl_glBindFragDataLocationIndexed) num_failed++;
	_ogl_glBindSampler = (void (OGL_FUNCPTR *)(GLuint, GLuint))ogl_get_proc_address("glBindSampler");
	if(!_ogl_glBindSampler) num_failed++;
	_ogl_glDeleteSamplers = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *))ogl_get_proc_address("glDeleteSamplers");
	if(!_ogl_glDeleteSamplers) num_failed++;
	_ogl_glGenSamplers = (void (OGL_FUNCPTR *)(GLsizei, GLuint *))ogl_get_proc_address("glGenSamplers");
	if(!_ogl_glGenSamplers) num_failed++;
	_ogl_glGetFragDataIndex = (GLint (OGL_FUNCPTR *)(GLuint, const GLchar *))ogl_get_proc_address("glGetFragDataIndex");
	if(!_ogl_glGetFragDataIndex) num_failed++;
	_ogl_glGetQueryObjecti64v = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint64 *))ogl_get_proc_address("glGetQueryObjecti64v");
	if(!_ogl_glGetQueryObjecti64v) num_failed++;
	_ogl_glGetQueryObjectui64v = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLuint64 *))ogl_get_proc_address("glGetQueryObjectui64v");
	if(!_ogl_glGetQueryObjectui64v) num_failed++;
	_ogl_glGetSamplerParameterIiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint *))ogl_get_proc_address("glGetSamplerParameterIiv");
	if(!_ogl_glGetSamplerParameterIiv) num_failed++;
	_ogl_glGetSamplerParameterIuiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLuint *))ogl_get_proc_address("glGetSamplerParameterIuiv");
	if(!_ogl_glGetSamplerParameterIuiv) num_failed++;
	_ogl_glGetSamplerParameterfv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLfloat *))ogl_get_proc_address("glGetSamplerParameterfv");
	if(!_ogl_glGetSamplerParameterfv) num_failed++;
	_ogl_glGetSamplerParameteriv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint *))ogl_get_proc_address("glGetSamplerParameteriv");
	if(!_ogl_glGetSamplerParameteriv) num_failed++;
	_ogl_glIsSampler = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsSampler");
	if(!_ogl_glIsSampler) num_failed++;
	_ogl_glQueryCounter = (void (OGL_FUNCPTR *)(GLuint, GLenum))ogl_get_proc_address("glQueryCounter");
	if(!_ogl_glQueryCounter) num_failed++;
	_ogl_glSamplerParameterIiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, const GLint *))ogl_get_proc_address("glSamplerParameterIiv");
	if(!_ogl_glSamplerParameterIiv) num_failed++;
	_ogl_glSamplerParameterIuiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, const GLuint *))ogl_get_proc_address("glSamplerParameterIuiv");
	if(!_ogl_glSamplerParameterIuiv) num_failed++;
	_ogl_glSamplerParameterf = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLfloat))ogl_get_proc_address("glSamplerParameterf");
	if(!_ogl_glSamplerParameterf) num_failed++;
	_ogl_glSamplerParameterfv = (void (OGL_FUNCPTR *)(GLuint, GLenum, const GLfloat *))ogl_get_proc_address("glSamplerParameterfv");
	if(!_ogl_glSamplerParameterfv) num_failed++;
	_ogl_glSamplerParameteri = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint))ogl_get_proc_address("glSamplerParameteri");
	if(!_ogl_glSamplerParameteri) num_failed++;
	_ogl_glSamplerParameteriv = (void (OGL_FUNCPTR *)(GLuint, GLenum, const GLint *))ogl_get_proc_address("glSamplerParameteriv");
	if(!_ogl_glSamplerParameteriv) num_failed++;
	_ogl_glVertexAttribDivisor = (void (OGL_FUNCPTR *)(GLuint, GLuint))ogl_get_proc_address("glVertexAttribDivisor");
	if(!_ogl_glVertexAttribDivisor) num_failed++;
	_ogl_glVertexAttribP1ui = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLboolean, GLuint))ogl_get_proc_address("glVertexAttribP1ui");
	if(!_ogl_glVertexAttribP1ui) num_failed++;
	_ogl_glVertexAttribP1uiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLboolean, const GLuint *))ogl_get_proc_address("glVertexAttribP1uiv");
	if(!_ogl_glVertexAttribP1uiv) num_failed++;
	_ogl_glVertexAttribP2ui = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLboolean, GLuint))ogl_get_proc_address("glVertexAttribP2ui");
	if(!_ogl_glVertexAttribP2ui) num_failed++;
	_ogl_glVertexAttribP2uiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLboolean, const GLuint *))ogl_get_proc_address("glVertexAttribP2uiv");
	if(!_ogl_glVertexAttribP2uiv) num_failed++;
	_ogl_glVertexAttribP3ui = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLboolean, GLuint))ogl_get_proc_address("glVertexAttribP3ui");
	if(!_ogl_glVertexAttribP3ui) num_failed++;
	_ogl_glVertexAttribP3uiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLboolean, const GLuint *))ogl_get_proc_address("glVertexAttribP3uiv");
	if(!_ogl_glVertexAttribP3uiv) num_failed++;
	_ogl_glVertexAttribP4ui = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLboolean, GLuint))ogl_get_proc_address("glVertexAttribP4ui");
	if(!_ogl_glVertexAttribP4ui) num_failed++;
	_ogl_glVertexAttribP4uiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLboolean, const GLuint *))ogl_get_proc_address("glVertexAttribP4uiv");
	if(!_ogl_glVertexAttribP4uiv) num_failed++;
	_ogl_glBeginQueryIndexed = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLuint))ogl_get_proc_address("glBeginQueryIndexed");
	if(!_ogl_glBeginQueryIndexed) num_failed++;
	_ogl_glBindTransformFeedback = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glBindTransformFeedback");
	if(!_ogl_glBindTransformFeedback) num_failed++;
	_ogl_glBlendEquationSeparatei = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLenum))ogl_get_proc_address("glBlendEquationSeparatei");
	if(!_ogl_glBlendEquationSeparatei) num_failed++;
	_ogl_glBlendEquationi = (void (OGL_FUNCPTR *)(GLuint, GLenum))ogl_get_proc_address("glBlendEquationi");
	if(!_ogl_glBlendEquationi) num_failed++;
	_ogl_glBlendFuncSeparatei = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLenum, GLenum, GLenum))ogl_get_proc_address("glBlendFuncSeparatei");
	if(!_ogl_glBlendFuncSeparatei) num_failed++;
	_ogl_glBlendFunci = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLenum))ogl_get_proc_address("glBlendFunci");
	if(!_ogl_glBlendFunci) num_failed++;
	_ogl_glDeleteTransformFeedbacks = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *))ogl_get_proc_address("glDeleteTransformFeedbacks");
	if(!_ogl_glDeleteTransformFeedbacks) num_failed++;
	_ogl_glDrawArraysIndirect = (void (OGL_FUNCPTR *)(GLenum, const void *))ogl_get_proc_address("glDrawArraysIndirect");
	if(!_ogl_glDrawArraysIndirect) num_failed++;
	_ogl_glDrawElementsIndirect = (void (OGL_FUNCPTR *)(GLenum, GLenum, const void *))ogl_get_proc_address("glDrawElementsIndirect");
	if(!_ogl_glDrawElementsIndirect) num_failed++;
	_ogl_glDrawTransformFeedback = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glDrawTransformFeedback");
	if(!_ogl_glDrawTransformFeedback) num_failed++;
	_ogl_glDrawTransformFeedbackStream = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLuint))ogl_get_proc_address("glDrawTransformFeedbackStream");
	if(!_ogl_glDrawTransformFeedbackStream) num_failed++;
	_ogl_glEndQueryIndexed = (void (OGL_FUNCPTR *)(GLenum, GLuint))ogl_get_proc_address("glEndQueryIndexed");
	if(!_ogl_glEndQueryIndexed) num_failed++;
	_ogl_glGenTransformFeedbacks = (void (OGL_FUNCPTR *)(GLsizei, GLuint *))ogl_get_proc_address("glGenTransformFeedbacks");
	if(!_ogl_glGenTransformFeedbacks) num_failed++;
	_ogl_glGetActiveSubroutineName = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))ogl_get_proc_address("glGetActiveSubroutineName");
	if(!_ogl_glGetActiveSubroutineName) num_failed++;
	_ogl_glGetActiveSubroutineUniformName = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))ogl_get_proc_address("glGetActiveSubroutineUniformName");
	if(!_ogl_glGetActiveSubroutineUniformName) num_failed++;
	_ogl_glGetActiveSubroutineUniformiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLuint, GLenum, GLint *))ogl_get_proc_address("glGetActiveSubroutineUniformiv");
	if(!_ogl_glGetActiveSubroutineUniformiv) num_failed++;
	_ogl_glGetProgramStageiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLenum, GLint *))ogl_get_proc_address("glGetProgramStageiv");
	if(!_ogl_glGetProgramStageiv) num_failed++;
	_ogl_glGetQueryIndexediv = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLenum, GLint *))ogl_get_proc_address("glGetQueryIndexediv");
	if(!_ogl_glGetQueryIndexediv) num_failed++;
	_ogl_glGetSubroutineIndex = (GLuint (OGL_FUNCPTR *)(GLuint, GLenum, const GLchar *))ogl_get_proc_address("glGetSubroutineIndex");
	if(!_ogl_glGetSubroutineIndex) num_failed++;
	_ogl_glGetSubroutineUniformLocation = (GLint (OGL_FUNCPTR *)(GLuint, GLenum, const GLchar *))ogl_get_proc_address("glGetSubroutineUniformLocation");
	if(!_ogl_glGetSubroutineUniformLocation) num_failed++;
	_ogl_glGetUniformSubroutineuiv = (void (OGL_FUNCPTR *)(GLenum, GLint, GLuint *))ogl_get_proc_address("glGetUniformSubroutineuiv");
	if(!_ogl_glGetUniformSubroutineuiv) num_failed++;
	_ogl_glGetUniformdv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLdouble *))ogl_get_proc_address("glGetUniformdv");
	if(!_ogl_glGetUniformdv) num_failed++;
	_ogl_glIsTransformFeedback = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsTransformFeedback");
	if(!_ogl_glIsTransformFeedback) num_failed++;
	_ogl_glMinSampleShading = (void (OGL_FUNCPTR *)(GLfloat))ogl_get_proc_address("glMinSampleShading");
	if(!_ogl_glMinSampleShading) num_failed++;
	_ogl_glPatchParameterfv = (void (OGL_FUNCPTR *)(GLenum, const GLfloat *))ogl_get_proc_address("glPatchParameterfv");
	if(!_ogl_glPatchParameterfv) num_failed++;
	_ogl_glPatchParameteri = (void (OGL_FUNCPTR *)(GLenum, GLint))ogl_get_proc_address("glPatchParameteri");
	if(!_ogl_glPatchParameteri) num_failed++;
	_ogl_glPauseTransformFeedback = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glPauseTransformFeedback");
	if(!_ogl_glPauseTransformFeedback) num_failed++;
	_ogl_glResumeTransformFeedback = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glResumeTransformFeedback");
	if(!_ogl_glResumeTransformFeedback) num_failed++;
	_ogl_glUniform1d = (void (OGL_FUNCPTR *)(GLint, GLdouble))ogl_get_proc_address("glUniform1d");
	if(!_ogl_glUniform1d) num_failed++;
	_ogl_glUniform1dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLdouble *))ogl_get_proc_address("glUniform1dv");
	if(!_ogl_glUniform1dv) num_failed++;
	_ogl_glUniform2d = (void (OGL_FUNCPTR *)(GLint, GLdouble, GLdouble))ogl_get_proc_address("glUniform2d");
	if(!_ogl_glUniform2d) num_failed++;
	_ogl_glUniform2dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLdouble *))ogl_get_proc_address("glUniform2dv");
	if(!_ogl_glUniform2dv) num_failed++;
	_ogl_glUniform3d = (void (OGL_FUNCPTR *)(GLint, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glUniform3d");
	if(!_ogl_glUniform3d) num_failed++;
	_ogl_glUniform3dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLdouble *))ogl_get_proc_address("glUniform3dv");
	if(!_ogl_glUniform3dv) num_failed++;
	_ogl_glUniform4d = (void (OGL_FUNCPTR *)(GLint, GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glUniform4d");
	if(!_ogl_glUniform4d) num_failed++;
	_ogl_glUniform4dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, const GLdouble *))ogl_get_proc_address("glUniform4dv");
	if(!_ogl_glUniform4dv) num_failed++;
	_ogl_glUniformMatrix2dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glUniformMatrix2dv");
	if(!_ogl_glUniformMatrix2dv) num_failed++;
	_ogl_glUniformMatrix2x3dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glUniformMatrix2x3dv");
	if(!_ogl_glUniformMatrix2x3dv) num_failed++;
	_ogl_glUniformMatrix2x4dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glUniformMatrix2x4dv");
	if(!_ogl_glUniformMatrix2x4dv) num_failed++;
	_ogl_glUniformMatrix3dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glUniformMatrix3dv");
	if(!_ogl_glUniformMatrix3dv) num_failed++;
	_ogl_glUniformMatrix3x2dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glUniformMatrix3x2dv");
	if(!_ogl_glUniformMatrix3x2dv) num_failed++;
	_ogl_glUniformMatrix3x4dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glUniformMatrix3x4dv");
	if(!_ogl_glUniformMatrix3x4dv) num_failed++;
	_ogl_glUniformMatrix4dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glUniformMatrix4dv");
	if(!_ogl_glUniformMatrix4dv) num_failed++;
	_ogl_glUniformMatrix4x2dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glUniformMatrix4x2dv");
	if(!_ogl_glUniformMatrix4x2dv) num_failed++;
	_ogl_glUniformMatrix4x3dv = (void (OGL_FUNCPTR *)(GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glUniformMatrix4x3dv");
	if(!_ogl_glUniformMatrix4x3dv) num_failed++;
	_ogl_glUniformSubroutinesuiv = (void (OGL_FUNCPTR *)(GLenum, GLsizei, const GLuint *))ogl_get_proc_address("glUniformSubroutinesuiv");
	if(!_ogl_glUniformSubroutinesuiv) num_failed++;
	_ogl_glActiveShaderProgram = (void (OGL_FUNCPTR *)(GLuint, GLuint))ogl_get_proc_address("glActiveShaderProgram");
	if(!_ogl_glActiveShaderProgram) num_failed++;
	_ogl_glBindProgramPipeline = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glBindProgramPipeline");
	if(!_ogl_glBindProgramPipeline) num_failed++;
	_ogl_glClearDepthf = (void (OGL_FUNCPTR *)(GLfloat))ogl_get_proc_address("glClearDepthf");
	if(!_ogl_glClearDepthf) num_failed++;
	_ogl_glCreateShaderProgramv = (GLuint (OGL_FUNCPTR *)(GLenum, GLsizei, const GLchar *const*))ogl_get_proc_address("glCreateShaderProgramv");
	if(!_ogl_glCreateShaderProgramv) num_failed++;
	_ogl_glDeleteProgramPipelines = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *))ogl_get_proc_address("glDeleteProgramPipelines");
	if(!_ogl_glDeleteProgramPipelines) num_failed++;
	_ogl_glDepthRangeArrayv = (void (OGL_FUNCPTR *)(GLuint, GLsizei, const GLdouble *))ogl_get_proc_address("glDepthRangeArrayv");
	if(!_ogl_glDepthRangeArrayv) num_failed++;
	_ogl_glDepthRangeIndexed = (void (OGL_FUNCPTR *)(GLuint, GLdouble, GLdouble))ogl_get_proc_address("glDepthRangeIndexed");
	if(!_ogl_glDepthRangeIndexed) num_failed++;
	_ogl_glDepthRangef = (void (OGL_FUNCPTR *)(GLfloat, GLfloat))ogl_get_proc_address("glDepthRangef");
	if(!_ogl_glDepthRangef) num_failed++;
	_ogl_glGenProgramPipelines = (void (OGL_FUNCPTR *)(GLsizei, GLuint *))ogl_get_proc_address("glGenProgramPipelines");
	if(!_ogl_glGenProgramPipelines) num_failed++;
	_ogl_glGetDoublei_v = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLdouble *))ogl_get_proc_address("glGetDoublei_v");
	if(!_ogl_glGetDoublei_v) num_failed++;
	_ogl_glGetFloati_v = (void (OGL_FUNCPTR *)(GLenum, GLuint, GLfloat *))ogl_get_proc_address("glGetFloati_v");
	if(!_ogl_glGetFloati_v) num_failed++;
	_ogl_glGetProgramBinary = (void (OGL_FUNCPTR *)(GLuint, GLsizei, GLsizei *, GLenum *, void *))ogl_get_proc_address("glGetProgramBinary");
	if(!_ogl_glGetProgramBinary) num_failed++;
	_ogl_glGetProgramPipelineInfoLog = (void (OGL_FUNCPTR *)(GLuint, GLsizei, GLsizei *, GLchar *))ogl_get_proc_address("glGetProgramPipelineInfoLog");
	if(!_ogl_glGetProgramPipelineInfoLog) num_failed++;
	_ogl_glGetProgramPipelineiv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint *))ogl_get_proc_address("glGetProgramPipelineiv");
	if(!_ogl_glGetProgramPipelineiv) num_failed++;
	_ogl_glGetShaderPrecisionFormat = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *, GLint *))ogl_get_proc_address("glGetShaderPrecisionFormat");
	if(!_ogl_glGetShaderPrecisionFormat) num_failed++;
	_ogl_glGetVertexAttribLdv = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLdouble *))ogl_get_proc_address("glGetVertexAttribLdv");
	if(!_ogl_glGetVertexAttribLdv) num_failed++;
	_ogl_glIsProgramPipeline = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsProgramPipeline");
	if(!_ogl_glIsProgramPipeline) num_failed++;
	_ogl_glProgramBinary = (void (OGL_FUNCPTR *)(GLuint, GLenum, const void *, GLsizei))ogl_get_proc_address("glProgramBinary");
	if(!_ogl_glProgramBinary) num_failed++;
	_ogl_glProgramParameteri = (void (OGL_FUNCPTR *)(GLuint, GLenum, GLint))ogl_get_proc_address("glProgramParameteri");
	if(!_ogl_glProgramParameteri) num_failed++;
	_ogl_glProgramUniform1d = (void (OGL_FUNCPTR *)(GLuint, GLint, GLdouble))ogl_get_proc_address("glProgramUniform1d");
	if(!_ogl_glProgramUniform1d) num_failed++;
	_ogl_glProgramUniform1dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLdouble *))ogl_get_proc_address("glProgramUniform1dv");
	if(!_ogl_glProgramUniform1dv) num_failed++;
	_ogl_glProgramUniform1f = (void (OGL_FUNCPTR *)(GLuint, GLint, GLfloat))ogl_get_proc_address("glProgramUniform1f");
	if(!_ogl_glProgramUniform1f) num_failed++;
	_ogl_glProgramUniform1fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLfloat *))ogl_get_proc_address("glProgramUniform1fv");
	if(!_ogl_glProgramUniform1fv) num_failed++;
	_ogl_glProgramUniform1i = (void (OGL_FUNCPTR *)(GLuint, GLint, GLint))ogl_get_proc_address("glProgramUniform1i");
	if(!_ogl_glProgramUniform1i) num_failed++;
	_ogl_glProgramUniform1iv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLint *))ogl_get_proc_address("glProgramUniform1iv");
	if(!_ogl_glProgramUniform1iv) num_failed++;
	_ogl_glProgramUniform1ui = (void (OGL_FUNCPTR *)(GLuint, GLint, GLuint))ogl_get_proc_address("glProgramUniform1ui");
	if(!_ogl_glProgramUniform1ui) num_failed++;
	_ogl_glProgramUniform1uiv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLuint *))ogl_get_proc_address("glProgramUniform1uiv");
	if(!_ogl_glProgramUniform1uiv) num_failed++;
	_ogl_glProgramUniform2d = (void (OGL_FUNCPTR *)(GLuint, GLint, GLdouble, GLdouble))ogl_get_proc_address("glProgramUniform2d");
	if(!_ogl_glProgramUniform2d) num_failed++;
	_ogl_glProgramUniform2dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLdouble *))ogl_get_proc_address("glProgramUniform2dv");
	if(!_ogl_glProgramUniform2dv) num_failed++;
	_ogl_glProgramUniform2f = (void (OGL_FUNCPTR *)(GLuint, GLint, GLfloat, GLfloat))ogl_get_proc_address("glProgramUniform2f");
	if(!_ogl_glProgramUniform2f) num_failed++;
	_ogl_glProgramUniform2fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLfloat *))ogl_get_proc_address("glProgramUniform2fv");
	if(!_ogl_glProgramUniform2fv) num_failed++;
	_ogl_glProgramUniform2i = (void (OGL_FUNCPTR *)(GLuint, GLint, GLint, GLint))ogl_get_proc_address("glProgramUniform2i");
	if(!_ogl_glProgramUniform2i) num_failed++;
	_ogl_glProgramUniform2iv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLint *))ogl_get_proc_address("glProgramUniform2iv");
	if(!_ogl_glProgramUniform2iv) num_failed++;
	_ogl_glProgramUniform2ui = (void (OGL_FUNCPTR *)(GLuint, GLint, GLuint, GLuint))ogl_get_proc_address("glProgramUniform2ui");
	if(!_ogl_glProgramUniform2ui) num_failed++;
	_ogl_glProgramUniform2uiv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLuint *))ogl_get_proc_address("glProgramUniform2uiv");
	if(!_ogl_glProgramUniform2uiv) num_failed++;
	_ogl_glProgramUniform3d = (void (OGL_FUNCPTR *)(GLuint, GLint, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glProgramUniform3d");
	if(!_ogl_glProgramUniform3d) num_failed++;
	_ogl_glProgramUniform3dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLdouble *))ogl_get_proc_address("glProgramUniform3dv");
	if(!_ogl_glProgramUniform3dv) num_failed++;
	_ogl_glProgramUniform3f = (void (OGL_FUNCPTR *)(GLuint, GLint, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glProgramUniform3f");
	if(!_ogl_glProgramUniform3f) num_failed++;
	_ogl_glProgramUniform3fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLfloat *))ogl_get_proc_address("glProgramUniform3fv");
	if(!_ogl_glProgramUniform3fv) num_failed++;
	_ogl_glProgramUniform3i = (void (OGL_FUNCPTR *)(GLuint, GLint, GLint, GLint, GLint))ogl_get_proc_address("glProgramUniform3i");
	if(!_ogl_glProgramUniform3i) num_failed++;
	_ogl_glProgramUniform3iv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLint *))ogl_get_proc_address("glProgramUniform3iv");
	if(!_ogl_glProgramUniform3iv) num_failed++;
	_ogl_glProgramUniform3ui = (void (OGL_FUNCPTR *)(GLuint, GLint, GLuint, GLuint, GLuint))ogl_get_proc_address("glProgramUniform3ui");
	if(!_ogl_glProgramUniform3ui) num_failed++;
	_ogl_glProgramUniform3uiv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLuint *))ogl_get_proc_address("glProgramUniform3uiv");
	if(!_ogl_glProgramUniform3uiv) num_failed++;
	_ogl_glProgramUniform4d = (void (OGL_FUNCPTR *)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glProgramUniform4d");
	if(!_ogl_glProgramUniform4d) num_failed++;
	_ogl_glProgramUniform4dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLdouble *))ogl_get_proc_address("glProgramUniform4dv");
	if(!_ogl_glProgramUniform4dv) num_failed++;
	_ogl_glProgramUniform4f = (void (OGL_FUNCPTR *)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glProgramUniform4f");
	if(!_ogl_glProgramUniform4f) num_failed++;
	_ogl_glProgramUniform4fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLfloat *))ogl_get_proc_address("glProgramUniform4fv");
	if(!_ogl_glProgramUniform4fv) num_failed++;
	_ogl_glProgramUniform4i = (void (OGL_FUNCPTR *)(GLuint, GLint, GLint, GLint, GLint, GLint))ogl_get_proc_address("glProgramUniform4i");
	if(!_ogl_glProgramUniform4i) num_failed++;
	_ogl_glProgramUniform4iv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLint *))ogl_get_proc_address("glProgramUniform4iv");
	if(!_ogl_glProgramUniform4iv) num_failed++;
	_ogl_glProgramUniform4ui = (void (OGL_FUNCPTR *)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint))ogl_get_proc_address("glProgramUniform4ui");
	if(!_ogl_glProgramUniform4ui) num_failed++;
	_ogl_glProgramUniform4uiv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, const GLuint *))ogl_get_proc_address("glProgramUniform4uiv");
	if(!_ogl_glProgramUniform4uiv) num_failed++;
	_ogl_glProgramUniformMatrix2dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glProgramUniformMatrix2dv");
	if(!_ogl_glProgramUniformMatrix2dv) num_failed++;
	_ogl_glProgramUniformMatrix2fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glProgramUniformMatrix2fv");
	if(!_ogl_glProgramUniformMatrix2fv) num_failed++;
	_ogl_glProgramUniformMatrix2x3dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glProgramUniformMatrix2x3dv");
	if(!_ogl_glProgramUniformMatrix2x3dv) num_failed++;
	_ogl_glProgramUniformMatrix2x3fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glProgramUniformMatrix2x3fv");
	if(!_ogl_glProgramUniformMatrix2x3fv) num_failed++;
	_ogl_glProgramUniformMatrix2x4dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glProgramUniformMatrix2x4dv");
	if(!_ogl_glProgramUniformMatrix2x4dv) num_failed++;
	_ogl_glProgramUniformMatrix2x4fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glProgramUniformMatrix2x4fv");
	if(!_ogl_glProgramUniformMatrix2x4fv) num_failed++;
	_ogl_glProgramUniformMatrix3dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glProgramUniformMatrix3dv");
	if(!_ogl_glProgramUniformMatrix3dv) num_failed++;
	_ogl_glProgramUniformMatrix3fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glProgramUniformMatrix3fv");
	if(!_ogl_glProgramUniformMatrix3fv) num_failed++;
	_ogl_glProgramUniformMatrix3x2dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glProgramUniformMatrix3x2dv");
	if(!_ogl_glProgramUniformMatrix3x2dv) num_failed++;
	_ogl_glProgramUniformMatrix3x2fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glProgramUniformMatrix3x2fv");
	if(!_ogl_glProgramUniformMatrix3x2fv) num_failed++;
	_ogl_glProgramUniformMatrix3x4dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glProgramUniformMatrix3x4dv");
	if(!_ogl_glProgramUniformMatrix3x4dv) num_failed++;
	_ogl_glProgramUniformMatrix3x4fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glProgramUniformMatrix3x4fv");
	if(!_ogl_glProgramUniformMatrix3x4fv) num_failed++;
	_ogl_glProgramUniformMatrix4dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glProgramUniformMatrix4dv");
	if(!_ogl_glProgramUniformMatrix4dv) num_failed++;
	_ogl_glProgramUniformMatrix4fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glProgramUniformMatrix4fv");
	if(!_ogl_glProgramUniformMatrix4fv) num_failed++;
	_ogl_glProgramUniformMatrix4x2dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glProgramUniformMatrix4x2dv");
	if(!_ogl_glProgramUniformMatrix4x2dv) num_failed++;
	_ogl_glProgramUniformMatrix4x2fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glProgramUniformMatrix4x2fv");
	if(!_ogl_glProgramUniformMatrix4x2fv) num_failed++;
	_ogl_glProgramUniformMatrix4x3dv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))ogl_get_proc_address("glProgramUniformMatrix4x3dv");
	if(!_ogl_glProgramUniformMatrix4x3dv) num_failed++;
	_ogl_glProgramUniformMatrix4x3fv = (void (OGL_FUNCPTR *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))ogl_get_proc_address("glProgramUniformMatrix4x3fv");
	if(!_ogl_glProgramUniformMatrix4x3fv) num_failed++;
	_ogl_glReleaseShaderCompiler = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glReleaseShaderCompiler");
	if(!_ogl_glReleaseShaderCompiler) num_failed++;
	_ogl_glScissorArrayv = (void (OGL_FUNCPTR *)(GLuint, GLsizei, const GLint *))ogl_get_proc_address("glScissorArrayv");
	if(!_ogl_glScissorArrayv) num_failed++;
	_ogl_glScissorIndexed = (void (OGL_FUNCPTR *)(GLuint, GLint, GLint, GLsizei, GLsizei))ogl_get_proc_address("glScissorIndexed");
	if(!_ogl_glScissorIndexed) num_failed++;
	_ogl_glScissorIndexedv = (void (OGL_FUNCPTR *)(GLuint, const GLint *))ogl_get_proc_address("glScissorIndexedv");
	if(!_ogl_glScissorIndexedv) num_failed++;
	_ogl_glShaderBinary = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *, GLenum, const void *, GLsizei))ogl_get_proc_address("glShaderBinary");
	if(!_ogl_glShaderBinary) num_failed++;
	_ogl_glUseProgramStages = (void (OGL_FUNCPTR *)(GLuint, GLbitfield, GLuint))ogl_get_proc_address("glUseProgramStages");
	if(!_ogl_glUseProgramStages) num_failed++;
	_ogl_glValidateProgramPipeline = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glValidateProgramPipeline");
	if(!_ogl_glValidateProgramPipeline) num_failed++;
	_ogl_glVertexAttribL1d = (void (OGL_FUNCPTR *)(GLuint, GLdouble))ogl_get_proc_address("glVertexAttribL1d");
	if(!_ogl_glVertexAttribL1d) num_failed++;
	_ogl_glVertexAttribL1dv = (void (OGL_FUNCPTR *)(GLuint, const GLdouble *))ogl_get_proc_address("glVertexAttribL1dv");
	if(!_ogl_glVertexAttribL1dv) num_failed++;
	_ogl_glVertexAttribL2d = (void (OGL_FUNCPTR *)(GLuint, GLdouble, GLdouble))ogl_get_proc_address("glVertexAttribL2d");
	if(!_ogl_glVertexAttribL2d) num_failed++;
	_ogl_glVertexAttribL2dv = (void (OGL_FUNCPTR *)(GLuint, const GLdouble *))ogl_get_proc_address("glVertexAttribL2dv");
	if(!_ogl_glVertexAttribL2dv) num_failed++;
	_ogl_glVertexAttribL3d = (void (OGL_FUNCPTR *)(GLuint, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glVertexAttribL3d");
	if(!_ogl_glVertexAttribL3d) num_failed++;
	_ogl_glVertexAttribL3dv = (void (OGL_FUNCPTR *)(GLuint, const GLdouble *))ogl_get_proc_address("glVertexAttribL3dv");
	if(!_ogl_glVertexAttribL3dv) num_failed++;
	_ogl_glVertexAttribL4d = (void (OGL_FUNCPTR *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glVertexAttribL4d");
	if(!_ogl_glVertexAttribL4d) num_failed++;
	_ogl_glVertexAttribL4dv = (void (OGL_FUNCPTR *)(GLuint, const GLdouble *))ogl_get_proc_address("glVertexAttribL4dv");
	if(!_ogl_glVertexAttribL4dv) num_failed++;
	_ogl_glVertexAttribLPointer = (void (OGL_FUNCPTR *)(GLuint, GLint, GLenum, GLsizei, const void *))ogl_get_proc_address("glVertexAttribLPointer");
	if(!_ogl_glVertexAttribLPointer) num_failed++;
	_ogl_glViewportArrayv = (void (OGL_FUNCPTR *)(GLuint, GLsizei, const GLfloat *))ogl_get_proc_address("glViewportArrayv");
	if(!_ogl_glViewportArrayv) num_failed++;
	_ogl_glViewportIndexedf = (void (OGL_FUNCPTR *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glViewportIndexedf");
	if(!_ogl_glViewportIndexedf) num_failed++;
	_ogl_glViewportIndexedfv = (void (OGL_FUNCPTR *)(GLuint, const GLfloat *))ogl_get_proc_address("glViewportIndexedfv");
	if(!_ogl_glViewportIndexedfv) num_failed++;


	#ifdef OGL_COMPATIBILITY
	_ogl_glAccum = (void (OGL_FUNCPTR *)(GLenum, GLfloat))ogl_get_proc_address("glAccum");
	if(!_ogl_glAccum) num_failed++;
	_ogl_glAlphaFunc = (void (OGL_FUNCPTR *)(GLenum, GLfloat))ogl_get_proc_address("glAlphaFunc");
	if(!_ogl_glAlphaFunc) num_failed++;
	_ogl_glBegin = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glBegin");
	if(!_ogl_glBegin) num_failed++;
	_ogl_glBitmap = (void (OGL_FUNCPTR *)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *))ogl_get_proc_address("glBitmap");
	if(!_ogl_glBitmap) num_failed++;
	_ogl_glCallList = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glCallList");
	if(!_ogl_glCallList) num_failed++;
	_ogl_glCallLists = (void (OGL_FUNCPTR *)(GLsizei, GLenum, const void *))ogl_get_proc_address("glCallLists");
	if(!_ogl_glCallLists) num_failed++;
	_ogl_glClearAccum = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glClearAccum");
	if(!_ogl_glClearAccum) num_failed++;
	_ogl_glClearIndex = (void (OGL_FUNCPTR *)(GLfloat))ogl_get_proc_address("glClearIndex");
	if(!_ogl_glClearIndex) num_failed++;
	_ogl_glClipPlane = (void (OGL_FUNCPTR *)(GLenum, const GLdouble *))ogl_get_proc_address("glClipPlane");
	if(!_ogl_glClipPlane) num_failed++;
	_ogl_glColor3b = (void (OGL_FUNCPTR *)(GLbyte, GLbyte, GLbyte))ogl_get_proc_address("glColor3b");
	if(!_ogl_glColor3b) num_failed++;
	_ogl_glColor3bv = (void (OGL_FUNCPTR *)(const GLbyte *))ogl_get_proc_address("glColor3bv");
	if(!_ogl_glColor3bv) num_failed++;
	_ogl_glColor3d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glColor3d");
	if(!_ogl_glColor3d) num_failed++;
	_ogl_glColor3dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glColor3dv");
	if(!_ogl_glColor3dv) num_failed++;
	_ogl_glColor3f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glColor3f");
	if(!_ogl_glColor3f) num_failed++;
	_ogl_glColor3fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glColor3fv");
	if(!_ogl_glColor3fv) num_failed++;
	_ogl_glColor3i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint))ogl_get_proc_address("glColor3i");
	if(!_ogl_glColor3i) num_failed++;
	_ogl_glColor3iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glColor3iv");
	if(!_ogl_glColor3iv) num_failed++;
	_ogl_glColor3s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort))ogl_get_proc_address("glColor3s");
	if(!_ogl_glColor3s) num_failed++;
	_ogl_glColor3sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glColor3sv");
	if(!_ogl_glColor3sv) num_failed++;
	_ogl_glColor3ub = (void (OGL_FUNCPTR *)(GLubyte, GLubyte, GLubyte))ogl_get_proc_address("glColor3ub");
	if(!_ogl_glColor3ub) num_failed++;
	_ogl_glColor3ubv = (void (OGL_FUNCPTR *)(const GLubyte *))ogl_get_proc_address("glColor3ubv");
	if(!_ogl_glColor3ubv) num_failed++;
	_ogl_glColor3ui = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLuint))ogl_get_proc_address("glColor3ui");
	if(!_ogl_glColor3ui) num_failed++;
	_ogl_glColor3uiv = (void (OGL_FUNCPTR *)(const GLuint *))ogl_get_proc_address("glColor3uiv");
	if(!_ogl_glColor3uiv) num_failed++;
	_ogl_glColor3us = (void (OGL_FUNCPTR *)(GLushort, GLushort, GLushort))ogl_get_proc_address("glColor3us");
	if(!_ogl_glColor3us) num_failed++;
	_ogl_glColor3usv = (void (OGL_FUNCPTR *)(const GLushort *))ogl_get_proc_address("glColor3usv");
	if(!_ogl_glColor3usv) num_failed++;
	_ogl_glColor4b = (void (OGL_FUNCPTR *)(GLbyte, GLbyte, GLbyte, GLbyte))ogl_get_proc_address("glColor4b");
	if(!_ogl_glColor4b) num_failed++;
	_ogl_glColor4bv = (void (OGL_FUNCPTR *)(const GLbyte *))ogl_get_proc_address("glColor4bv");
	if(!_ogl_glColor4bv) num_failed++;
	_ogl_glColor4d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glColor4d");
	if(!_ogl_glColor4d) num_failed++;
	_ogl_glColor4dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glColor4dv");
	if(!_ogl_glColor4dv) num_failed++;
	_ogl_glColor4f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glColor4f");
	if(!_ogl_glColor4f) num_failed++;
	_ogl_glColor4fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glColor4fv");
	if(!_ogl_glColor4fv) num_failed++;
	_ogl_glColor4i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint, GLint))ogl_get_proc_address("glColor4i");
	if(!_ogl_glColor4i) num_failed++;
	_ogl_glColor4iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glColor4iv");
	if(!_ogl_glColor4iv) num_failed++;
	_ogl_glColor4s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort, GLshort))ogl_get_proc_address("glColor4s");
	if(!_ogl_glColor4s) num_failed++;
	_ogl_glColor4sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glColor4sv");
	if(!_ogl_glColor4sv) num_failed++;
	_ogl_glColor4ub = (void (OGL_FUNCPTR *)(GLubyte, GLubyte, GLubyte, GLubyte))ogl_get_proc_address("glColor4ub");
	if(!_ogl_glColor4ub) num_failed++;
	_ogl_glColor4ubv = (void (OGL_FUNCPTR *)(const GLubyte *))ogl_get_proc_address("glColor4ubv");
	if(!_ogl_glColor4ubv) num_failed++;
	_ogl_glColor4ui = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLuint, GLuint))ogl_get_proc_address("glColor4ui");
	if(!_ogl_glColor4ui) num_failed++;
	_ogl_glColor4uiv = (void (OGL_FUNCPTR *)(const GLuint *))ogl_get_proc_address("glColor4uiv");
	if(!_ogl_glColor4uiv) num_failed++;
	_ogl_glColor4us = (void (OGL_FUNCPTR *)(GLushort, GLushort, GLushort, GLushort))ogl_get_proc_address("glColor4us");
	if(!_ogl_glColor4us) num_failed++;
	_ogl_glColor4usv = (void (OGL_FUNCPTR *)(const GLushort *))ogl_get_proc_address("glColor4usv");
	if(!_ogl_glColor4usv) num_failed++;
	_ogl_glColorMaterial = (void (OGL_FUNCPTR *)(GLenum, GLenum))ogl_get_proc_address("glColorMaterial");
	if(!_ogl_glColorMaterial) num_failed++;
	_ogl_glCopyPixels = (void (OGL_FUNCPTR *)(GLint, GLint, GLsizei, GLsizei, GLenum))ogl_get_proc_address("glCopyPixels");
	if(!_ogl_glCopyPixels) num_failed++;
	_ogl_glDeleteLists = (void (OGL_FUNCPTR *)(GLuint, GLsizei))ogl_get_proc_address("glDeleteLists");
	if(!_ogl_glDeleteLists) num_failed++;
	_ogl_glDrawPixels = (void (OGL_FUNCPTR *)(GLsizei, GLsizei, GLenum, GLenum, const void *))ogl_get_proc_address("glDrawPixels");
	if(!_ogl_glDrawPixels) num_failed++;
	_ogl_glEdgeFlag = (void (OGL_FUNCPTR *)(GLboolean))ogl_get_proc_address("glEdgeFlag");
	if(!_ogl_glEdgeFlag) num_failed++;
	_ogl_glEdgeFlagv = (void (OGL_FUNCPTR *)(const GLboolean *))ogl_get_proc_address("glEdgeFlagv");
	if(!_ogl_glEdgeFlagv) num_failed++;
	_ogl_glEnd = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glEnd");
	if(!_ogl_glEnd) num_failed++;
	_ogl_glEndList = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glEndList");
	if(!_ogl_glEndList) num_failed++;
	_ogl_glEvalCoord1d = (void (OGL_FUNCPTR *)(GLdouble))ogl_get_proc_address("glEvalCoord1d");
	if(!_ogl_glEvalCoord1d) num_failed++;
	_ogl_glEvalCoord1dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glEvalCoord1dv");
	if(!_ogl_glEvalCoord1dv) num_failed++;
	_ogl_glEvalCoord1f = (void (OGL_FUNCPTR *)(GLfloat))ogl_get_proc_address("glEvalCoord1f");
	if(!_ogl_glEvalCoord1f) num_failed++;
	_ogl_glEvalCoord1fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glEvalCoord1fv");
	if(!_ogl_glEvalCoord1fv) num_failed++;
	_ogl_glEvalCoord2d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble))ogl_get_proc_address("glEvalCoord2d");
	if(!_ogl_glEvalCoord2d) num_failed++;
	_ogl_glEvalCoord2dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glEvalCoord2dv");
	if(!_ogl_glEvalCoord2dv) num_failed++;
	_ogl_glEvalCoord2f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat))ogl_get_proc_address("glEvalCoord2f");
	if(!_ogl_glEvalCoord2f) num_failed++;
	_ogl_glEvalCoord2fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glEvalCoord2fv");
	if(!_ogl_glEvalCoord2fv) num_failed++;
	_ogl_glEvalMesh1 = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint))ogl_get_proc_address("glEvalMesh1");
	if(!_ogl_glEvalMesh1) num_failed++;
	_ogl_glEvalMesh2 = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLint, GLint))ogl_get_proc_address("glEvalMesh2");
	if(!_ogl_glEvalMesh2) num_failed++;
	_ogl_glEvalPoint1 = (void (OGL_FUNCPTR *)(GLint))ogl_get_proc_address("glEvalPoint1");
	if(!_ogl_glEvalPoint1) num_failed++;
	_ogl_glEvalPoint2 = (void (OGL_FUNCPTR *)(GLint, GLint))ogl_get_proc_address("glEvalPoint2");
	if(!_ogl_glEvalPoint2) num_failed++;
	_ogl_glFeedbackBuffer = (void (OGL_FUNCPTR *)(GLsizei, GLenum, GLfloat *))ogl_get_proc_address("glFeedbackBuffer");
	if(!_ogl_glFeedbackBuffer) num_failed++;
	_ogl_glFogf = (void (OGL_FUNCPTR *)(GLenum, GLfloat))ogl_get_proc_address("glFogf");
	if(!_ogl_glFogf) num_failed++;
	_ogl_glFogfv = (void (OGL_FUNCPTR *)(GLenum, const GLfloat *))ogl_get_proc_address("glFogfv");
	if(!_ogl_glFogfv) num_failed++;
	_ogl_glFogi = (void (OGL_FUNCPTR *)(GLenum, GLint))ogl_get_proc_address("glFogi");
	if(!_ogl_glFogi) num_failed++;
	_ogl_glFogiv = (void (OGL_FUNCPTR *)(GLenum, const GLint *))ogl_get_proc_address("glFogiv");
	if(!_ogl_glFogiv) num_failed++;
	_ogl_glFrustum = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glFrustum");
	if(!_ogl_glFrustum) num_failed++;
	_ogl_glGenLists = (GLuint (OGL_FUNCPTR *)(GLsizei))ogl_get_proc_address("glGenLists");
	if(!_ogl_glGenLists) num_failed++;
	_ogl_glGetClipPlane = (void (OGL_FUNCPTR *)(GLenum, GLdouble *))ogl_get_proc_address("glGetClipPlane");
	if(!_ogl_glGetClipPlane) num_failed++;
	_ogl_glGetLightfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat *))ogl_get_proc_address("glGetLightfv");
	if(!_ogl_glGetLightfv) num_failed++;
	_ogl_glGetLightiv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *))ogl_get_proc_address("glGetLightiv");
	if(!_ogl_glGetLightiv) num_failed++;
	_ogl_glGetMapdv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLdouble *))ogl_get_proc_address("glGetMapdv");
	if(!_ogl_glGetMapdv) num_failed++;
	_ogl_glGetMapfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat *))ogl_get_proc_address("glGetMapfv");
	if(!_ogl_glGetMapfv) num_failed++;
	_ogl_glGetMapiv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *))ogl_get_proc_address("glGetMapiv");
	if(!_ogl_glGetMapiv) num_failed++;
	_ogl_glGetMaterialfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat *))ogl_get_proc_address("glGetMaterialfv");
	if(!_ogl_glGetMaterialfv) num_failed++;
	_ogl_glGetMaterialiv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *))ogl_get_proc_address("glGetMaterialiv");
	if(!_ogl_glGetMaterialiv) num_failed++;
	_ogl_glGetPixelMapfv = (void (OGL_FUNCPTR *)(GLenum, GLfloat *))ogl_get_proc_address("glGetPixelMapfv");
	if(!_ogl_glGetPixelMapfv) num_failed++;
	_ogl_glGetPixelMapuiv = (void (OGL_FUNCPTR *)(GLenum, GLuint *))ogl_get_proc_address("glGetPixelMapuiv");
	if(!_ogl_glGetPixelMapuiv) num_failed++;
	_ogl_glGetPixelMapusv = (void (OGL_FUNCPTR *)(GLenum, GLushort *))ogl_get_proc_address("glGetPixelMapusv");
	if(!_ogl_glGetPixelMapusv) num_failed++;
	_ogl_glGetPolygonStipple = (void (OGL_FUNCPTR *)(GLubyte *))ogl_get_proc_address("glGetPolygonStipple");
	if(!_ogl_glGetPolygonStipple) num_failed++;
	_ogl_glGetTexEnvfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat *))ogl_get_proc_address("glGetTexEnvfv");
	if(!_ogl_glGetTexEnvfv) num_failed++;
	_ogl_glGetTexEnviv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *))ogl_get_proc_address("glGetTexEnviv");
	if(!_ogl_glGetTexEnviv) num_failed++;
	_ogl_glGetTexGendv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLdouble *))ogl_get_proc_address("glGetTexGendv");
	if(!_ogl_glGetTexGendv) num_failed++;
	_ogl_glGetTexGenfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat *))ogl_get_proc_address("glGetTexGenfv");
	if(!_ogl_glGetTexGenfv) num_failed++;
	_ogl_glGetTexGeniv = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint *))ogl_get_proc_address("glGetTexGeniv");
	if(!_ogl_glGetTexGeniv) num_failed++;
	_ogl_glIndexMask = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIndexMask");
	if(!_ogl_glIndexMask) num_failed++;
	_ogl_glIndexd = (void (OGL_FUNCPTR *)(GLdouble))ogl_get_proc_address("glIndexd");
	if(!_ogl_glIndexd) num_failed++;
	_ogl_glIndexdv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glIndexdv");
	if(!_ogl_glIndexdv) num_failed++;
	_ogl_glIndexf = (void (OGL_FUNCPTR *)(GLfloat))ogl_get_proc_address("glIndexf");
	if(!_ogl_glIndexf) num_failed++;
	_ogl_glIndexfv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glIndexfv");
	if(!_ogl_glIndexfv) num_failed++;
	_ogl_glIndexi = (void (OGL_FUNCPTR *)(GLint))ogl_get_proc_address("glIndexi");
	if(!_ogl_glIndexi) num_failed++;
	_ogl_glIndexiv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glIndexiv");
	if(!_ogl_glIndexiv) num_failed++;
	_ogl_glIndexs = (void (OGL_FUNCPTR *)(GLshort))ogl_get_proc_address("glIndexs");
	if(!_ogl_glIndexs) num_failed++;
	_ogl_glIndexsv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glIndexsv");
	if(!_ogl_glIndexsv) num_failed++;
	_ogl_glInitNames = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glInitNames");
	if(!_ogl_glInitNames) num_failed++;
	_ogl_glIsList = (GLboolean (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glIsList");
	if(!_ogl_glIsList) num_failed++;
	_ogl_glLightModelf = (void (OGL_FUNCPTR *)(GLenum, GLfloat))ogl_get_proc_address("glLightModelf");
	if(!_ogl_glLightModelf) num_failed++;
	_ogl_glLightModelfv = (void (OGL_FUNCPTR *)(GLenum, const GLfloat *))ogl_get_proc_address("glLightModelfv");
	if(!_ogl_glLightModelfv) num_failed++;
	_ogl_glLightModeli = (void (OGL_FUNCPTR *)(GLenum, GLint))ogl_get_proc_address("glLightModeli");
	if(!_ogl_glLightModeli) num_failed++;
	_ogl_glLightModeliv = (void (OGL_FUNCPTR *)(GLenum, const GLint *))ogl_get_proc_address("glLightModeliv");
	if(!_ogl_glLightModeliv) num_failed++;
	_ogl_glLightf = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat))ogl_get_proc_address("glLightf");
	if(!_ogl_glLightf) num_failed++;
	_ogl_glLightfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLfloat *))ogl_get_proc_address("glLightfv");
	if(!_ogl_glLightfv) num_failed++;
	_ogl_glLighti = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint))ogl_get_proc_address("glLighti");
	if(!_ogl_glLighti) num_failed++;
	_ogl_glLightiv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLint *))ogl_get_proc_address("glLightiv");
	if(!_ogl_glLightiv) num_failed++;
	_ogl_glLineStipple = (void (OGL_FUNCPTR *)(GLint, GLushort))ogl_get_proc_address("glLineStipple");
	if(!_ogl_glLineStipple) num_failed++;
	_ogl_glListBase = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glListBase");
	if(!_ogl_glListBase) num_failed++;
	_ogl_glLoadIdentity = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glLoadIdentity");
	if(!_ogl_glLoadIdentity) num_failed++;
	_ogl_glLoadMatrixd = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glLoadMatrixd");
	if(!_ogl_glLoadMatrixd) num_failed++;
	_ogl_glLoadMatrixf = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glLoadMatrixf");
	if(!_ogl_glLoadMatrixf) num_failed++;
	_ogl_glLoadName = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glLoadName");
	if(!_ogl_glLoadName) num_failed++;
	_ogl_glMap1d = (void (OGL_FUNCPTR *)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *))ogl_get_proc_address("glMap1d");
	if(!_ogl_glMap1d) num_failed++;
	_ogl_glMap1f = (void (OGL_FUNCPTR *)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *))ogl_get_proc_address("glMap1f");
	if(!_ogl_glMap1f) num_failed++;
	_ogl_glMap2d = (void (OGL_FUNCPTR *)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))ogl_get_proc_address("glMap2d");
	if(!_ogl_glMap2d) num_failed++;
	_ogl_glMap2f = (void (OGL_FUNCPTR *)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))ogl_get_proc_address("glMap2f");
	if(!_ogl_glMap2f) num_failed++;
	_ogl_glMapGrid1d = (void (OGL_FUNCPTR *)(GLint, GLdouble, GLdouble))ogl_get_proc_address("glMapGrid1d");
	if(!_ogl_glMapGrid1d) num_failed++;
	_ogl_glMapGrid1f = (void (OGL_FUNCPTR *)(GLint, GLfloat, GLfloat))ogl_get_proc_address("glMapGrid1f");
	if(!_ogl_glMapGrid1f) num_failed++;
	_ogl_glMapGrid2d = (void (OGL_FUNCPTR *)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble))ogl_get_proc_address("glMapGrid2d");
	if(!_ogl_glMapGrid2d) num_failed++;
	_ogl_glMapGrid2f = (void (OGL_FUNCPTR *)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat))ogl_get_proc_address("glMapGrid2f");
	if(!_ogl_glMapGrid2f) num_failed++;
	_ogl_glMaterialf = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat))ogl_get_proc_address("glMaterialf");
	if(!_ogl_glMaterialf) num_failed++;
	_ogl_glMaterialfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLfloat *))ogl_get_proc_address("glMaterialfv");
	if(!_ogl_glMaterialfv) num_failed++;
	_ogl_glMateriali = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint))ogl_get_proc_address("glMateriali");
	if(!_ogl_glMateriali) num_failed++;
	_ogl_glMaterialiv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLint *))ogl_get_proc_address("glMaterialiv");
	if(!_ogl_glMaterialiv) num_failed++;
	_ogl_glMatrixMode = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glMatrixMode");
	if(!_ogl_glMatrixMode) num_failed++;
	_ogl_glMultMatrixd = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glMultMatrixd");
	if(!_ogl_glMultMatrixd) num_failed++;
	_ogl_glMultMatrixf = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glMultMatrixf");
	if(!_ogl_glMultMatrixf) num_failed++;
	_ogl_glNewList = (void (OGL_FUNCPTR *)(GLuint, GLenum))ogl_get_proc_address("glNewList");
	if(!_ogl_glNewList) num_failed++;
	_ogl_glNormal3b = (void (OGL_FUNCPTR *)(GLbyte, GLbyte, GLbyte))ogl_get_proc_address("glNormal3b");
	if(!_ogl_glNormal3b) num_failed++;
	_ogl_glNormal3bv = (void (OGL_FUNCPTR *)(const GLbyte *))ogl_get_proc_address("glNormal3bv");
	if(!_ogl_glNormal3bv) num_failed++;
	_ogl_glNormal3d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glNormal3d");
	if(!_ogl_glNormal3d) num_failed++;
	_ogl_glNormal3dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glNormal3dv");
	if(!_ogl_glNormal3dv) num_failed++;
	_ogl_glNormal3f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glNormal3f");
	if(!_ogl_glNormal3f) num_failed++;
	_ogl_glNormal3fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glNormal3fv");
	if(!_ogl_glNormal3fv) num_failed++;
	_ogl_glNormal3i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint))ogl_get_proc_address("glNormal3i");
	if(!_ogl_glNormal3i) num_failed++;
	_ogl_glNormal3iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glNormal3iv");
	if(!_ogl_glNormal3iv) num_failed++;
	_ogl_glNormal3s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort))ogl_get_proc_address("glNormal3s");
	if(!_ogl_glNormal3s) num_failed++;
	_ogl_glNormal3sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glNormal3sv");
	if(!_ogl_glNormal3sv) num_failed++;
	_ogl_glOrtho = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glOrtho");
	if(!_ogl_glOrtho) num_failed++;
	_ogl_glPassThrough = (void (OGL_FUNCPTR *)(GLfloat))ogl_get_proc_address("glPassThrough");
	if(!_ogl_glPassThrough) num_failed++;
	_ogl_glPixelMapfv = (void (OGL_FUNCPTR *)(GLenum, GLsizei, const GLfloat *))ogl_get_proc_address("glPixelMapfv");
	if(!_ogl_glPixelMapfv) num_failed++;
	_ogl_glPixelMapuiv = (void (OGL_FUNCPTR *)(GLenum, GLsizei, const GLuint *))ogl_get_proc_address("glPixelMapuiv");
	if(!_ogl_glPixelMapuiv) num_failed++;
	_ogl_glPixelMapusv = (void (OGL_FUNCPTR *)(GLenum, GLsizei, const GLushort *))ogl_get_proc_address("glPixelMapusv");
	if(!_ogl_glPixelMapusv) num_failed++;
	_ogl_glPixelTransferf = (void (OGL_FUNCPTR *)(GLenum, GLfloat))ogl_get_proc_address("glPixelTransferf");
	if(!_ogl_glPixelTransferf) num_failed++;
	_ogl_glPixelTransferi = (void (OGL_FUNCPTR *)(GLenum, GLint))ogl_get_proc_address("glPixelTransferi");
	if(!_ogl_glPixelTransferi) num_failed++;
	_ogl_glPixelZoom = (void (OGL_FUNCPTR *)(GLfloat, GLfloat))ogl_get_proc_address("glPixelZoom");
	if(!_ogl_glPixelZoom) num_failed++;
	_ogl_glPolygonStipple = (void (OGL_FUNCPTR *)(const GLubyte *))ogl_get_proc_address("glPolygonStipple");
	if(!_ogl_glPolygonStipple) num_failed++;
	_ogl_glPopAttrib = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glPopAttrib");
	if(!_ogl_glPopAttrib) num_failed++;
	_ogl_glPopMatrix = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glPopMatrix");
	if(!_ogl_glPopMatrix) num_failed++;
	_ogl_glPopName = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glPopName");
	if(!_ogl_glPopName) num_failed++;
	_ogl_glPushAttrib = (void (OGL_FUNCPTR *)(GLbitfield))ogl_get_proc_address("glPushAttrib");
	if(!_ogl_glPushAttrib) num_failed++;
	_ogl_glPushMatrix = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glPushMatrix");
	if(!_ogl_glPushMatrix) num_failed++;
	_ogl_glPushName = (void (OGL_FUNCPTR *)(GLuint))ogl_get_proc_address("glPushName");
	if(!_ogl_glPushName) num_failed++;
	_ogl_glRasterPos2d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble))ogl_get_proc_address("glRasterPos2d");
	if(!_ogl_glRasterPos2d) num_failed++;
	_ogl_glRasterPos2dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glRasterPos2dv");
	if(!_ogl_glRasterPos2dv) num_failed++;
	_ogl_glRasterPos2f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat))ogl_get_proc_address("glRasterPos2f");
	if(!_ogl_glRasterPos2f) num_failed++;
	_ogl_glRasterPos2fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glRasterPos2fv");
	if(!_ogl_glRasterPos2fv) num_failed++;
	_ogl_glRasterPos2i = (void (OGL_FUNCPTR *)(GLint, GLint))ogl_get_proc_address("glRasterPos2i");
	if(!_ogl_glRasterPos2i) num_failed++;
	_ogl_glRasterPos2iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glRasterPos2iv");
	if(!_ogl_glRasterPos2iv) num_failed++;
	_ogl_glRasterPos2s = (void (OGL_FUNCPTR *)(GLshort, GLshort))ogl_get_proc_address("glRasterPos2s");
	if(!_ogl_glRasterPos2s) num_failed++;
	_ogl_glRasterPos2sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glRasterPos2sv");
	if(!_ogl_glRasterPos2sv) num_failed++;
	_ogl_glRasterPos3d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glRasterPos3d");
	if(!_ogl_glRasterPos3d) num_failed++;
	_ogl_glRasterPos3dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glRasterPos3dv");
	if(!_ogl_glRasterPos3dv) num_failed++;
	_ogl_glRasterPos3f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glRasterPos3f");
	if(!_ogl_glRasterPos3f) num_failed++;
	_ogl_glRasterPos3fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glRasterPos3fv");
	if(!_ogl_glRasterPos3fv) num_failed++;
	_ogl_glRasterPos3i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint))ogl_get_proc_address("glRasterPos3i");
	if(!_ogl_glRasterPos3i) num_failed++;
	_ogl_glRasterPos3iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glRasterPos3iv");
	if(!_ogl_glRasterPos3iv) num_failed++;
	_ogl_glRasterPos3s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort))ogl_get_proc_address("glRasterPos3s");
	if(!_ogl_glRasterPos3s) num_failed++;
	_ogl_glRasterPos3sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glRasterPos3sv");
	if(!_ogl_glRasterPos3sv) num_failed++;
	_ogl_glRasterPos4d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glRasterPos4d");
	if(!_ogl_glRasterPos4d) num_failed++;
	_ogl_glRasterPos4dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glRasterPos4dv");
	if(!_ogl_glRasterPos4dv) num_failed++;
	_ogl_glRasterPos4f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glRasterPos4f");
	if(!_ogl_glRasterPos4f) num_failed++;
	_ogl_glRasterPos4fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glRasterPos4fv");
	if(!_ogl_glRasterPos4fv) num_failed++;
	_ogl_glRasterPos4i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint, GLint))ogl_get_proc_address("glRasterPos4i");
	if(!_ogl_glRasterPos4i) num_failed++;
	_ogl_glRasterPos4iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glRasterPos4iv");
	if(!_ogl_glRasterPos4iv) num_failed++;
	_ogl_glRasterPos4s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort, GLshort))ogl_get_proc_address("glRasterPos4s");
	if(!_ogl_glRasterPos4s) num_failed++;
	_ogl_glRasterPos4sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glRasterPos4sv");
	if(!_ogl_glRasterPos4sv) num_failed++;
	_ogl_glRectd = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glRectd");
	if(!_ogl_glRectd) num_failed++;
	_ogl_glRectdv = (void (OGL_FUNCPTR *)(const GLdouble *, const GLdouble *))ogl_get_proc_address("glRectdv");
	if(!_ogl_glRectdv) num_failed++;
	_ogl_glRectf = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glRectf");
	if(!_ogl_glRectf) num_failed++;
	_ogl_glRectfv = (void (OGL_FUNCPTR *)(const GLfloat *, const GLfloat *))ogl_get_proc_address("glRectfv");
	if(!_ogl_glRectfv) num_failed++;
	_ogl_glRecti = (void (OGL_FUNCPTR *)(GLint, GLint, GLint, GLint))ogl_get_proc_address("glRecti");
	if(!_ogl_glRecti) num_failed++;
	_ogl_glRectiv = (void (OGL_FUNCPTR *)(const GLint *, const GLint *))ogl_get_proc_address("glRectiv");
	if(!_ogl_glRectiv) num_failed++;
	_ogl_glRects = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort, GLshort))ogl_get_proc_address("glRects");
	if(!_ogl_glRects) num_failed++;
	_ogl_glRectsv = (void (OGL_FUNCPTR *)(const GLshort *, const GLshort *))ogl_get_proc_address("glRectsv");
	if(!_ogl_glRectsv) num_failed++;
	_ogl_glRenderMode = (GLint (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glRenderMode");
	if(!_ogl_glRenderMode) num_failed++;
	_ogl_glRotated = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glRotated");
	if(!_ogl_glRotated) num_failed++;
	_ogl_glRotatef = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glRotatef");
	if(!_ogl_glRotatef) num_failed++;
	_ogl_glScaled = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glScaled");
	if(!_ogl_glScaled) num_failed++;
	_ogl_glScalef = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glScalef");
	if(!_ogl_glScalef) num_failed++;
	_ogl_glSelectBuffer = (void (OGL_FUNCPTR *)(GLsizei, GLuint *))ogl_get_proc_address("glSelectBuffer");
	if(!_ogl_glSelectBuffer) num_failed++;
	_ogl_glShadeModel = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glShadeModel");
	if(!_ogl_glShadeModel) num_failed++;
	_ogl_glTexCoord1d = (void (OGL_FUNCPTR *)(GLdouble))ogl_get_proc_address("glTexCoord1d");
	if(!_ogl_glTexCoord1d) num_failed++;
	_ogl_glTexCoord1dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glTexCoord1dv");
	if(!_ogl_glTexCoord1dv) num_failed++;
	_ogl_glTexCoord1f = (void (OGL_FUNCPTR *)(GLfloat))ogl_get_proc_address("glTexCoord1f");
	if(!_ogl_glTexCoord1f) num_failed++;
	_ogl_glTexCoord1fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glTexCoord1fv");
	if(!_ogl_glTexCoord1fv) num_failed++;
	_ogl_glTexCoord1i = (void (OGL_FUNCPTR *)(GLint))ogl_get_proc_address("glTexCoord1i");
	if(!_ogl_glTexCoord1i) num_failed++;
	_ogl_glTexCoord1iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glTexCoord1iv");
	if(!_ogl_glTexCoord1iv) num_failed++;
	_ogl_glTexCoord1s = (void (OGL_FUNCPTR *)(GLshort))ogl_get_proc_address("glTexCoord1s");
	if(!_ogl_glTexCoord1s) num_failed++;
	_ogl_glTexCoord1sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glTexCoord1sv");
	if(!_ogl_glTexCoord1sv) num_failed++;
	_ogl_glTexCoord2d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble))ogl_get_proc_address("glTexCoord2d");
	if(!_ogl_glTexCoord2d) num_failed++;
	_ogl_glTexCoord2dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glTexCoord2dv");
	if(!_ogl_glTexCoord2dv) num_failed++;
	_ogl_glTexCoord2f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat))ogl_get_proc_address("glTexCoord2f");
	if(!_ogl_glTexCoord2f) num_failed++;
	_ogl_glTexCoord2fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glTexCoord2fv");
	if(!_ogl_glTexCoord2fv) num_failed++;
	_ogl_glTexCoord2i = (void (OGL_FUNCPTR *)(GLint, GLint))ogl_get_proc_address("glTexCoord2i");
	if(!_ogl_glTexCoord2i) num_failed++;
	_ogl_glTexCoord2iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glTexCoord2iv");
	if(!_ogl_glTexCoord2iv) num_failed++;
	_ogl_glTexCoord2s = (void (OGL_FUNCPTR *)(GLshort, GLshort))ogl_get_proc_address("glTexCoord2s");
	if(!_ogl_glTexCoord2s) num_failed++;
	_ogl_glTexCoord2sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glTexCoord2sv");
	if(!_ogl_glTexCoord2sv) num_failed++;
	_ogl_glTexCoord3d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glTexCoord3d");
	if(!_ogl_glTexCoord3d) num_failed++;
	_ogl_glTexCoord3dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glTexCoord3dv");
	if(!_ogl_glTexCoord3dv) num_failed++;
	_ogl_glTexCoord3f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glTexCoord3f");
	if(!_ogl_glTexCoord3f) num_failed++;
	_ogl_glTexCoord3fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glTexCoord3fv");
	if(!_ogl_glTexCoord3fv) num_failed++;
	_ogl_glTexCoord3i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint))ogl_get_proc_address("glTexCoord3i");
	if(!_ogl_glTexCoord3i) num_failed++;
	_ogl_glTexCoord3iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glTexCoord3iv");
	if(!_ogl_glTexCoord3iv) num_failed++;
	_ogl_glTexCoord3s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort))ogl_get_proc_address("glTexCoord3s");
	if(!_ogl_glTexCoord3s) num_failed++;
	_ogl_glTexCoord3sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glTexCoord3sv");
	if(!_ogl_glTexCoord3sv) num_failed++;
	_ogl_glTexCoord4d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glTexCoord4d");
	if(!_ogl_glTexCoord4d) num_failed++;
	_ogl_glTexCoord4dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glTexCoord4dv");
	if(!_ogl_glTexCoord4dv) num_failed++;
	_ogl_glTexCoord4f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glTexCoord4f");
	if(!_ogl_glTexCoord4f) num_failed++;
	_ogl_glTexCoord4fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glTexCoord4fv");
	if(!_ogl_glTexCoord4fv) num_failed++;
	_ogl_glTexCoord4i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint, GLint))ogl_get_proc_address("glTexCoord4i");
	if(!_ogl_glTexCoord4i) num_failed++;
	_ogl_glTexCoord4iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glTexCoord4iv");
	if(!_ogl_glTexCoord4iv) num_failed++;
	_ogl_glTexCoord4s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort, GLshort))ogl_get_proc_address("glTexCoord4s");
	if(!_ogl_glTexCoord4s) num_failed++;
	_ogl_glTexCoord4sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glTexCoord4sv");
	if(!_ogl_glTexCoord4sv) num_failed++;
	_ogl_glTexEnvf = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat))ogl_get_proc_address("glTexEnvf");
	if(!_ogl_glTexEnvf) num_failed++;
	_ogl_glTexEnvfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLfloat *))ogl_get_proc_address("glTexEnvfv");
	if(!_ogl_glTexEnvfv) num_failed++;
	_ogl_glTexEnvi = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint))ogl_get_proc_address("glTexEnvi");
	if(!_ogl_glTexEnvi) num_failed++;
	_ogl_glTexEnviv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLint *))ogl_get_proc_address("glTexEnviv");
	if(!_ogl_glTexEnviv) num_failed++;
	_ogl_glTexGend = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLdouble))ogl_get_proc_address("glTexGend");
	if(!_ogl_glTexGend) num_failed++;
	_ogl_glTexGendv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLdouble *))ogl_get_proc_address("glTexGendv");
	if(!_ogl_glTexGendv) num_failed++;
	_ogl_glTexGenf = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLfloat))ogl_get_proc_address("glTexGenf");
	if(!_ogl_glTexGenf) num_failed++;
	_ogl_glTexGenfv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLfloat *))ogl_get_proc_address("glTexGenfv");
	if(!_ogl_glTexGenfv) num_failed++;
	_ogl_glTexGeni = (void (OGL_FUNCPTR *)(GLenum, GLenum, GLint))ogl_get_proc_address("glTexGeni");
	if(!_ogl_glTexGeni) num_failed++;
	_ogl_glTexGeniv = (void (OGL_FUNCPTR *)(GLenum, GLenum, const GLint *))ogl_get_proc_address("glTexGeniv");
	if(!_ogl_glTexGeniv) num_failed++;
	_ogl_glTranslated = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glTranslated");
	if(!_ogl_glTranslated) num_failed++;
	_ogl_glTranslatef = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glTranslatef");
	if(!_ogl_glTranslatef) num_failed++;
	_ogl_glVertex2d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble))ogl_get_proc_address("glVertex2d");
	if(!_ogl_glVertex2d) num_failed++;
	_ogl_glVertex2dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glVertex2dv");
	if(!_ogl_glVertex2dv) num_failed++;
	_ogl_glVertex2f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat))ogl_get_proc_address("glVertex2f");
	if(!_ogl_glVertex2f) num_failed++;
	_ogl_glVertex2fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glVertex2fv");
	if(!_ogl_glVertex2fv) num_failed++;
	_ogl_glVertex2i = (void (OGL_FUNCPTR *)(GLint, GLint))ogl_get_proc_address("glVertex2i");
	if(!_ogl_glVertex2i) num_failed++;
	_ogl_glVertex2iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glVertex2iv");
	if(!_ogl_glVertex2iv) num_failed++;
	_ogl_glVertex2s = (void (OGL_FUNCPTR *)(GLshort, GLshort))ogl_get_proc_address("glVertex2s");
	if(!_ogl_glVertex2s) num_failed++;
	_ogl_glVertex2sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glVertex2sv");
	if(!_ogl_glVertex2sv) num_failed++;
	_ogl_glVertex3d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glVertex3d");
	if(!_ogl_glVertex3d) num_failed++;
	_ogl_glVertex3dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glVertex3dv");
	if(!_ogl_glVertex3dv) num_failed++;
	_ogl_glVertex3f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glVertex3f");
	if(!_ogl_glVertex3f) num_failed++;
	_ogl_glVertex3fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glVertex3fv");
	if(!_ogl_glVertex3fv) num_failed++;
	_ogl_glVertex3i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint))ogl_get_proc_address("glVertex3i");
	if(!_ogl_glVertex3i) num_failed++;
	_ogl_glVertex3iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glVertex3iv");
	if(!_ogl_glVertex3iv) num_failed++;
	_ogl_glVertex3s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort))ogl_get_proc_address("glVertex3s");
	if(!_ogl_glVertex3s) num_failed++;
	_ogl_glVertex3sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glVertex3sv");
	if(!_ogl_glVertex3sv) num_failed++;
	_ogl_glVertex4d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glVertex4d");
	if(!_ogl_glVertex4d) num_failed++;
	_ogl_glVertex4dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glVertex4dv");
	if(!_ogl_glVertex4dv) num_failed++;
	_ogl_glVertex4f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glVertex4f");
	if(!_ogl_glVertex4f) num_failed++;
	_ogl_glVertex4fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glVertex4fv");
	if(!_ogl_glVertex4fv) num_failed++;
	_ogl_glVertex4i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint, GLint))ogl_get_proc_address("glVertex4i");
	if(!_ogl_glVertex4i) num_failed++;
	_ogl_glVertex4iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glVertex4iv");
	if(!_ogl_glVertex4iv) num_failed++;
	_ogl_glVertex4s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort, GLshort))ogl_get_proc_address("glVertex4s");
	if(!_ogl_glVertex4s) num_failed++;
	_ogl_glVertex4sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glVertex4sv");
	if(!_ogl_glVertex4sv) num_failed++;
	_ogl_glAreTexturesResident = (GLboolean (OGL_FUNCPTR *)(GLsizei, const GLuint *, GLboolean *))ogl_get_proc_address("glAreTexturesResident");
	if(!_ogl_glAreTexturesResident) num_failed++;
	_ogl_glArrayElement = (void (OGL_FUNCPTR *)(GLint))ogl_get_proc_address("glArrayElement");
	if(!_ogl_glArrayElement) num_failed++;
	_ogl_glColorPointer = (void (OGL_FUNCPTR *)(GLint, GLenum, GLsizei, const void *))ogl_get_proc_address("glColorPointer");
	if(!_ogl_glColorPointer) num_failed++;
	_ogl_glDisableClientState = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glDisableClientState");
	if(!_ogl_glDisableClientState) num_failed++;
	_ogl_glEdgeFlagPointer = (void (OGL_FUNCPTR *)(GLsizei, const void *))ogl_get_proc_address("glEdgeFlagPointer");
	if(!_ogl_glEdgeFlagPointer) num_failed++;
	_ogl_glEnableClientState = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glEnableClientState");
	if(!_ogl_glEnableClientState) num_failed++;
	_ogl_glGetPointerv = (void (OGL_FUNCPTR *)(GLenum, void **))ogl_get_proc_address("glGetPointerv");
	if(!_ogl_glGetPointerv) num_failed++;
	_ogl_glIndexPointer = (void (OGL_FUNCPTR *)(GLenum, GLsizei, const void *))ogl_get_proc_address("glIndexPointer");
	if(!_ogl_glIndexPointer) num_failed++;
	_ogl_glIndexub = (void (OGL_FUNCPTR *)(GLubyte))ogl_get_proc_address("glIndexub");
	if(!_ogl_glIndexub) num_failed++;
	_ogl_glIndexubv = (void (OGL_FUNCPTR *)(const GLubyte *))ogl_get_proc_address("glIndexubv");
	if(!_ogl_glIndexubv) num_failed++;
	_ogl_glInterleavedArrays = (void (OGL_FUNCPTR *)(GLenum, GLsizei, const void *))ogl_get_proc_address("glInterleavedArrays");
	if(!_ogl_glInterleavedArrays) num_failed++;
	_ogl_glNormalPointer = (void (OGL_FUNCPTR *)(GLenum, GLsizei, const void *))ogl_get_proc_address("glNormalPointer");
	if(!_ogl_glNormalPointer) num_failed++;
	_ogl_glPopClientAttrib = (void (OGL_FUNCPTR *)(void))ogl_get_proc_address("glPopClientAttrib");
	if(!_ogl_glPopClientAttrib) num_failed++;
	_ogl_glPrioritizeTextures = (void (OGL_FUNCPTR *)(GLsizei, const GLuint *, const GLfloat *))ogl_get_proc_address("glPrioritizeTextures");
	if(!_ogl_glPrioritizeTextures) num_failed++;
	_ogl_glPushClientAttrib = (void (OGL_FUNCPTR *)(GLbitfield))ogl_get_proc_address("glPushClientAttrib");
	if(!_ogl_glPushClientAttrib) num_failed++;
	_ogl_glTexCoordPointer = (void (OGL_FUNCPTR *)(GLint, GLenum, GLsizei, const void *))ogl_get_proc_address("glTexCoordPointer");
	if(!_ogl_glTexCoordPointer) num_failed++;
	_ogl_glVertexPointer = (void (OGL_FUNCPTR *)(GLint, GLenum, GLsizei, const void *))ogl_get_proc_address("glVertexPointer");
	if(!_ogl_glVertexPointer) num_failed++;
	_ogl_glClientActiveTexture = (void (OGL_FUNCPTR *)(GLenum))ogl_get_proc_address("glClientActiveTexture");
	if(!_ogl_glClientActiveTexture) num_failed++;
	_ogl_glLoadTransposeMatrixd = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glLoadTransposeMatrixd");
	if(!_ogl_glLoadTransposeMatrixd) num_failed++;
	_ogl_glLoadTransposeMatrixf = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glLoadTransposeMatrixf");
	if(!_ogl_glLoadTransposeMatrixf) num_failed++;
	_ogl_glMultTransposeMatrixd = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glMultTransposeMatrixd");
	if(!_ogl_glMultTransposeMatrixd) num_failed++;
	_ogl_glMultTransposeMatrixf = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glMultTransposeMatrixf");
	if(!_ogl_glMultTransposeMatrixf) num_failed++;
	_ogl_glMultiTexCoord1d = (void (OGL_FUNCPTR *)(GLenum, GLdouble))ogl_get_proc_address("glMultiTexCoord1d");
	if(!_ogl_glMultiTexCoord1d) num_failed++;
	_ogl_glMultiTexCoord1dv = (void (OGL_FUNCPTR *)(GLenum, const GLdouble *))ogl_get_proc_address("glMultiTexCoord1dv");
	if(!_ogl_glMultiTexCoord1dv) num_failed++;
	_ogl_glMultiTexCoord1f = (void (OGL_FUNCPTR *)(GLenum, GLfloat))ogl_get_proc_address("glMultiTexCoord1f");
	if(!_ogl_glMultiTexCoord1f) num_failed++;
	_ogl_glMultiTexCoord1fv = (void (OGL_FUNCPTR *)(GLenum, const GLfloat *))ogl_get_proc_address("glMultiTexCoord1fv");
	if(!_ogl_glMultiTexCoord1fv) num_failed++;
	_ogl_glMultiTexCoord1i = (void (OGL_FUNCPTR *)(GLenum, GLint))ogl_get_proc_address("glMultiTexCoord1i");
	if(!_ogl_glMultiTexCoord1i) num_failed++;
	_ogl_glMultiTexCoord1iv = (void (OGL_FUNCPTR *)(GLenum, const GLint *))ogl_get_proc_address("glMultiTexCoord1iv");
	if(!_ogl_glMultiTexCoord1iv) num_failed++;
	_ogl_glMultiTexCoord1s = (void (OGL_FUNCPTR *)(GLenum, GLshort))ogl_get_proc_address("glMultiTexCoord1s");
	if(!_ogl_glMultiTexCoord1s) num_failed++;
	_ogl_glMultiTexCoord1sv = (void (OGL_FUNCPTR *)(GLenum, const GLshort *))ogl_get_proc_address("glMultiTexCoord1sv");
	if(!_ogl_glMultiTexCoord1sv) num_failed++;
	_ogl_glMultiTexCoord2d = (void (OGL_FUNCPTR *)(GLenum, GLdouble, GLdouble))ogl_get_proc_address("glMultiTexCoord2d");
	if(!_ogl_glMultiTexCoord2d) num_failed++;
	_ogl_glMultiTexCoord2dv = (void (OGL_FUNCPTR *)(GLenum, const GLdouble *))ogl_get_proc_address("glMultiTexCoord2dv");
	if(!_ogl_glMultiTexCoord2dv) num_failed++;
	_ogl_glMultiTexCoord2f = (void (OGL_FUNCPTR *)(GLenum, GLfloat, GLfloat))ogl_get_proc_address("glMultiTexCoord2f");
	if(!_ogl_glMultiTexCoord2f) num_failed++;
	_ogl_glMultiTexCoord2fv = (void (OGL_FUNCPTR *)(GLenum, const GLfloat *))ogl_get_proc_address("glMultiTexCoord2fv");
	if(!_ogl_glMultiTexCoord2fv) num_failed++;
	_ogl_glMultiTexCoord2i = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint))ogl_get_proc_address("glMultiTexCoord2i");
	if(!_ogl_glMultiTexCoord2i) num_failed++;
	_ogl_glMultiTexCoord2iv = (void (OGL_FUNCPTR *)(GLenum, const GLint *))ogl_get_proc_address("glMultiTexCoord2iv");
	if(!_ogl_glMultiTexCoord2iv) num_failed++;
	_ogl_glMultiTexCoord2s = (void (OGL_FUNCPTR *)(GLenum, GLshort, GLshort))ogl_get_proc_address("glMultiTexCoord2s");
	if(!_ogl_glMultiTexCoord2s) num_failed++;
	_ogl_glMultiTexCoord2sv = (void (OGL_FUNCPTR *)(GLenum, const GLshort *))ogl_get_proc_address("glMultiTexCoord2sv");
	if(!_ogl_glMultiTexCoord2sv) num_failed++;
	_ogl_glMultiTexCoord3d = (void (OGL_FUNCPTR *)(GLenum, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glMultiTexCoord3d");
	if(!_ogl_glMultiTexCoord3d) num_failed++;
	_ogl_glMultiTexCoord3dv = (void (OGL_FUNCPTR *)(GLenum, const GLdouble *))ogl_get_proc_address("glMultiTexCoord3dv");
	if(!_ogl_glMultiTexCoord3dv) num_failed++;
	_ogl_glMultiTexCoord3f = (void (OGL_FUNCPTR *)(GLenum, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glMultiTexCoord3f");
	if(!_ogl_glMultiTexCoord3f) num_failed++;
	_ogl_glMultiTexCoord3fv = (void (OGL_FUNCPTR *)(GLenum, const GLfloat *))ogl_get_proc_address("glMultiTexCoord3fv");
	if(!_ogl_glMultiTexCoord3fv) num_failed++;
	_ogl_glMultiTexCoord3i = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLint))ogl_get_proc_address("glMultiTexCoord3i");
	if(!_ogl_glMultiTexCoord3i) num_failed++;
	_ogl_glMultiTexCoord3iv = (void (OGL_FUNCPTR *)(GLenum, const GLint *))ogl_get_proc_address("glMultiTexCoord3iv");
	if(!_ogl_glMultiTexCoord3iv) num_failed++;
	_ogl_glMultiTexCoord3s = (void (OGL_FUNCPTR *)(GLenum, GLshort, GLshort, GLshort))ogl_get_proc_address("glMultiTexCoord3s");
	if(!_ogl_glMultiTexCoord3s) num_failed++;
	_ogl_glMultiTexCoord3sv = (void (OGL_FUNCPTR *)(GLenum, const GLshort *))ogl_get_proc_address("glMultiTexCoord3sv");
	if(!_ogl_glMultiTexCoord3sv) num_failed++;
	_ogl_glMultiTexCoord4d = (void (OGL_FUNCPTR *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glMultiTexCoord4d");
	if(!_ogl_glMultiTexCoord4d) num_failed++;
	_ogl_glMultiTexCoord4dv = (void (OGL_FUNCPTR *)(GLenum, const GLdouble *))ogl_get_proc_address("glMultiTexCoord4dv");
	if(!_ogl_glMultiTexCoord4dv) num_failed++;
	_ogl_glMultiTexCoord4f = (void (OGL_FUNCPTR *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glMultiTexCoord4f");
	if(!_ogl_glMultiTexCoord4f) num_failed++;
	_ogl_glMultiTexCoord4fv = (void (OGL_FUNCPTR *)(GLenum, const GLfloat *))ogl_get_proc_address("glMultiTexCoord4fv");
	if(!_ogl_glMultiTexCoord4fv) num_failed++;
	_ogl_glMultiTexCoord4i = (void (OGL_FUNCPTR *)(GLenum, GLint, GLint, GLint, GLint))ogl_get_proc_address("glMultiTexCoord4i");
	if(!_ogl_glMultiTexCoord4i) num_failed++;
	_ogl_glMultiTexCoord4iv = (void (OGL_FUNCPTR *)(GLenum, const GLint *))ogl_get_proc_address("glMultiTexCoord4iv");
	if(!_ogl_glMultiTexCoord4iv) num_failed++;
	_ogl_glMultiTexCoord4s = (void (OGL_FUNCPTR *)(GLenum, GLshort, GLshort, GLshort, GLshort))ogl_get_proc_address("glMultiTexCoord4s");
	if(!_ogl_glMultiTexCoord4s) num_failed++;
	_ogl_glMultiTexCoord4sv = (void (OGL_FUNCPTR *)(GLenum, const GLshort *))ogl_get_proc_address("glMultiTexCoord4sv");
	if(!_ogl_glMultiTexCoord4sv) num_failed++;
	_ogl_glFogCoordPointer = (void (OGL_FUNCPTR *)(GLenum, GLsizei, const void *))ogl_get_proc_address("glFogCoordPointer");
	if(!_ogl_glFogCoordPointer) num_failed++;
	_ogl_glFogCoordd = (void (OGL_FUNCPTR *)(GLdouble))ogl_get_proc_address("glFogCoordd");
	if(!_ogl_glFogCoordd) num_failed++;
	_ogl_glFogCoorddv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glFogCoorddv");
	if(!_ogl_glFogCoorddv) num_failed++;
	_ogl_glFogCoordf = (void (OGL_FUNCPTR *)(GLfloat))ogl_get_proc_address("glFogCoordf");
	if(!_ogl_glFogCoordf) num_failed++;
	_ogl_glFogCoordfv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glFogCoordfv");
	if(!_ogl_glFogCoordfv) num_failed++;
	_ogl_glSecondaryColor3b = (void (OGL_FUNCPTR *)(GLbyte, GLbyte, GLbyte))ogl_get_proc_address("glSecondaryColor3b");
	if(!_ogl_glSecondaryColor3b) num_failed++;
	_ogl_glSecondaryColor3bv = (void (OGL_FUNCPTR *)(const GLbyte *))ogl_get_proc_address("glSecondaryColor3bv");
	if(!_ogl_glSecondaryColor3bv) num_failed++;
	_ogl_glSecondaryColor3d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glSecondaryColor3d");
	if(!_ogl_glSecondaryColor3d) num_failed++;
	_ogl_glSecondaryColor3dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glSecondaryColor3dv");
	if(!_ogl_glSecondaryColor3dv) num_failed++;
	_ogl_glSecondaryColor3f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glSecondaryColor3f");
	if(!_ogl_glSecondaryColor3f) num_failed++;
	_ogl_glSecondaryColor3fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glSecondaryColor3fv");
	if(!_ogl_glSecondaryColor3fv) num_failed++;
	_ogl_glSecondaryColor3i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint))ogl_get_proc_address("glSecondaryColor3i");
	if(!_ogl_glSecondaryColor3i) num_failed++;
	_ogl_glSecondaryColor3iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glSecondaryColor3iv");
	if(!_ogl_glSecondaryColor3iv) num_failed++;
	_ogl_glSecondaryColor3s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort))ogl_get_proc_address("glSecondaryColor3s");
	if(!_ogl_glSecondaryColor3s) num_failed++;
	_ogl_glSecondaryColor3sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glSecondaryColor3sv");
	if(!_ogl_glSecondaryColor3sv) num_failed++;
	_ogl_glSecondaryColor3ub = (void (OGL_FUNCPTR *)(GLubyte, GLubyte, GLubyte))ogl_get_proc_address("glSecondaryColor3ub");
	if(!_ogl_glSecondaryColor3ub) num_failed++;
	_ogl_glSecondaryColor3ubv = (void (OGL_FUNCPTR *)(const GLubyte *))ogl_get_proc_address("glSecondaryColor3ubv");
	if(!_ogl_glSecondaryColor3ubv) num_failed++;
	_ogl_glSecondaryColor3ui = (void (OGL_FUNCPTR *)(GLuint, GLuint, GLuint))ogl_get_proc_address("glSecondaryColor3ui");
	if(!_ogl_glSecondaryColor3ui) num_failed++;
	_ogl_glSecondaryColor3uiv = (void (OGL_FUNCPTR *)(const GLuint *))ogl_get_proc_address("glSecondaryColor3uiv");
	if(!_ogl_glSecondaryColor3uiv) num_failed++;
	_ogl_glSecondaryColor3us = (void (OGL_FUNCPTR *)(GLushort, GLushort, GLushort))ogl_get_proc_address("glSecondaryColor3us");
	if(!_ogl_glSecondaryColor3us) num_failed++;
	_ogl_glSecondaryColor3usv = (void (OGL_FUNCPTR *)(const GLushort *))ogl_get_proc_address("glSecondaryColor3usv");
	if(!_ogl_glSecondaryColor3usv) num_failed++;
	_ogl_glSecondaryColorPointer = (void (OGL_FUNCPTR *)(GLint, GLenum, GLsizei, const void *))ogl_get_proc_address("glSecondaryColorPointer");
	if(!_ogl_glSecondaryColorPointer) num_failed++;
	_ogl_glWindowPos2d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble))ogl_get_proc_address("glWindowPos2d");
	if(!_ogl_glWindowPos2d) num_failed++;
	_ogl_glWindowPos2dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glWindowPos2dv");
	if(!_ogl_glWindowPos2dv) num_failed++;
	_ogl_glWindowPos2f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat))ogl_get_proc_address("glWindowPos2f");
	if(!_ogl_glWindowPos2f) num_failed++;
	_ogl_glWindowPos2fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glWindowPos2fv");
	if(!_ogl_glWindowPos2fv) num_failed++;
	_ogl_glWindowPos2i = (void (OGL_FUNCPTR *)(GLint, GLint))ogl_get_proc_address("glWindowPos2i");
	if(!_ogl_glWindowPos2i) num_failed++;
	_ogl_glWindowPos2iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glWindowPos2iv");
	if(!_ogl_glWindowPos2iv) num_failed++;
	_ogl_glWindowPos2s = (void (OGL_FUNCPTR *)(GLshort, GLshort))ogl_get_proc_address("glWindowPos2s");
	if(!_ogl_glWindowPos2s) num_failed++;
	_ogl_glWindowPos2sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glWindowPos2sv");
	if(!_ogl_glWindowPos2sv) num_failed++;
	_ogl_glWindowPos3d = (void (OGL_FUNCPTR *)(GLdouble, GLdouble, GLdouble))ogl_get_proc_address("glWindowPos3d");
	if(!_ogl_glWindowPos3d) num_failed++;
	_ogl_glWindowPos3dv = (void (OGL_FUNCPTR *)(const GLdouble *))ogl_get_proc_address("glWindowPos3dv");
	if(!_ogl_glWindowPos3dv) num_failed++;
	_ogl_glWindowPos3f = (void (OGL_FUNCPTR *)(GLfloat, GLfloat, GLfloat))ogl_get_proc_address("glWindowPos3f");
	if(!_ogl_glWindowPos3f) num_failed++;
	_ogl_glWindowPos3fv = (void (OGL_FUNCPTR *)(const GLfloat *))ogl_get_proc_address("glWindowPos3fv");
	if(!_ogl_glWindowPos3fv) num_failed++;
	_ogl_glWindowPos3i = (void (OGL_FUNCPTR *)(GLint, GLint, GLint))ogl_get_proc_address("glWindowPos3i");
	if(!_ogl_glWindowPos3i) num_failed++;
	_ogl_glWindowPos3iv = (void (OGL_FUNCPTR *)(const GLint *))ogl_get_proc_address("glWindowPos3iv");
	if(!_ogl_glWindowPos3iv) num_failed++;
	_ogl_glWindowPos3s = (void (OGL_FUNCPTR *)(GLshort, GLshort, GLshort))ogl_get_proc_address("glWindowPos3s");
	if(!_ogl_glWindowPos3s) num_failed++;
	_ogl_glWindowPos3sv = (void (OGL_FUNCPTR *)(const GLshort *))ogl_get_proc_address("glWindowPos3sv");
	if(!_ogl_glWindowPos3sv) num_failed++;
	#endif /* OGL_COMPATIBILITY */

	return num_failed;
}

#endif /* OGL_IMPLEMENTATION */
#ifdef __cplusplus
}
#endif /*__cplusplus*/
#endif /* OGL_INCLUDE */

/*
------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright (c) 2017 Rayalan Kenyon
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain (www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
------------------------------------------------------------------------------
*/
